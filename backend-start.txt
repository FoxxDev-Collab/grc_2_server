This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.prettierrc
eslint.config.mjs
nest-cli.json
package.json
planning/implementation-phases.md
README.md
references/mock-data.txt
src/app.controller.spec.ts
src/app.controller.ts
src/app.module.ts
src/app.service.ts
src/auth/auth.controller.ts
src/auth/auth.module.ts
src/auth/auth.service.ts
src/auth/dto/login.dto.ts
src/auth/guards/jwt-auth.guard.ts
src/auth/guards/roles.guard.ts
src/auth/strategies/jwt.strategy.ts
src/clients/clients.controller.ts
src/clients/clients.module.ts
src/clients/clients.service.ts
src/clients/dto/create-client-user.dto.ts
src/clients/dto/create-client.dto.ts
src/clients/dto/update-client-user.dto.ts
src/clients/dto/update-client.dto.ts
src/clients/entities/client-user.entity.ts
src/clients/entities/client.entity.ts
src/common/common.module.ts
src/common/decorators/roles.decorator.ts
src/common/dto/pagination.dto.ts
src/common/filters/http-exception.filter.ts
src/common/interfaces/api-response.interface.ts
src/common/services/utility.service.ts
src/config/app.config.ts
src/config/database.config.ts
src/main.ts
src/migrations/1709575571000-InitialSchema.ts
src/migrations/1709575572000-SeedData.ts
src/scripts/create-database.ts
src/users/dto/create-user.dto.ts
src/users/dto/update-user.dto.ts
src/users/entities/user.entity.ts
src/users/users.controller.ts
src/users/users.module.ts
src/users/users.service.ts
test/app.e2e-spec.ts
test/jest-e2e.json
tsconfig.build.json
tsconfig.json

================================================================
Files
================================================================

================
File: .gitignore
================
# compiled output
/dist
/node_modules
/build

# Logs
logs
*.log
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS
.DS_Store

# Tests
/coverage
/.nyc_output

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# temp directory
.temp
.tmp

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

================
File: .prettierrc
================
{
  "singleQuote": true,
  "trailingComma": "all"
}

================
File: eslint.config.mjs
================
// @ts-check
import eslint from '@eslint/js';
import globals from 'globals';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  {
    ignores: ['eslint.config.mjs'],
  },
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  {
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
      ecmaVersion: 5,
      sourceType: 'module',
      parserOptions: {
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
  },
  {
    rules: {
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-floating-promises': 'warn',
      '@typescript-eslint/no-unsafe-argument': 'warn'
    },
  },
);

================
File: nest-cli.json
================
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}

================
File: package.json
================
{
  "name": "grc_2_server",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/common": "^11.0.1",
    "@nestjs/config": "^4.0.1",
    "@nestjs/core": "^11.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/mapped-types": "^2.1.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.1",
    "@nestjs/typeorm": "^11.0.0",
    "bcrypt": "^5.1.1",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "pg": "^8.13.3",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1",
    "typeorm": "^0.3.21"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@swc/cli": "^0.6.0",
    "@swc/core": "^1.10.7",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.13.9",
    "@types/passport": "^1.0.17",
    "@types/passport-jwt": "^4.0.1",
    "@types/pg": "^8.11.11",
    "@types/supertest": "^6.0.2",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^16.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.4.2",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.20.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}

================
File: planning/implementation-phases.md
================
Based on the information gathered, I'll now develop a comprehensive implementation plan for creating a NestJS backend for the GRC application. Let's focus on the core components first, as requested.

# GRC Application Backend Implementation Plan

## 1. Overview

We're building a server backend for a Governance, Risk, and Compliance (GRC) application using NestJS. The application will initially focus on core functionality including authentication and user management, with plans to expand to client management later.

### Key Technologies:
- **Backend Framework**: NestJS
- **Database**: PostgreSQL (using existing Docker setup)
- **Authentication**: JWT-based authentication
- **Process Management**: PM2 for production deployment
- **API Structure**: REST API (with potential for GraphQL expansion)

## 2. System Architecture

```mermaid
graph TD
    Client[Client Applications] --> API[NestJS API Layer]
    API --> Auth[Authentication Module]
    API --> Users[Users Module]
    API --> Clients[Clients Module]
    API --> Common[Common Module]
    Auth --> DB[(PostgreSQL Database)]
    Users --> DB
    Clients --> DB
    Common --> DB
```

## 3. Database Design

### Core Tables:

```mermaid
erDiagram
    USERS {
        int id PK
        string email
        string password_hash
        string first_name
        string last_name
        string role
        boolean is_active
        datetime last_login
        datetime created_at
        datetime updated_at
        string profile_image
        string phone_number
        string department
        string title
        string status
        int failed_login_attempts
        datetime last_password_change
        json preferences
    }
    
    ROLES {
        string id PK
        string name
        string description
        array permissions
        int level
    }
    
    PERMISSIONS {
        string id PK
        string description
    }
    
    CLIENTS {
        int id PK
        string name
        string industry
        string email
        string phone
        string primary_contact
        datetime created_at
        datetime last_activity
        int compliance_score
        string status
        json address
        string size
        int employee_count
        string website
    }
    
    CLIENT_USERS {
        int id PK
        string username
        string email
        string role
        int client_id FK
        string first_name
        string last_name
        string title
        string department
        string phone
        boolean is_active
        datetime last_active
        array permissions
    }
    
    USERS ||--o{ CLIENT_USERS : "manages"
    ROLES ||--o{ USERS : "has"
    PERMISSIONS }|--|| ROLES : "included_in"
    CLIENTS ||--o{ CLIENT_USERS : "has"
```

## 4. Implementation Phases

### Phase 1: Project Setup and Core Infrastructure

1. **Initialize NestJS Project**
   - Set up project structure
   - Configure TypeScript
   - Set up environment configuration
   - Configure database connection

2. **Database Integration**
   - Set up TypeORM
   - Create database migration system
   - Define core database entities
   - Create initial migrations

3. **Common Module**
   - Create utility services
   - Set up logging
   - Implement error handling
   - Create common DTOs and interfaces

### Phase 2: Authentication and User Management

1. **Authentication Module**
   - Implement JWT authentication strategy
   - Create login/logout endpoints
   - Implement password hashing
   - Set up refresh token mechanism
   - Create authentication guards

2. **User Module**
   - Implement user CRUD operations
   - Create user roles and permissions
   - Implement user profile management
   - Set up password reset functionality
   - Create user preferences management

### Phase 3: Client Management

1. **Client Module**
   - Implement client CRUD operations
   - Create client user management
   - Implement client settings and preferences
   - Set up client data validation

### Phase 4: Testing and Deployment

1. **Testing**
   - Write unit tests for core functionality
   - Implement integration tests
   - Set up end-to-end testing

2. **Deployment**
   - Configure PM2 for production
   - Set up CI/CD pipeline
   - Create Docker configuration for deployment
   - Implement database backup strategy

## 5. Detailed Implementation Plan

### Phase 1: Project Setup and Core Infrastructure

#### 1.1 Initialize NestJS Project

```bash
# Install NestJS CLI
npm i -g @nestjs/cli

# Create new NestJS project
nest new grc-server

# Install dependencies
cd grc-server
npm install @nestjs/config @nestjs/typeorm typeorm pg class-validator class-transformer
npm install --save-dev @types/node @types/pg
```

#### 1.2 Project Structure

```
src/
├── app.module.ts              # Main application module
├── main.ts                    # Application entry point
├── common/                    # Common utilities and services
│   ├── dto/                   # Data Transfer Objects
│   ├── interfaces/            # TypeScript interfaces
│   ├── decorators/            # Custom decorators
│   └── filters/               # Exception filters
├── config/                    # Configuration
│   ├── database.config.ts     # Database configuration
│   └── app.config.ts          # Application configuration
├── auth/                      # Authentication module
│   ├── auth.module.ts
│   ├── auth.controller.ts
│   ├── auth.service.ts
│   ├── strategies/            # Authentication strategies
│   └── guards/                # Authentication guards
├── users/                     # Users module
│   ├── users.module.ts
│   ├── users.controller.ts
│   ├── users.service.ts
│   ├── entities/              # User-related entities
│   └── dto/                   # User-related DTOs
└── clients/                   # Clients module
    ├── clients.module.ts
    ├── clients.controller.ts
    ├── clients.service.ts
    ├── entities/              # Client-related entities
    └── dto/                   # Client-related DTOs
```

#### 1.3 Database Configuration

```typescript
// src/config/database.config.ts
import { registerAs } from '@nestjs/config';

export default registerAs('database', () => ({
  type: 'postgres',
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT, 10) || 5432,
  username: process.env.DB_USERNAME || 'postgres',
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE || 'grc_db',
  entities: ['dist/**/*.entity{.ts,.js}'],
  synchronize: process.env.NODE_ENV !== 'production',
  logging: process.env.NODE_ENV !== 'production',
  migrations: ['dist/migrations/**/*{.ts,.js}'],
  migrationsRun: true,
}));
```

### Phase 2: Authentication and User Management

#### 2.1 User Entity

```typescript
// src/users/entities/user.entity.ts
import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';

@Entity('users')
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ unique: true })
  email: string;

  @Column()
  password: string;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  role: string;

  @Column({ default: true })
  isActive: boolean;

  @Column({ nullable: true, type: 'timestamp' })
  lastLogin: Date;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @Column({ nullable: true })
  profileImage: string;

  @Column({ nullable: true })
  phoneNumber: string;

  @Column({ nullable: true })
  department: string;

  @Column({ nullable: true })
  title: string;

  @Column({ default: 'active' })
  status: string;

  @Column({ default: 0 })
  failedLoginAttempts: number;

  @Column({ nullable: true, type: 'timestamp' })
  lastPasswordChange: Date;

  @Column({ type: 'json', nullable: true })
  preferences: any;
}
```

#### 2.2 Authentication Service

```typescript
// src/auth/auth.service.ts
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { UsersService } from '../users/users.service';
import * as bcrypt from 'bcrypt';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
  ) {}

  async validateUser(email: string, password: string): Promise<any> {
    const user = await this.usersService.findByEmail(email);
    if (user && await bcrypt.compare(password, user.password)) {
      const { password, ...result } = user;
      return result;
    }
    return null;
  }

  async login(user: any) {
    const payload = { email: user.email, sub: user.id, role: user.role };
    return {
      access_token: this.jwtService.sign(payload),
      user,
    };
  }
}
```

### Phase 3: Client Management

#### 3.1 Client Entity

```typescript
// src/clients/entities/client.entity.ts
import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, OneToMany } from 'typeorm';
import { ClientUser } from './client-user.entity';

@Entity('clients')
export class Client {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column({ nullable: true })
  industry: string;

  @Column({ nullable: true })
  email: string;

  @Column({ nullable: true })
  phone: string;

  @Column({ nullable: true })
  primaryContact: string;

  @CreateDateColumn()
  createdAt: Date;

  @Column({ nullable: true, type: 'timestamp' })
  lastActivity: Date;

  @Column({ nullable: true })
  complianceScore: number;

  @Column({ default: 'active' })
  status: string;

  @Column({ type: 'json', nullable: true })
  address: any;

  @Column({ nullable: true })
  size: string;

  @Column({ nullable: true })
  employeeCount: number;

  @Column({ nullable: true })
  website: string;

  @OneToMany(() => ClientUser, clientUser => clientUser.client)
  users: ClientUser[];
}
```

## 6. API Endpoints

### Authentication Endpoints

- `POST /auth/login` - User login
- `POST /auth/logout` - User logout
- `GET /auth/me` - Get current user
- `POST /auth/refresh-token` - Refresh access token

### User Management Endpoints

- `GET /users` - Get all users
- `GET /users/:id` - Get user by ID
- `POST /users` - Create new user
- `PUT /users/:id` - Update user
- `DELETE /users/:id` - Delete user
- `PATCH /users/:id/password` - Update user password
- `GET /users/roles` - Get all roles
- `GET /users/permissions` - Get all permissions

### Client Management Endpoints

- `GET /clients` - Get all clients
- `GET /clients/:id` - Get client by ID
- `POST /clients` - Create new client
- `PUT /clients/:id` - Update client
- `DELETE /clients/:id` - Delete client
- `GET /clients/:id/users` - Get client users
- `POST /clients/:id/users` - Add user to client
- `DELETE /clients/:id/users/:userId` - Remove user from client

## 7. Scalability Considerations

1. **Database Optimization**
   - Implement connection pooling
   - Use indexes for frequently queried fields
   - Consider read replicas for scaling read operations

2. **Application Scaling**
   - Use PM2 cluster mode to utilize multiple CPU cores
   - Implement caching strategies (Redis)
   - Consider horizontal scaling with load balancing

3. **Monitoring and Performance**
   - Implement application metrics collection
   - Set up performance monitoring
   - Use logging for debugging and auditing

## 8. Security Considerations

1. **Authentication and Authorization**
   - Implement JWT with appropriate expiration
   - Use refresh tokens for extended sessions
   - Implement role-based access control

2. **Data Protection**
   - Encrypt sensitive data at rest
   - Use HTTPS for all communications
   - Implement input validation and sanitization

3. **API Security**
   - Implement rate limiting
   - Use CORS protection
   - Add request validation

## 9. Next Steps

1. Set up the initial NestJS project structure
2. Configure database connection and create initial entities
3. Implement authentication module
4. Create user management functionality
5. Develop client management features
6. Implement testing and deployment pipeline

================
File: README.md
================
<p align="center">
  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo-small.svg" width="120" alt="Nest Logo" /></a>
</p>

[circleci-image]: https://img.shields.io/circleci/build/github/nestjs/nest/master?token=abc123def456
[circleci-url]: https://circleci.com/gh/nestjs/nest

  <p align="center">A progressive <a href="http://nodejs.org" target="_blank">Node.js</a> framework for building efficient and scalable server-side applications.</p>
    <p align="center">
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/v/@nestjs/core.svg" alt="NPM Version" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/l/@nestjs/core.svg" alt="Package License" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/dm/@nestjs/common.svg" alt="NPM Downloads" /></a>
<a href="https://circleci.com/gh/nestjs/nest" target="_blank"><img src="https://img.shields.io/circleci/build/github/nestjs/nest/master" alt="CircleCI" /></a>
<a href="https://discord.gg/G7Qnnhy" target="_blank"><img src="https://img.shields.io/badge/discord-online-brightgreen.svg" alt="Discord"/></a>
<a href="https://opencollective.com/nest#backer" target="_blank"><img src="https://opencollective.com/nest/backers/badge.svg" alt="Backers on Open Collective" /></a>
<a href="https://opencollective.com/nest#sponsor" target="_blank"><img src="https://opencollective.com/nest/sponsors/badge.svg" alt="Sponsors on Open Collective" /></a>
  <a href="https://paypal.me/kamilmysliwiec" target="_blank"><img src="https://img.shields.io/badge/Donate-PayPal-ff3f59.svg" alt="Donate us"/></a>
    <a href="https://opencollective.com/nest#sponsor"  target="_blank"><img src="https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg" alt="Support us"></a>
  <a href="https://twitter.com/nestframework" target="_blank"><img src="https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow" alt="Follow us on Twitter"></a>
</p>
  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)
  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->

## Description

[Nest](https://github.com/nestjs/nest) framework TypeScript starter repository.

## Project setup

```bash
$ npm install
```

## Compile and run the project

```bash
# development
$ npm run start

# watch mode
$ npm run start:dev

# production mode
$ npm run start:prod
```

## Run tests

```bash
# unit tests
$ npm run test

# e2e tests
$ npm run test:e2e

# test coverage
$ npm run test:cov
```

## Deployment

When you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the [deployment documentation](https://docs.nestjs.com/deployment) for more information.

If you are looking for a cloud-based platform to deploy your NestJS application, check out [Mau](https://mau.nestjs.com), our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:

```bash
$ npm install -g mau
$ mau deploy
```

With Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.

## Resources

Check out a few resources that may come in handy when working with NestJS:

- Visit the [NestJS Documentation](https://docs.nestjs.com) to learn more about the framework.
- For questions and support, please visit our [Discord channel](https://discord.gg/G7Qnnhy).
- To dive deeper and get more hands-on experience, check out our official video [courses](https://courses.nestjs.com/).
- Deploy your application to AWS with the help of [NestJS Mau](https://mau.nestjs.com) in just a few clicks.
- Visualize your application graph and interact with the NestJS application in real-time using [NestJS Devtools](https://devtools.nestjs.com).
- Need help with your project (part-time to full-time)? Check out our official [enterprise support](https://enterprise.nestjs.com).
- To stay in the loop and get updates, follow us on [X](https://x.com/nestframework) and [LinkedIn](https://linkedin.com/company/nestjs).
- Looking for a job, or have a job to offer? Check out our official [Jobs board](https://jobs.nestjs.com).

## Support

Nest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).

## Stay in touch

- Author - [Kamil Myśliwiec](https://twitter.com/kammysliwiec)
- Website - [https://nestjs.com](https://nestjs.com/)
- Twitter - [@nestframework](https://twitter.com/nestframework)

## License

Nest is [MIT licensed](https://github.com/nestjs/nest/blob/master/LICENSE).

================
File: references/mock-data.txt
================
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
data/auth/roles.json
data/auth/users.json
data/client_data/advanced_questions.json
data/client_data/assessments.json
data/client_data/authorization.json
data/client_data/basic_questions.json
data/client_data/client_users.json
data/client_data/clients.json
data/client_data/departments.json
data/client_data/documents.json
data/client_data/findings_to_risk.json
data/client_data/incident_reference_data.json
data/client_data/incidents/enums.json
data/client_data/incidents/incidents.json
data/client_data/key_personnel.json
data/client_data/objective_to_initiative.json
data/client_data/reference_data.json
data/client_data/risk_to_objective.json
data/client_data/scan_results.json
data/client_data/securityInitiatives.json
data/client_data/securityObjectives.json
data/system/artifacts/artifacts.json
data/system/artifacts/enums.json
data/system/ato_tracker.json
data/system/authorization.json
data/system/categorization.json
data/system/components/components.json
data/system/components/enums.json
data/system/controls.json
data/system/enums.json
data/system/process_steps.json
data/system/security_controls/controls.json
data/system/security_controls/families.json
data/system/security_controls/stats.json
data/system/system_packages.json
data/system/systems.json
db.json
generateDb.js
mockDb.js
repositories/Repository.js
server.js

================================================================
Files
================================================================

================
File: data/auth/roles.json
================
{
  "roles": {
    "SENIOR_AO": {
      "name": "Senior Authorizing Official",
      "description": "Top-level authorization authority with full system access",
      "permissions": [
        "all"
      ],
      "level": 1
    },
    "SUBORDINATE_AO": {
      "name": "Subordinate Authorizing Official",
      "description": "Secondary authorization authority with approval capabilities",
      "permissions": [
        "view",
        "edit",
        "approve"
      ],
      "level": 2
    },
    "AODR": {
      "name": "Authorizing Official Designated Representative",
      "description": "Acts on behalf of authorizing officials for reviews and assessments",
      "permissions": [
        "view",
        "edit",
        "review"
      ],
      "level": 3
    },
    "SCA": {
      "name": "Security Control Assessor",
      "description": "Performs comprehensive security control assessments",
      "permissions": [
        "view",
        "assess",
        "review"
      ],
      "level": 3
    },
    "SCAR": {
      "name": "Security Control Assessor Representative",
      "description": "Assists in security control assessments and documentation",
      "permissions": [
        "view",
        "assess"
      ],
      "level": 4
    }
  },
  "permissions": [
    {
      "id": "all",
      "description": "Full system access with no restrictions"
    },
    {
      "id": "view",
      "description": "Read-only access to system information"
    },
    {
      "id": "edit",
      "description": "Ability to modify system information"
    },
    {
      "id": "approve",
      "description": "Authority to approve system changes and assessments"
    },
    {
      "id": "review",
      "description": "Ability to review and comment on system documentation"
    },
    {
      "id": "assess",
      "description": "Permission to perform security assessments"
    }
  ]
}

================
File: data/auth/users.json
================
{
  "users": [
    {
      "id": 1,
      "email": "senior.ao@example.com",
      "password": "password123",
      "firstName": "John",
      "lastName": "Smith",
      "role": "SENIOR_AO",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0123",
      "department": "Executive",
      "title": "Senior Authorizing Official",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "light",
        "language": "en"
      }
    },
    {
      "id": 2,
      "email": "sao@example.com",
      "password": "password123",
      "firstName": "Jane",
      "lastName": "Doe",
      "role": "SUBORDINATE_AO",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0124",
      "department": "Authorization",
      "title": "Subordinate Authorizing Official",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "light",
        "language": "en"
      }
    },
    {
      "id": 3,
      "email": "aodr@example.com",
      "password": "password123",
      "firstName": "Mike",
      "lastName": "Johnson",
      "role": "AODR",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0125",
      "department": "Authorization",
      "title": "AO Designated Representative",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "dark",
        "language": "en"
      }
    },
    {
      "id": 4,
      "email": "sca@example.com",
      "password": "password123",
      "firstName": "Sarah",
      "lastName": "Wilson",
      "role": "SCA",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0126",
      "department": "Security Assessment",
      "title": "Security Control Assessor",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "light",
        "language": "en"
      }
    },
    {
      "id": 5,
      "email": "scar@example.com",
      "password": "password123",
      "firstName": "David",
      "lastName": "Brown",
      "role": "SCAR",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0127",
      "department": "Security Assessment",
      "title": "Security Control Assessor Representative",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "dark",
        "language": "en"
      }
    }
  ],
  "statuses": [
    {
      "id": "active",
      "description": "User account is active and accessible"
    },
    {
      "id": "inactive",
      "description": "User account has been deactivated"
    },
    {
      "id": "suspended",
      "description": "User account has been temporarily suspended"
    },
    {
      "id": "pending_activation",
      "description": "User account awaiting activation"
    }
  ],
  "preferences": {
    "themes": [
      {
        "id": "light",
        "name": "Light Theme",
        "description": "Default light color scheme"
      },
      {
        "id": "dark",
        "name": "Dark Theme",
        "description": "Dark color scheme for low-light environments"
      }
    ],
    "languages": [
      {
        "id": "en",
        "name": "English",
        "code": "en-US"
      },
      {
        "id": "es",
        "name": "Spanish",
        "code": "es-ES"
      },
      {
        "id": "fr",
        "name": "French",
        "code": "fr-FR"
      }
    ],
    "notificationTypes": [
      {
        "id": "email",
        "name": "Email Notifications",
        "description": "Receive notifications via email"
      },
      {
        "id": "in-app",
        "name": "In-App Notifications",
        "description": "Receive notifications within the application"
      },
      {
        "id": "sms",
        "name": "SMS Notifications",
        "description": "Receive notifications via text message"
      }
    ]
  }
}

================
File: data/client_data/advanced_questions.json
================
{
  "advancesQuestions": [
    {
      "id": "AC-1-Q1",
      "controlId": "AC-1",
      "text": "Has the organization developed and documented access control policies and procedures?",
      "impact": "Access control policies are fundamental to system security",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing access control policies and procedures",
        "description": "Organization lacks documented access control policies and procedures",
        "severity": "high",
        "recommendation": "Develop and document comprehensive access control policies and procedures",
        "category": "Access Control",
        "nistControl": "AC-1"
      }
    },
    {
      "id": "AC-2-Q1",
      "controlId": "AC-2",
      "text": "Does the organization implement automated account management processes?",
      "impact": "Automated account management ensures consistent access control",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Lack of automated account management",
        "description": "Account management processes are not automated",
        "severity": "high",
        "recommendation": "Implement automated account management system",
        "category": "Access Control",
        "nistControl": "AC-2"
      }
    },
    {
      "id": "AC-2-Q2",
      "controlId": "AC-2",
      "text": "Are account creation, modification, and termination processes documented and followed?",
      "impact": "Proper account lifecycle management prevents unauthorized access",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Inadequate account lifecycle management",
        "description": "Account management processes are not properly documented or followed",
        "severity": "high",
        "recommendation": "Document and implement account lifecycle management procedures",
        "category": "Access Control",
        "nistControl": "AC-2"
      }
    },
    {
      "id": "AC-3-Q1",
      "controlId": "AC-3",
      "text": "Is role-based access control (RBAC) implemented across all systems?",
      "impact": "RBAC ensures proper access enforcement",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing role-based access control",
        "description": "Systems do not implement role-based access control",
        "severity": "high",
        "recommendation": "Implement RBAC across all systems",
        "category": "Access Control",
        "nistControl": "AC-3"
      }
    },
    {
      "id": "AC-4-Q1",
      "controlId": "AC-4",
      "text": "Are information flow controls implemented between system components?",
      "impact": "Information flow control prevents unauthorized data transfer",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing information flow controls",
        "description": "System lacks proper information flow controls between components",
        "severity": "high",
        "recommendation": "Implement information flow controls between system components",
        "category": "Access Control",
        "nistControl": "AC-4"
      }
    },
    {
      "id": "AC-5-Q1",
      "controlId": "AC-5",
      "text": "Is separation of duties enforced through assigned access authorizations?",
      "impact": "Separation of duties prevents abuse of privileges",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Lack of separation of duties",
        "description": "System does not enforce separation of duties through access controls",
        "severity": "high",
        "recommendation": "Implement separation of duties in access authorizations",
        "category": "Access Control",
        "nistControl": "AC-5"
      }
    },
    {
      "id": "AC-6-Q1",
      "controlId": "AC-6",
      "text": "Is the principle of least privilege enforced for all user types?",
      "impact": "Least privilege minimizes potential damage from accidents or malicious acts",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Insufficient least privilege implementation",
        "description": "System does not properly enforce principle of least privilege",
        "severity": "high",
        "recommendation": "Implement least privilege access controls",
        "category": "Access Control",
        "nistControl": "AC-6"
      }
    },
    {
      "id": "AU-2-Q1",
      "controlId": "AU-2",
      "text": "Are audit events defined and logged across all systems?",
      "impact": "Audit logging is essential for security monitoring",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Insufficient audit logging",
        "description": "Systems do not have proper audit event logging configured",
        "severity": "high",
        "recommendation": "Define and implement comprehensive audit logging",
        "category": "Audit and Accountability",
        "nistControl": "AU-2"
      }
    },
    {
      "id": "AU-3-Q1",
      "controlId": "AU-3",
      "text": "Do audit records contain sufficient information for forensic analysis?",
      "impact": "Detailed audit records enable incident investigation",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Insufficient audit record content",
        "description": "Audit records lack necessary detail for forensic analysis",
        "severity": "high",
        "recommendation": "Configure audit logging to capture all required information",
        "category": "Audit and Accountability",
        "nistControl": "AU-3"
      }
    },
    {
      "id": "AU-6-Q1",
      "controlId": "AU-6",
      "text": "Is there a process for regular audit log review and analysis?",
      "impact": "Regular log review helps detect security incidents",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Inadequate audit log review",
        "description": "Organization lacks regular audit log review process",
        "severity": "high",
        "recommendation": "Implement regular audit log review procedures",
        "category": "Audit and Accountability",
        "nistControl": "AU-6"
      }
    },
    {
      "id": "AU-8-Q1",
      "controlId": "AU-8",
      "text": "Are system clocks synchronized across all systems for accurate timestamps?",
      "impact": "Time synchronization ensures accurate event correlation",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Lack of time synchronization",
        "description": "System clocks not properly synchronized",
        "severity": "medium",
        "recommendation": "Implement NTP or similar time synchronization",
        "category": "Audit and Accountability",
        "nistControl": "AU-8"
      }
    },
    {
      "id": "AU-9-Q1",
      "controlId": "AU-9",
      "text": "Are audit records protected from unauthorized access and modification?",
      "impact": "Protected audit records maintain integrity of security monitoring",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Unprotected audit records",
        "description": "Audit records not adequately protected from tampering",
        "severity": "high",
        "recommendation": "Implement audit record protection mechanisms",
        "category": "Audit and Accountability",
        "nistControl": "AU-9"
      }
    },
    {
      "id": "CM-2-Q1",
      "controlId": "CM-2",
      "text": "Is there a documented baseline configuration for all systems?",
      "impact": "Baseline configurations ensure consistent security",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Missing baseline configurations",
        "description": "Systems lack documented baseline configurations",
        "severity": "high",
        "recommendation": "Develop and maintain baseline configurations for all systems",
        "category": "Configuration Management",
        "nistControl": "CM-2"
      }
    },
    {
      "id": "CM-3-Q1",
      "controlId": "CM-3",
      "text": "Is there a change management process for system modifications?",
      "impact": "Change management prevents unauthorized changes",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Inadequate change management",
        "description": "Organization lacks proper change management process",
        "severity": "high",
        "recommendation": "Implement formal change management procedures",
        "category": "Configuration Management",
        "nistControl": "CM-3"
      }
    },
    {
      "id": "CM-6-Q1",
      "controlId": "CM-6",
      "text": "Are configuration settings monitored and controlled?",
      "impact": "Configuration control maintains security posture",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Insufficient configuration control",
        "description": "Configuration settings not properly monitored or controlled",
        "severity": "high",
        "recommendation": "Implement configuration monitoring and control",
        "category": "Configuration Management",
        "nistControl": "CM-6"
      }
    },
    {
      "id": "CM-7-Q1",
      "controlId": "CM-7",
      "text": "Is the principle of least functionality enforced through application whitelisting?",
      "impact": "Least functionality reduces attack surface",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Missing application whitelisting",
        "description": "Systems do not enforce least functionality through whitelisting",
        "severity": "high",
        "recommendation": "Implement application whitelisting",
        "category": "Configuration Management",
        "nistControl": "CM-7"
      }
    },
    {
      "id": "IA-2-Q1",
      "controlId": "IA-2",
      "text": "Is multi-factor authentication required for all privileged accounts?",
      "impact": "MFA protects privileged access from compromise",
      "category": "Identification and Authentication",
      "findingTemplate": {
        "title": "Missing MFA for privileged accounts",
        "description": "Privileged accounts not protected by multi-factor authentication",
        "severity": "critical",
        "recommendation": "Implement MFA for all privileged account access",
        "category": "Identification and Authentication",
        "nistControl": "IA-2"
      }
    },
    {
      "id": "IA-4-Q1",
      "controlId": "IA-4",
      "text": "Are unique identifiers assigned to all system users?",
      "impact": "Unique identifiers ensure accountability",
      "category": "Identification and Authentication",
      "findingTemplate": {
        "title": "Non-unique user identifiers",
        "description": "System users not assigned unique identifiers",
        "severity": "high",
        "recommendation": "Implement unique identifier assignment process",
        "category": "Identification and Authentication",
        "nistControl": "IA-4"
      }
    },
    {
      "id": "IA-5-Q1",
      "controlId": "IA-5",
      "text": "Are password complexity and lifetime restrictions enforced?",
      "impact": "Strong passwords reduce risk of compromise",
      "category": "Identification and Authentication",
      "findingTemplate": {
        "title": "Weak password requirements",
        "description": "Password policies do not enforce adequate complexity or rotation",
        "severity": "high",
        "recommendation": "Implement strong password policies",
        "category": "Identification and Authentication",
        "nistControl": "IA-5"
      }
    },
    {
      "id": "IR-4-Q1",
      "controlId": "IR-4",
      "text": "Is there an incident handling capability in place?",
      "impact": "Incident handling ensures proper response to security events",
      "category": "Incident Response",
      "findingTemplate": {
        "title": "Missing incident handling capability",
        "description": "Organization lacks proper incident handling procedures",
        "severity": "high",
        "recommendation": "Establish incident handling capability",
        "category": "Incident Response",
        "nistControl": "IR-4"
      }
    },
    {
      "id": "IR-5-Q1",
      "controlId": "IR-5",
      "text": "Are security incidents tracked and documented?",
      "impact": "Incident tracking enables trend analysis and improvement",
      "category": "Incident Response",
      "findingTemplate": {
        "title": "Inadequate incident tracking",
        "description": "Security incidents not properly tracked and documented",
        "severity": "high",
        "recommendation": "Implement incident tracking system",
        "category": "Incident Response",
        "nistControl": "IR-5"
      }
    },
    {
      "id": "IR-6-Q1",
      "controlId": "IR-6",
      "text": "Is there a process for incident reporting?",
      "impact": "Incident reporting ensures timely response",
      "category": "Incident Response",
      "findingTemplate": {
        "title": "Missing incident reporting process",
        "description": "Organization lacks formal incident reporting procedures",
        "severity": "high",
        "recommendation": "Establish incident reporting procedures",
        "category": "Incident Response",
        "nistControl": "IR-6"
      }
    },
    {
      "id": "SC-7-Q1",
      "controlId": "SC-7",
      "text": "Are boundary protection mechanisms implemented?",
      "impact": "Boundary protection prevents unauthorized network access",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Insufficient boundary protection",
        "description": "System boundaries lack proper protection mechanisms",
        "severity": "high",
        "recommendation": "Implement boundary protection controls",
        "category": "System and Communications Protection",
        "nistControl": "SC-7"
      }
    },
    {
      "id": "SC-8-Q1",
      "controlId": "SC-8",
      "text": "Is transmission confidentiality and integrity protected?",
      "impact": "Protected transmission prevents data compromise",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Unprotected data transmission",
        "description": "Data transmission lacks confidentiality and integrity protection",
        "severity": "high",
        "recommendation": "Implement transmission protection mechanisms",
        "category": "System and Communications Protection",
        "nistControl": "SC-8"
      }
    },
    {
      "id": "SC-12-Q1",
      "controlId": "SC-12",
      "text": "Are cryptographic keys properly managed throughout their lifecycle?",
      "impact": "Key management ensures cryptographic security",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Inadequate cryptographic key management",
        "description": "Cryptographic keys not properly managed",
        "severity": "high",
        "recommendation": "Implement cryptographic key management procedures",
        "category": "System and Communications Protection",
        "nistControl": "SC-12"
      }
    },
    {
      "id": "SC-13-Q1",
      "controlId": "SC-13",
      "text": "Are FIPS-validated or NSA-approved cryptography used?",
      "impact": "Approved cryptography ensures adequate protection",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Non-approved cryptography",
        "description": "System uses non-approved cryptographic algorithms",
        "severity": "high",
        "recommendation": "Implement FIPS-validated cryptography",
        "category": "System and Communications Protection",
        "nistControl": "SC-13"
      }
    },
    {
      "id": "SI-2-Q1",
      "controlId": "SI-2",
      "text": "Are system flaws identified and corrected?",
      "impact": "Flaw remediation prevents exploitation",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Inadequate flaw remediation",
        "description": "System flaws not properly identified and corrected",
        "severity": "high",
        "recommendation": "Implement flaw remediation process",
        "category": "System and Information Integrity",
        "nistControl": "SI-2"
      }
    },
    {
      "id": "SI-3-Q1",
      "controlId": "SI-3",
      "text": "Is malicious code protection implemented and updated?",
      "impact": "Malware protection prevents system compromise",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Insufficient malware protection",
        "description": "Systems lack adequate malicious code protection",
        "severity": "high",
        "recommendation": "Implement comprehensive malware protection",
        "category": "System and Information Integrity",
        "nistControl": "SI-3"
      }
    },
    {
      "id": "SI-4-Q1",
      "controlId": "SI-4",
      "text": "Is system monitoring capability implemented?",
      "impact": "Monitoring detects potential security violations",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Insufficient system monitoring",
        "description": "System lacks proper monitoring capability",
        "severity": "high",
        "recommendation": "Implement comprehensive system monitoring",
        "category": "System and Information Integrity",
        "nistControl": "SI-4"
      }
    },
    {
      "id": "SI-5-Q1",
      "controlId": "SI-5",
      "text": "Are security alerts and advisories monitored and acted upon?",
      "impact": "Security alerts enable timely response to threats",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Inadequate security alert monitoring",
        "description": "Organization does not properly monitor or respond to security alerts",
        "severity": "high",
        "recommendation": "Implement security alert monitoring and response procedures",
        "category": "System and Information Integrity",
        "nistControl": "SI-5"
      }
    }
  ]
}

================
File: data/client_data/assessments.json
================
{
  "assessmentHistory": [
    {
      "id": "asmt-001",
      "date": "2025-02-01T08:00:00Z",
      "type": "basic",
      "name": "Basic Security Assessment Feb 2025",
      "score": 75,
      "status": "completed",
      "clientId": 1,
      "systemId": "sys-001",
      "answers": [
        {
          "questionId": 1,
          "questionType": "basic",
          "answer": "no",
          "notes": "Antivirus software outdated on 30% of systems"
        },
        {
          "questionId": 2,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Firewalls properly configured"
        },
        {
          "questionId": 3,
          "questionType": "basic",
          "answer": "no",
          "notes": "MFA not implemented on development systems"
        },
        {
          "questionId": 4,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Password policies enforced through AD"
        },
        {
          "questionId": 5,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Monthly training sessions conducted"
        },
        {
          "questionId": 6,
          "questionType": "basic",
          "answer": "no",
          "notes": "Backup testing not performed regularly"
        },
        {
          "questionId": 7,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Encryption implemented for all sensitive data"
        },
        {
          "questionId": 8,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Regular patch management in place"
        }
      ],
      "generatedFindings": [
        {
          "id": "f-001",
          "sourceQuestionId": 1,
          "questionType": "basic",
          "title": "Missing or outdated antivirus protection",
          "description": "Systems lack proper antivirus protection or updates are not maintained",
          "severity": "high",
          "category": "System Security",
          "recommendation": "Install and configure antivirus software on all systems with automatic updates",
          "status": "open",
          "createdDate": "2025-02-01T08:00:00Z"
        },
        {
          "id": "f-002",
          "sourceQuestionId": 6,
          "questionType": "basic",
          "title": "Insufficient backup procedures",
          "description": "Backup processes are not adequate or tested",
          "severity": "high",
          "category": "Data Protection",
          "recommendation": "Implement comprehensive backup strategy with regular testing",
          "status": "in_progress",
          "createdDate": "2025-02-01T08:00:00Z"
        }
      ]
    },
    {
      "id": "asmt-002",
      "date": "2025-02-15T10:00:00Z",
      "type": "advanced",
      "name": "NIST 800-53 Assessment Feb 2025",
      "score": 82,
      "status": "completed",
      "clientId": 1,
      "systemId": "sys-001",
      "answers": [
        {
          "questionId": "AU-2-Q1",
          "questionType": "advanced",
          "answer": "no",
          "notes": "Audit logging not configured on all systems"
        },
        {
          "questionId": "CM-2-Q1",
          "questionType": "advanced",
          "answer": "no",
          "notes": "Baseline configurations not documented"
        },
        {
          "questionId": "SI-4-Q1",
          "questionType": "advanced",
          "answer": "partial",
          "notes": "Monitoring implemented but not comprehensive"
        },
        {
          "questionId": "AC-2-Q1",
          "questionType": "advanced",
          "answer": "yes",
          "notes": "Automated account management implemented"
        },
        {
          "questionId": "SC-7-Q1",
          "questionType": "advanced",
          "answer": "yes",
          "notes": "Boundary protection mechanisms in place"
        }
      ],
      "generatedFindings": [
        {
          "id": "f-003",
          "sourceQuestionId": "AU-2-Q1",
          "questionType": "advanced",
          "title": "Inadequate audit logging",
          "description": "Systems do not have proper audit event logging configured",
          "severity": "high",
          "category": "Audit and Accountability",
          "recommendation": "Define and implement comprehensive audit logging",
          "status": "completed",
          "createdDate": "2025-02-15T10:00:00Z",
          "nistControl": "AU-2"
        },
        {
          "id": "f-004",
          "sourceQuestionId": "CM-2-Q1",
          "questionType": "advanced",
          "title": "Missing baseline configurations",
          "description": "Systems lack documented baseline configurations",
          "severity": "high",
          "category": "Configuration Management",
          "recommendation": "Develop and maintain baseline configurations for all systems",
          "status": "open",
          "createdDate": "2025-02-15T10:00:00Z",
          "nistControl": "CM-2"
        },
        {
          "id": "f-005",
          "sourceQuestionId": "SI-4-Q1",
          "questionType": "advanced",
          "title": "Insufficient system monitoring",
          "description": "System lacks proper monitoring capability",
          "severity": "high",
          "category": "System and Information Integrity",
          "recommendation": "Implement comprehensive system monitoring",
          "status": "in_progress",
          "createdDate": "2025-02-15T10:00:00Z",
          "nistControl": "SI-4"
        }
      ]
    }
  ]
}

================
File: data/client_data/authorization.json
================
{
  "authorizationPackages": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "completed": [
        { "id": 1, "name": "System Security Plan" },
        { "id": 2, "name": "Risk Assessment Report" }
      ],
      "pending": [
        { "id": 1, "name": "Privacy Impact Assessment" },
        { "id": 2, "name": "Contingency Plan" }
      ],
      "executiveSummary": "System implements moderate security controls with some gaps identified.",
      "status": "in-progress",
      "validationStatus": "pending",
      "completionPercentage": 65,
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "authorizationDecisions": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "result": "pending",
      "official": "",
      "date": "",
      "expirationDate": "",
      "justification": "",
      "conditions": [
        { "id": 1, "description": "Implement automated account management" },
        { "id": 2, "description": "Complete security assessment" }
      ],
      "boundary": "System includes all components within the development network segment.",
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "authorizationRisks": [
    {
      "id": "RISK-001",
      "systemId": "sys-001",
      "clientId": 1,
      "description": "Insufficient access controls",
      "likelihood": "high",
      "impact": "high",
      "status": "open",
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "nonCompliantControls": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "controlId": "AC-2",
      "title": "Account Management",
      "status": "non-compliant",
      "findings": "Missing automated account management procedures",
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ]
}

================
File: data/client_data/basic_questions.json
================
{
  "basicQuestions": [
    {
      "id": 1,
      "text": "Is antivirus software installed and updated on all systems?",
      "impact": "Antivirus helps protect against malware and cyber threats",
      "category": "System Security",
      "findingTemplate": {
        "title": "Missing or outdated antivirus protection",
        "description": "Systems lack proper antivirus protection or updates are not maintained",
        "severity": "high",
        "recommendation": "Install and configure antivirus software on all systems with automatic updates",
        "category": "System Security"
      }
    },
    {
      "id": 2,
      "text": "Are firewalls configured and maintained on all network boundaries?",
      "impact": "Firewalls help prevent unauthorized network access",
      "category": "Network Security",
      "findingTemplate": {
        "title": "Inadequate firewall protection",
        "description": "Network boundaries lack proper firewall configuration",
        "severity": "high",
        "recommendation": "Deploy and configure firewalls at all network boundaries",
        "category": "Network Security"
      }
    },
    {
      "id": 3,
      "text": "Is multi-factor authentication (MFA) enabled for all critical systems?",
      "impact": "MFA significantly reduces the risk of unauthorized access",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing Multi-Factor Authentication",
        "description": "Critical systems lack MFA protection",
        "severity": "high",
        "recommendation": "Implement MFA for all critical system access",
        "category": "Access Control"
      }
    },
    {
      "id": 4,
      "text": "Are password policies enforced across all systems?",
      "impact": "Strong password policies are essential for access security",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Insufficient password policies",
        "description": "Password policies do not meet security requirements",
        "severity": "high",
        "recommendation": "Implement and enforce strong password policies",
        "category": "Access Control"
      }
    },
    {
      "id": 5,
      "text": "Is security awareness training provided regularly?",
      "impact": "Training helps prevent social engineering attacks",
      "category": "Security Awareness",
      "findingTemplate": {
        "title": "Inadequate security awareness training",
        "description": "Security awareness training is not regularly conducted",
        "severity": "medium",
        "recommendation": "Implement regular security awareness training program",
        "category": "Security Awareness"
      }
    },
    {
      "id": 6,
      "text": "Are regular backups performed and tested?",
      "impact": "Backups are critical for business continuity",
      "category": "Data Protection",
      "findingTemplate": {
        "title": "Insufficient backup procedures",
        "description": "Backup processes are not adequate or tested",
        "severity": "high",
        "recommendation": "Implement comprehensive backup strategy with regular testing",
        "category": "Data Protection"
      }
    },
    {
      "id": 7,
      "text": "Is sensitive data encrypted at rest and in transit?",
      "impact": "Encryption protects data from unauthorized access",
      "category": "Data Protection",
      "findingTemplate": {
        "title": "Inadequate data encryption",
        "description": "Sensitive data is not properly encrypted",
        "severity": "high",
        "recommendation": "Implement encryption for data at rest and in transit",
        "category": "Data Protection"
      }
    },
    {
      "id": 8,
      "text": "Is patch management performed regularly?",
      "impact": "Regular patching prevents exploitation of known vulnerabilities",
      "category": "System Security",
      "findingTemplate": {
        "title": "Inadequate patch management",
        "description": "Systems are not patched regularly",
        "severity": "high",
        "recommendation": "Implement regular patch management process",
        "category": "System Security"
      }
    }
  ]
}

================
File: data/client_data/client_users.json
================
{
  "roles": [
    {
      "id": "PROGRAM_MANAGER",
      "name": "PROGRAM_MANAGER"
    },
    {
      "id": "ISSM",
      "name": "ISSM"
    },
    {
      "id": "ISSO",
      "name": "ISSO"
    },
    {
      "id": "ISSE",
      "name": "ISSE"
    },
    {
      "id": "SYSTEM_ADMIN",
      "name": "SYSTEM_ADMIN"
    }
  ],
  "rolePermissions": [
    {
      "id": "PROGRAM_MANAGER",
      "permissions": ["manage_users", "manage_systems", "view_audits", "manage_strategy"]
    },
    {
      "id": "ISSM",
      "permissions": ["manage_users", "manage_systems", "manage_audits", "manage_strategy"]
    },
    {
      "id": "ISSO",
      "permissions": ["view_users", "manage_systems", "manage_audits"]
    },
    {
      "id": "ISSE",
      "permissions": ["view_users", "view_systems", "view_audits"]
    },
    {
      "id": "SYSTEM_ADMIN",
      "permissions": ["all"]
    }
  ],
  "permissions": [
    {
      "id": "manage_users",
      "name": "manage_users"
    },
    {
      "id": "view_users",
      "name": "view_users"
    },
    {
      "id": "manage_systems",
      "name": "manage_systems"
    },
    {
      "id": "view_systems",
      "name": "view_systems"
    },
    {
      "id": "manage_audits",
      "name": "manage_audits"
    },
    {
      "id": "view_audits",
      "name": "view_audits"
    },
    {
      "id": "manage_strategy",
      "name": "manage_strategy"
    },
    {
      "id": "all",
      "name": "all"
    }
  ],
  "users": [
    {
      "id": 1,
      "username": "john.smith",
      "email": "john.smith@acme.com",
      "role": "PROGRAM_MANAGER",
      "clientId": 1,
      "firstName": "John",
      "lastName": "Smith",
      "title": "Program Manager",
      "department": "Security",
      "phone": "(555) 123-4567",
      "isActive": true,
      "lastActive": "2024-02-19T10:00:00Z",
      "permissions": ["manage_users", "manage_systems", "view_audits", "manage_strategy"]
    },
    {
      "id": 2,
      "username": "sarah.johnson",
      "email": "sarah.johnson@acme.com",
      "role": "ISSM",
      "clientId": 1,
      "firstName": "Sarah",
      "lastName": "Johnson",
      "title": "Information System Security Manager",
      "department": "Security",
      "phone": "(555) 234-5678",
      "isActive": true,
      "lastActive": "2024-02-19T09:00:00Z",
      "permissions": ["manage_users", "manage_systems", "manage_audits", "manage_strategy"]
    },
    {
      "id": 3,
      "username": "mike.wilson",
      "email": "mike.wilson@acme.com",
      "role": "ISSO",
      "clientId": 1,
      "firstName": "Mike",
      "lastName": "Wilson",
      "title": "Information System Security Officer",
      "department": "IT",
      "phone": "(555) 345-6789",
      "isActive": true,
      "lastActive": "2024-02-19T08:00:00Z",
      "permissions": ["view_users", "manage_systems", "manage_audits"]
    },
    {
      "id": 4,
      "username": "alice.brown",
      "email": "alice.brown@healthcareplus.com",
      "role": "PROGRAM_MANAGER",
      "clientId": 2,
      "firstName": "Alice",
      "lastName": "Brown",
      "title": "Security Program Manager",
      "department": "Security",
      "phone": "(555) 456-7890",
      "isActive": true,
      "lastActive": "2024-02-19T11:00:00Z",
      "permissions": ["manage_users", "manage_systems", "view_audits", "manage_strategy"]
    },
    {
      "id": 5,
      "username": "admin",
      "email": "admin@grc.com",
      "role": "SYSTEM_ADMIN",
      "clientId": null,
      "firstName": "System",
      "lastName": "Administrator",
      "title": "System Administrator",
      "department": "IT",
      "phone": "(555) 999-9999",
      "isActive": true,
      "lastActive": "2024-02-19T12:00:00Z",
      "permissions": ["all"]
    }
  ],
  "departments": [
    {
      "id": "Security",
      "name": "Security"
    },
    {
      "id": "IT",
      "name": "IT"
    },
    {
      "id": "Compliance",
      "name": "Compliance"
    },
    {
      "id": "Risk Management",
      "name": "Risk Management"
    },
    {
      "id": "Operations",
      "name": "Operations"
    },
    {
      "id": "Executive",
      "name": "Executive"
    }
  ],
  "titles": [
    {
      "id": "Program Manager",
      "name": "Program Manager"
    },
    {
      "id": "Information System Security Manager",
      "name": "Information System Security Manager"
    },
    {
      "id": "Information System Security Officer",
      "name": "Information System Security Officer"
    },
    {
      "id": "Security Engineer",
      "name": "Security Engineer"
    },
    {
      "id": "System Administrator",
      "name": "System Administrator"
    },
    {
      "id": "Security Analyst",
      "name": "Security Analyst"
    },
    {
      "id": "Compliance Officer",
      "name": "Compliance Officer"
    },
    {
      "id": "Risk Manager",
      "name": "Risk Manager"
    }
  ],
  "userStatus": [
    {
      "id": "active",
      "name": "active"
    },
    {
      "id": "inactive",
      "name": "inactive"
    },
    {
      "id": "suspended",
      "name": "suspended"
    },
    {
      "id": "pending",
      "name": "pending"
    }
  ]
}

================
File: data/client_data/clients.json
================
{
  "clients": [
    {
      "id": 1,
      "name": "Acme Corporation",
      "industry": "Technology",
      "email": "contact@acme.com",
      "phone": "(555) 123-4567",
      "primaryContact": "John Smith",
      "createdAt": "2024-01-01T10:00:00Z",
      "lastActivity": "2024-02-19T10:00:00Z",
      "complianceScore": 85,
      "status": "active",
      "address": {
        "street": "123 Tech Lane",
        "city": "San Francisco",
        "state": "CA",
        "zip": "94105",
        "country": "USA"
      },
      "size": "Enterprise",
      "employeeCount": 5000,
      "website": "www.acme.com"
    }
  ]
}

================
File: data/client_data/departments.json
================
{
  "departments": [
    {
      "id": 1,
      "clientId": 1,
      "name": "Information Technology",
      "head": "David Wilson",
      "headTitle": "CTO",
      "employeeCount": 150,
      "positions": [
        { "id": 1, "name": "Software Engineer" },
        { "id": 2, "name": "System Administrator" },
        { "id": 3, "name": "Security Analyst" }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    },
    {
      "id": 2,
      "clientId": 1,
      "name": "Security Operations",
      "head": "Alice Brown",
      "headTitle": "CISO",
      "employeeCount": 50,
      "positions": [
        { "id": 1, "name": "Security Engineer" },
        { "id": 2, "name": "Incident Responder" },
        { "id": 3, "name": "Security Analyst" }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    },
    {
      "id": 3,
      "clientId": 1,
      "name": "Risk & Compliance",
      "head": "Michael Chen",
      "headTitle": "Risk Director",
      "employeeCount": 35,
      "positions": [
        { "id": 1, "name": "Risk Analyst" },
        { "id": 2, "name": "Compliance Officer" },
        { "id": 3, "name": "Auditor" }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    },
    {
      "id": 4,
      "clientId": 1,
      "name": "Network Operations",
      "head": "Sarah Johnson",
      "headTitle": "Network Director",
      "employeeCount": 45,
      "positions": [
        { "id": 1, "name": "Network Engineer" },
        { "id": 2, "name": "Infrastructure Specialist" },
        { "id": 3, "name": "Cloud Architect" }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    }
  ]
}

================
File: data/client_data/documents.json
================
{
  "assessmentDocuments": [
    {
      "id": "doc-001",
      "name": "System Security Plan",
      "expirationDate": "2026-02-20",
      "lastReviewed": "2025-02-15",
      "validationNotes": "Annual review completed. Updates required for new controls.",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2025-02-15",
          "notes": "Annual review completed. Updates required for new controls."
        },
        {
          "id": 2,
          "date": "2024-02-15",
          "notes": "Initial review completed."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-02-15T00:00:00Z",
      "updatedAt": "2025-02-15T00:00:00Z"
    },
    {
      "id": "doc-002",
      "name": "Incident Response Plan",
      "expirationDate": "2025-03-15",
      "lastReviewed": "2024-03-15",
      "validationNotes": "Review needed before expiration",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2024-03-15",
          "notes": "Annual review completed. No major changes required."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-03-15T00:00:00Z",
      "updatedAt": "2024-03-15T00:00:00Z"
    },
    {
      "id": "doc-003",
      "name": "Contingency Plan",
      "expirationDate": "2025-01-10",
      "lastReviewed": "2024-01-10",
      "validationNotes": "Document expired. Immediate review required.",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2024-01-10",
          "notes": "Annual review completed. Updated recovery procedures."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-01-10T00:00:00Z",
      "updatedAt": "2024-01-10T00:00:00Z"
    },
    {
      "id": "doc-004",
      "name": "Configuration Management Plan",
      "expirationDate": "2025-06-30",
      "lastReviewed": "2024-06-30",
      "validationNotes": "Current and valid",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2024-06-30",
          "notes": "Updated to include new system components."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-06-30T00:00:00Z",
      "updatedAt": "2024-06-30T00:00:00Z"
    }
  ]
}

================
File: data/client_data/findings_to_risk.json
================
{
  "risks": [
    {
      "id": "risk-001",
      "clientId": 1,
      "name": "Unauthorized Access to Sensitive Data",
      "description": "There is a risk of unauthorized access to sensitive customer data due to weak access controls.",
      "impact": "high",
      "likelihood": "medium",
      "category": "Access Control",
      "status": "open",
      "lastAssessed": "2024-12-15T10:30:00Z",
      "sourceFindings": [
        {
          "findingId": "f-001",
          "title": "Weak Password Policy",
          "sourceType": "security_assessment",
          "date": "2024-12-15T10:30:00Z"
        }
      ],
      "businessImpact": {
        "financial": "High potential for fines and legal costs",
        "operational": "Moderate disruption to operations",
        "reputational": "Severe damage to customer trust",
        "compliance": "Violation of data protection regulations"
      },
      "treatment": {
        "approach": "mitigate",
        "plan": "Implement stronger password policies and multi-factor authentication",
        "status": "in_progress",
        "objectives": ["obj-001"]
      }
    },
    {
      "id": "risk-002",
      "clientId": 1,
      "name": "Outdated Software Vulnerabilities",
      "description": "Critical systems are running outdated software with known security vulnerabilities.",
      "impact": "high",
      "likelihood": "high",
      "category": "Vulnerability Management",
      "status": "open",
      "lastAssessed": "2024-12-16T14:45:00Z",
      "sourceFindings": [
        {
          "findingId": "f-002",
          "title": "Outdated Operating Systems",
          "sourceType": "security_assessment",
          "date": "2024-12-16T14:45:00Z"
        }
      ],
      "businessImpact": {
        "financial": "Potential for significant recovery costs",
        "operational": "High risk of service disruption",
        "reputational": "Moderate impact on reputation",
        "compliance": "Potential compliance issues"
      },
      "treatment": {
        "approach": "mitigate",
        "plan": "Implement a regular patching schedule and software upgrade policy",
        "status": "not_started",
        "objectives": ["obj-002"]
      }
    },
    {
      "id": "risk-003",
      "clientId": 1,
      "name": "Insufficient Backup Procedures",
      "description": "Current backup procedures do not adequately protect against data loss in case of a disaster.",
      "impact": "medium",
      "likelihood": "medium",
      "category": "Business Continuity",
      "status": "open",
      "lastAssessed": "2024-12-18T09:15:00Z",
      "sourceFindings": [
        {
          "findingId": "f-003",
          "title": "Inadequate Backup Testing",
          "sourceType": "security_assessment",
          "date": "2024-12-18T09:15:00Z"
        }
      ],
      "businessImpact": {
        "financial": "Moderate recovery costs",
        "operational": "Severe operational disruption possible",
        "reputational": "Minor reputational impact",
        "compliance": "Potential regulatory issues"
      },
      "treatment": {
        "approach": "mitigate",
        "plan": "Implement automated daily backups with regular testing",
        "status": "in_progress",
        "objectives": ["obj-003"]
      }
    }
  ]
}

================
File: data/client_data/incident_reference_data.json
================
{
  "incidentTypes": [
    "security",
    "availability",
    "performance",
    "data_breach",
    "unauthorized_access",
    "malware",
    "phishing",
    "dos",
    "hardware_failure",
    "software_failure",
    "human_error",
    "other"
  ],
  "incidentSeverities": [
    "critical",
    "high",
    "medium",
    "low"
  ],
  "incidentStatuses": [
    "active",
    "investigating",
    "resolved",
    "closed"
  ],
  "incidentPriorities": [
    "critical",
    "high",
    "medium",
    "low"
  ],
  "actionTypes": [
    "investigation",
    "containment",
    "eradication",
    "recovery",
    "communication",
    "documentation",
    "other"
  ],
  "teams": [
    "Security Operations",
    "Network Operations",
    "System Administration",
    "Development",
    "Management",
    "Legal",
    "PR",
    "HR",
    "Other"
  ],
  "systemTypes": [
    "Web Application",
    "Database",
    "Network Infrastructure",
    "Cloud Service",
    "Desktop Application",
    "Mobile Application",
    "IoT Device",
    "Server",
    "Other"
  ]
}

================
File: data/client_data/incidents/enums.json
================
{
  "incidentTypes": [
    { "id": 1, "name": "security" },
    { "id": 2, "name": "system" },
    { "id": 3, "name": "network" },
    { "id": 4, "name": "application" },
    { "id": 5, "name": "hardware" },
    { "id": 6, "name": "software" },
    { "id": 7, "name": "data" },
    { "id": 8, "name": "user" },
    { "id": 9, "name": "other" }
  ],
  "incidentSeverities": [
    { "id": 1, "name": "critical" },
    { "id": 2, "name": "high" },
    { "id": 3, "name": "medium" },
    { "id": 4, "name": "low" }
  ],
  "incidentStatuses": [
    { "id": 1, "name": "active" },
    { "id": 2, "name": "investigating" },
    { "id": 3, "name": "mitigated" },
    { "id": 4, "name": "resolved" },
    { "id": 5, "name": "closed" }
  ],
  "incidentPriorities": [
    { "id": 1, "name": "critical" },
    { "id": 2, "name": "high" },
    { "id": 3, "name": "medium" },
    { "id": 4, "name": "low" }
  ],
  "actionTypes": [
    { "id": 1, "name": "detection" },
    { "id": 2, "name": "investigation" },
    { "id": 3, "name": "mitigation" },
    { "id": 4, "name": "resolution" },
    { "id": 5, "name": "communication" },
    { "id": 6, "name": "escalation" }
  ],
  "teams": [
    { "id": 1, "name": "Information Technology" },
    { "id": 2, "name": "Security Operations" },
    { "id": 3, "name": "Risk & Compliance" },
    { "id": 4, "name": "Network Operations" }
  ],
  "systemTypes": [
    { "id": 1, "name": "Web Server" },
    { "id": 2, "name": "Database Server" },
    { "id": 3, "name": "Authentication Server" },
    { "id": 4, "name": "Network Infrastructure" },
    { "id": 5, "name": "Storage System" },
    { "id": 6, "name": "Backup System" },
    { "id": 7, "name": "End User Systems" },
    { "id": 8, "name": "Security Systems" },
    { "id": 9, "name": "Cloud Services" }
  ]
}

================
File: data/client_data/incidents/incidents.json
================
{
  "incidents": [
    {
      "id": 1,
      "clientId": 1,
      "title": "Unauthorized Access Attempt",
      "type": "security",
      "severity": "high",
      "status": "active", 
      "priority": "high",
      "createdAt": "2024-02-19T08:00:00Z",
      "updatedAt": "2024-02-19T10:30:00Z",
      "resolvedAt": null,
      "assignedTo": "Security Operations",
      "description": "Multiple failed login attempts detected from suspicious IP addresses",
      "affectedSystems": ["Authentication Server", "User Database"],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-19T08:00:00Z",
          "description": "IDS detected multiple failed login attempts",
          "performedBy": "Security Operations"
        },
        {
          "id": 2,
          "type": "mitigation",
          "timestamp": "2024-02-19T08:15:00Z",
          "description": "IP addresses temporarily blocked",
          "performedBy": "Alice Brown"
        },
        {
          "id": 3,
          "type": "investigation",
          "timestamp": "2024-02-19T10:30:00Z",
          "description": "Analysis of login attempt patterns",
          "performedBy": "Security Operations"
        }
      ]
    },
    {
      "id": 2,
      "clientId": 1,
      "title": "Data Backup Failure",
      "type": "system",
      "severity": "medium",
      "status": "resolved",
      "priority": "medium",
      "createdAt": "2024-02-18T15:00:00Z",
      "updatedAt": "2024-02-18T17:45:00Z",
      "resolvedAt": "2024-02-18T17:45:00Z",
      "assignedTo": "Information Technology",
      "description": "Scheduled backup job failed due to storage capacity issues",
      "affectedSystems": ["Backup System", "Storage System"],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-18T15:00:00Z",
          "description": "Backup job failure alert received",
          "performedBy": "Information Technology"
        },
        {
          "id": 2,
          "type": "investigation",
          "timestamp": "2024-02-18T15:30:00Z",
          "description": "Storage capacity analysis performed",
          "performedBy": "David Wilson"
        },
        {
          "id": 3,
          "type": "resolution",
          "timestamp": "2024-02-18T17:45:00Z",
          "description": "Additional storage allocated and backup job rerun successfully",
          "performedBy": "Information Technology"
        }
      ]
    },
    {
      "id": 3,
      "clientId": 1,
      "title": "SSL Certificate Expiration",
      "type": "security",
      "severity": "medium",
      "status": "active",
      "priority": "high",
      "createdAt": "2024-02-19T09:00:00Z",
      "updatedAt": "2024-02-19T09:30:00Z",
      "resolvedAt": null,
      "assignedTo": "Security Operations",
      "description": "SSL certificate for main website approaching expiration",
      "affectedSystems": ["Web Server"],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-19T09:00:00Z",
          "description": "Certificate expiration alert received",
          "performedBy": "Security Operations"
        },
        {
          "id": 2,
          "type": "mitigation",
          "timestamp": "2024-02-19T09:30:00Z",
          "description": "Certificate renewal process initiated",
          "performedBy": "Alice Brown"
        }
      ]
    },
    {
      "id": 4,
      "clientId": 1,
      "title": "Network Performance Degradation",
      "type": "network",
      "severity": "high",
      "status": "investigating",
      "priority": "high",
      "createdAt": "2024-02-19T11:00:00Z",
      "updatedAt": "2024-02-19T11:45:00Z",
      "resolvedAt": null,
      "assignedTo": "Network Operations",
      "description": "Users reporting slow network performance and intermittent connectivity issues",
      "affectedSystems": ["Network Infrastructure", "Cloud Services"],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-19T11:00:00Z",
          "description": "Multiple user reports of slow network performance",
          "performedBy": "Information Technology"
        },
        {
          "id": 2,
          "type": "investigation",
          "timestamp": "2024-02-19T11:45:00Z",
          "description": "Network monitoring analysis initiated",
          "performedBy": "Sarah Johnson"
        }
      ]
    }
  ]
}

================
File: data/client_data/key_personnel.json
================
{
  "keyPersonnel": [
    {
      "id": 1,
      "clientId": 1,
      "departmentId": null,
      "name": "John Smith",
      "role": "Primary Contact",
      "department": "Executive",
      "title": "CEO"
    },
    {
      "id": 2,
      "clientId": 1,
      "departmentId": 1,
      "name": "David Wilson",
      "role": "Technology Lead",
      "department": "Information Technology",
      "title": "CTO"
    },
    {
      "id": 3,
      "clientId": 1,
      "departmentId": 2,
      "name": "Alice Brown",
      "role": "Security Lead",
      "department": "Security Operations",
      "title": "CISO"
    },
    {
      "id": 4,
      "clientId": 1,
      "departmentId": 3,
      "name": "Michael Chen",
      "role": "Risk Lead",
      "department": "Risk & Compliance",
      "title": "Risk Director"
    },
    {
      "id": 5,
      "clientId": 1,
      "departmentId": 4,
      "name": "Sarah Johnson",
      "role": "Infrastructure Lead",
      "department": "Network Operations",
      "title": "Network Director"
    }
  ]
}

================
File: data/client_data/objective_to_initiative.json
================
{
  "objectiveInitiatives": [
    {
      "id": "oi-001",
      "objectiveId": "obj-001",
      "initiativeId": "init-001",
      "dateLinked": "2025-01-18T11:20:00Z"
    },
    {
      "id": "oi-002",
      "objectiveId": "obj-002",
      "initiativeId": "init-002",
      "dateLinked": "2025-01-25T15:30:00Z"
    },
    {
      "id": "oi-003",
      "objectiveId": "obj-003",
      "initiativeId": "init-003",
      "dateLinked": "2025-02-10T10:45:00Z"
    }
  ]
}

================
File: data/client_data/reference_data.json
================
{
  "industries": [
    { "id": 1, "name": "Technology" },
    { "id": 2, "name": "Healthcare" },
    { "id": 3, "name": "Financial Services" },
    { "id": 4, "name": "Manufacturing" },
    { "id": 5, "name": "Retail" },
    { "id": 6, "name": "Energy" },
    { "id": 7, "name": "Education" },
    { "id": 8, "name": "Government" },
    { "id": 9, "name": "Non-Profit" }
  ],
  "clientSizes": [
    { "id": 1, "name": "Small" },
    { "id": 2, "name": "Medium" },
    { "id": 3, "name": "Large" },
    { "id": 4, "name": "Enterprise" }
  ],
  "clientStatuses": [
    { "id": 1, "name": "active" },
    { "id": 2, "name": "inactive" },
    { "id": 3, "name": "suspended" },
    { "id": 4, "name": "pending" }
  ],
  "documentCategories": [
    { "id": 1, "name": "Policies" },
    { "id": 2, "name": "Procedures" },
    { "id": 3, "name": "Compliance" },
    { "id": 4, "name": "Reports" },
    { "id": 5, "name": "Training" },
    { "id": 6, "name": "Documentation" },
    { "id": 7, "name": "General" }
  ],
  "documentTypes": [
    { "id": 1, "name": "PDF" },
    { "id": 2, "name": "DOCX" },
    { "id": 3, "name": "XLSX" },
    { "id": 4, "name": "PPT" },
    { "id": 5, "name": "TXT" },
    { "id": 6, "name": "ZIP" }
  ]
}

================
File: data/client_data/risk_to_objective.json
================
{
  "riskObjectives": [
    {
      "id": "ro-001",
      "riskId": "risk-001",
      "objectiveId": "obj-001",
      "dateLinked": "2025-01-15T10:30:00Z"
    },
    {
      "id": "ro-002",
      "riskId": "risk-002",
      "objectiveId": "obj-002",
      "dateLinked": "2025-01-20T14:45:00Z"
    },
    {
      "id": "ro-003",
      "riskId": "risk-003",
      "objectiveId": "obj-003",
      "dateLinked": "2025-02-05T09:15:00Z"
    }
  ]
}

================
File: data/client_data/scan_results.json
================
{
  "scanResults": [
    {
      "id": "scan-001",
      "type": "STIG Scan",
      "date": "2025-02-15T10:00:00Z",
      "findings": {
        "high": 2,
        "medium": 5,
        "low": 8
      },
      "status": "Completed",
      "downloadUrl": "#",
      "detailsUrl": "#",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-15T10:00:00Z",
      "updatedAt": "2025-02-15T10:00:00Z"
    },
    {
      "id": "scan-002",
      "type": "SCAP Scan",
      "date": "2025-02-01T14:30:00Z",
      "findings": {
        "high": 1,
        "medium": 3,
        "low": 6
      },
      "status": "Completed",
      "downloadUrl": "#",
      "detailsUrl": "#",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-01T14:30:00Z",
      "updatedAt": "2025-02-01T14:30:00Z"
    }
  ]
}

================
File: data/client_data/securityInitiatives.json
================
{
  "securityInitiatives": [
    {
      "id": "init-001",
      "clientId": 1,
      "name": "MFA Implementation Project",
      "description": "Project to implement multi-factor authentication across all systems",
      "phase": "Implementation",
      "timeline": "Q2 2025",
      "status": "In Progress",
      "objectiveId": "obj-001",
      "milestones": [
        {
          "id": "ms-001",
          "name": "MFA Solution Selection",
          "completed": true,
          "dueDate": "2025-04-15T00:00:00Z"
        },
        {
          "id": "ms-002",
          "name": "Admin Account MFA Implementation",
          "completed": true,
          "dueDate": "2025-05-15T00:00:00Z"
        },
        {
          "id": "ms-003",
          "name": "User Account MFA Implementation",
          "completed": false,
          "dueDate": "2025-06-15T00:00:00Z"
        }
      ],
      "resources": {
        "team": ["Security Team", "IT Operations"],
        "budget": "$50,000",
        "tools": ["Okta", "Microsoft Authenticator"]
      }
    },
    {
      "id": "init-002",
      "clientId": 1,
      "name": "Vulnerability Management Implementation",
      "description": "Establish vulnerability scanning and patch management processes",
      "phase": "Design",
      "timeline": "Q3 2025",
      "status": "Planning",
      "objectiveId": "obj-002",
      "milestones": [
        {
          "id": "ms-004",
          "name": "Vulnerability Scanner Selection",
          "completed": true,
          "dueDate": "2025-05-30T00:00:00Z"
        },
        {
          "id": "ms-005",
          "name": "Initial Vulnerability Assessment",
          "completed": false,
          "dueDate": "2025-07-15T00:00:00Z"
        },
        {
          "id": "ms-006",
          "name": "Patch Management Process Definition",
          "completed": false,
          "dueDate": "2025-08-01T00:00:00Z"
        }
      ],
      "resources": {
        "team": ["Security Team", "IT Operations"],
        "budget": "$75,000",
        "tools": ["Tenable", "Microsoft SCCM"]
      }
    },
    {
      "id": "init-003",
      "clientId": 1,
      "name": "Backup and Recovery Enhancement",
      "description": "Improve backup procedures and implement disaster recovery testing",
      "phase": "Implementation",
      "timeline": "Q3 2025",
      "status": "In Progress",
      "objectiveId": "obj-003",
      "milestones": [
        {
          "id": "ms-007",
          "name": "Backup Solution Upgrade",
          "completed": true,
          "dueDate": "2025-05-01T00:00:00Z"
        },
        {
          "id": "ms-008",
          "name": "Automated Backup Implementation",
          "completed": true,
          "dueDate": "2025-06-01T00:00:00Z"
        },
        {
          "id": "ms-009",
          "name": "Recovery Testing Procedure Development",
          "completed": false,
          "dueDate": "2025-07-15T00:00:00Z"
        }
      ],
      "resources": {
        "team": ["IT Operations", "Disaster Recovery Team"],
        "budget": "$60,000",
        "tools": ["Veeam", "AWS S3"]
      }
    }
  ]
}

================
File: data/client_data/securityObjectives.json
================
{
  "securityObjectives": [
    {
      "id": "obj-001",
      "clientId": 1,
      "name": "Implement Multi-Factor Authentication",
      "description": "Implement MFA across all critical systems to enhance access security",
      "priority": "High",
      "status": "In Progress",
      "progress": 60,
      "dueDate": "2025-06-30T00:00:00Z",
      "metrics": {
        "successCriteria": [
          "MFA enabled for all admin accounts",
          "MFA enabled for all user accounts",
          "MFA compliance monitoring implemented"
        ],
        "currentMetrics": [
          "Admin accounts secured with MFA"
        ]
      }
    },
    {
      "id": "obj-002",
      "clientId": 1,
      "name": "Vulnerability Management Program",
      "description": "Establish a comprehensive vulnerability management program",
      "priority": "High",
      "status": "Planning",
      "progress": 20,
      "dueDate": "2025-08-15T00:00:00Z",
      "metrics": {
        "successCriteria": [
          "Regular vulnerability scanning implemented",
          "Patch management process established",
          "Vulnerability remediation SLAs defined"
        ],
        "currentMetrics": []
      }
    },
    {
      "id": "obj-003",
      "clientId": 1,
      "name": "Data Backup and Recovery",
      "description": "Improve data backup procedures and implement disaster recovery testing",
      "priority": "Medium",
      "status": "In Progress",
      "progress": 40,
      "dueDate": "2025-07-20T00:00:00Z",
      "metrics": {
        "successCriteria": [
          "Automated daily backups implemented",
          "Quarterly recovery testing established",
          "Offsite backup storage configured"
        ],
        "currentMetrics": [
          "Automated daily backups implemented"
        ]
      }
    }
  ]
}

================
File: data/system/artifacts/artifacts.json
================
[
  {
    "id": "art-001",
    "name": "System Architecture Diagram",
    "type": "Technical Documentation",
    "uploadDate": "2024-02-21T08:00:00Z",
    "description": "Detailed system architecture diagram showing all components and their interactions",
    "fileUrl": "/artifacts/system-architecture.pdf",
    "fileType": "application/pdf",
    "size": 2457600,
    "uploadedBy": "John Smith"
  },
  {
    "id": "art-002",
    "name": "Security Policy Document",
    "type": "Policy Documentation",
    "uploadDate": "2024-02-20T15:30:00Z",
    "description": "Organization's security policies and procedures",
    "fileUrl": "/artifacts/security-policy-v1.docx",
    "fileType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "size": 1048576,
    "uploadedBy": "Sarah Johnson"
  },
  {
    "id": "art-003",
    "name": "Vulnerability Scan Results",
    "type": "Security Assessment",
    "uploadDate": "2024-02-19T11:15:00Z",
    "description": "Latest vulnerability scan results from Nessus",
    "fileUrl": "/artifacts/vuln-scan-feb2024.pdf",
    "fileType": "application/pdf",
    "size": 3145728,
    "uploadedBy": "Mike Wilson"
  },
  {
    "id": "art-004",
    "name": "Network Diagram",
    "type": "Technical Documentation",
    "uploadDate": "2024-02-18T09:45:00Z",
    "description": "Current network topology and configuration",
    "fileUrl": "/artifacts/network-diagram.png",
    "fileType": "image/png",
    "size": 512000,
    "uploadedBy": "John Smith"
  },
  {
    "id": "art-005",
    "name": "Security Control Implementation",
    "type": "Implementation Evidence",
    "uploadDate": "2024-02-17T14:20:00Z",
    "description": "Screenshots and configuration files showing security control implementation",
    "fileUrl": "/artifacts/control-implementation.zip",
    "fileType": "application/zip",
    "size": 5242880,
    "uploadedBy": "Sarah Johnson"
  }
]

================
File: data/system/artifacts/enums.json
================
{
  "artifactTypes": [
    {
      "id": "type-1",
      "name": "Technical Documentation"
    },
    {
      "id": "type-2",
      "name": "Policy Documentation"
    },
    {
      "id": "type-3",
      "name": "Security Assessment"
    },
    {
      "id": "type-4",
      "name": "Implementation Evidence"
    },
    {
      "id": "type-5",
      "name": "Training Records"
    },
    {
      "id": "type-6",
      "name": "Audit Reports"
    },
    {
      "id": "type-7",
      "name": "Configuration Files"
    },
    {
      "id": "type-8",
      "name": "System Logs"
    },
    {
      "id": "type-9",
      "name": "Incident Reports"
    },
    {
      "id": "type-10",
      "name": "Other"
    }
  ]
}

================
File: data/system/ato_tracker.json
================
{
  "sys-001": {
    "phases": [
      {
        "id": 1,
        "title": "Initial Assessment",
        "description": "System discovery and initial evaluation",
        "progress": 65,
        "sections": [
          {
            "title": "System Discovery",
            "tasks": [
              {
                "description": "Conduct initial system inventory",
                "completed": true
              },
              {
                "description": "Document system purpose and functions",
                "completed": true
              },
              {
                "description": "Identify system components and boundaries",
                "completed": false
              },
              {
                "description": "Map data flows and interconnections",
                "completed": false
              },
              {
                "description": "Review existing security documentation",
                "completed": true
              }
            ]
          },
          {
            "title": "Gap Analysis",
            "tasks": [
              {
                "description": "Compare current state against required controls",
                "completed": true
              },
              {
                "description": "Document existing security measures",
                "completed": false
              },
              {
                "description": "Identify missing controls and documentation",
                "completed": false
              },
              {
                "description": "Assess current security practices",
                "completed": true
              },
              {
                "description": "Review existing policies and procedures",
                "completed": true
              }
            ]
          },
          {
            "title": "Environment Analysis",
            "tasks": [
              {
                "description": "Evaluate hosting environment (Cloud/On-Prem/Hybrid)",
                "completed": true
              },
              {
                "description": "Document infrastructure components",
                "completed": true
              },
              {
                "description": "Review network architecture",
                "completed": false
              },
              {
                "description": "Assess system dependencies",
                "completed": true
              },
              {
                "description": "Identify critical system interfaces",
                "completed": false
              }
            ]
          },
          {
            "title": "Stakeholder Analysis",
            "tasks": [
              {
                "description": "Identify key system stakeholders",
                "completed": true
              },
              {
                "description": "Document system owners and operators",
                "completed": true
              },
              {
                "description": "Map security responsibilities",
                "completed": false
              },
              {
                "description": "Establish points of contact",
                "completed": true
              },
              {
                "description": "Define communication channels",
                "completed": false
              }
            ]
          }
        ]
      }
    ]
  }
}

================
File: data/system/authorization.json
================
{
  "client-1": {
    "sys-001": {
      "riskAssessment": {
        "risks": [
          {
            "id": "RISK-001",
            "description": "Insufficient access controls",
            "likelihood": "high",
            "impact": "high",
            "status": "open"
          }
        ],
        "nonCompliantControls": [
          {
            "controlId": "AC-2",
            "title": "Account Management",
            "status": "non-compliant",
            "findings": "Missing automated account management procedures"
          }
        ]
      },
      "package": {
        "completed": ["System Security Plan", "Risk Assessment Report"],
        "pending": ["Privacy Impact Assessment", "Contingency Plan"],
        "executiveSummary": "System implements moderate security controls with some gaps identified.",
        "status": "in-progress",
        "validationStatus": "pending",
        "completionPercentage": 65
      },
      "decision": {
        "result": "pending",
        "official": "",
        "date": "",
        "expirationDate": "",
        "justification": "",
        "conditions": [],
        "boundary": "System includes all components within the development network segment."
      }
    }
  }
}

================
File: data/system/categorization.json
================
{
  "sys-001": {
    "informationTypes": {
      "types": [],
      "customTypes": "",
      "sensitivity": "",
      "regulations": [],
      "ownership": "",
      "dataFlows": "",
      "dataLifecycle": "",
      "privacyRequirements": ""
    },
    "impactAnalysis": {
      "confidentiality": "",
      "integrity": "",
      "availability": "",
      "rationale": "",
      "categorization": ""
    },
    "securityObjectives": {
      "objectives": [],
      "requirements": [],
      "criticalFunctions": [],
      "businessImpact": "",
      "priorities": []
    },
    "progress": {
      "progress": 30,
      "sections": {
        "informationTypes": "not_started",
        "impactAnalysis": "not_started",
        "securityObjectives": "not_started"
      }
    }
  }
}

================
File: data/system/components/components.json
================
[
  {
    "id": "1",
    "type": "PHYSICAL",
    "name": "Primary Database Server",
    "description": "Main database server hosting customer data",
    "specifications": {
      "manufacturer": "Dell",
      "model": "PowerEdge R740",
      "cpu": "Intel Xeon Gold 6248R",
      "ram": "384GB",
      "storage": "4TB SSD RAID-10"
    },
    "status": "ACTIVE",
    "lastUpdated": "2024-02-19T10:00:00Z"
  },
  {
    "id": "2",
    "type": "VIRTUAL",
    "name": "Web Application Server",
    "description": "Primary web application server",
    "specifications": {
      "os": "Ubuntu 22.04 LTS",
      "vcpus": 8,
      "ram": "32GB",
      "storage": "500GB"
    },
    "status": "ACTIVE",
    "lastUpdated": "2024-02-19T10:00:00Z"
  },
  {
    "id": "3",
    "type": "NETWORK",
    "name": "Core Switch",
    "description": "Primary network switch for data center",
    "specifications": {
      "manufacturer": "Cisco",
      "model": "Catalyst 9300",
      "ports": "48x 10GbE",
      "throughput": "960 Gbps"
    },
    "status": "ACTIVE",
    "lastUpdated": "2024-02-19T10:00:00Z"
  }
]

================
File: data/system/components/enums.json
================
{
  "componentTypes": [
    {
      "id": "type-1",
      "name": "PHYSICAL"
    },
    {
      "id": "type-2",
      "name": "VIRTUAL"
    },
    {
      "id": "type-3",
      "name": "NETWORK"
    },
    {
      "id": "type-4",
      "name": "SECURITY_APPLIANCE"
    }
  ],
  "componentStatuses": [
    {
      "id": "status-1",
      "name": "ACTIVE"
    },
    {
      "id": "status-2",
      "name": "INACTIVE"
    },
    {
      "id": "status-3",
      "name": "MAINTENANCE"
    },
    {
      "id": "status-4",
      "name": "DECOMMISSIONED"
    }
  ]
}

================
File: data/system/controls.json
================
{
  "controls": [
    {
      "id": "AC-1",
      "title": "Access Control Policy and Procedures",
      "status": "Compliant",
      "evidence": "Access Control Policy v2.1 implemented and reviewed",
      "notes": "Annual review completed",
      "lastUpdated": "2025-02-10T09:00:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-10T09:00:00Z",
      "updatedAt": "2025-02-10T09:00:00Z"
    },
    {
      "id": "AC-2",
      "title": "Account Management",
      "status": "Non-Compliant",
      "evidence": "Automated account review process not implemented",
      "notes": "Implementation in progress",
      "lastUpdated": "2025-02-11T15:30:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-11T15:30:00Z",
      "updatedAt": "2025-02-11T15:30:00Z"
    },
    {
      "id": "AC-3",
      "title": "Access Enforcement",
      "status": "Compliant",
      "evidence": "Role-based access control implemented",
      "notes": "Verified during testing",
      "lastUpdated": "2025-02-12T11:20:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-12T11:20:00Z",
      "updatedAt": "2025-02-12T11:20:00Z"
    },
    {
      "id": "AC-4",
      "title": "Information Flow Enforcement",
      "status": "Not-Applicable",
      "evidence": "System does not process classified information",
      "notes": "Approved deviation",
      "lastUpdated": "2025-02-13T14:15:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-13T14:15:00Z",
      "updatedAt": "2025-02-13T14:15:00Z"
    }
  ]
}

================
File: data/system/enums.json
================
{
  "systemStatus": [
    { "id": "status-1", "name": "DRAFT" },
    { "id": "status-2", "name": "IN_PROGRESS" },
    { "id": "status-3", "name": "COMPLETED" },
    { "id": "status-4", "name": "ARCHIVED" }
  ],
  "atoStatus": [
    { "id": "ato-1", "name": "NOT_STARTED" },
    { "id": "ato-2", "name": "IN_PROGRESS" },
    { "id": "ato-3", "name": "APPROVED" },
    { "id": "ato-4", "name": "DENIED" },
    { "id": "ato-5", "name": "EXPIRED" }
  ],
  "securityLevel": [
    { "id": "sec-1", "name": "low" },
    { "id": "sec-2", "name": "moderate" },
    { "id": "sec-3", "name": "high" }
  ],
  "informationLevel": [
    { "id": "info-1", "name": "public" },
    { "id": "info-2", "name": "internal" },
    { "id": "info-3", "name": "confidential" },
    { "id": "info-4", "name": "restricted" }
  ],
  "systemCategory": [
    { "id": "cat-1", "name": "Mission Critical" },
    { "id": "cat-2", "name": "Business Critical" },
    { "id": "cat-3", "name": "Business Operational" },
    { "id": "cat-4", "name": "Business Support" }
  ],
  "systemTypes": [
    { "id": "sys-type-1", "name": "Major Application" },
    { "id": "sys-type-2", "name": "General Support System" },
    { "id": "sys-type-3", "name": "Minor Application" },
    { "id": "sys-type-4", "name": "Other" }
  ],
  "networkTypes": [
    { "id": "net-1", "name": "LAN" },
    { "id": "net-2", "name": "WAN" },
    { "id": "net-3", "name": "VPN" },
    { "id": "net-4", "name": "Cloud" },
    { "id": "net-5", "name": "Hybrid" }
  ],
  "componentTypes": [
    { "id": "comp-1", "name": "Server" },
    { "id": "comp-2", "name": "Database" },
    { "id": "comp-3", "name": "Application" },
    { "id": "comp-4", "name": "Network Device" },
    { "id": "comp-5", "name": "Security Appliance" }
  ],
  "procedureTypes": [
    { "id": "proc-1", "name": "Backup" },
    { "id": "proc-2", "name": "Recovery" },
    { "id": "proc-3", "name": "Maintenance" },
    { "id": "proc-4", "name": "Security" },
    { "id": "proc-5", "name": "Compliance" }
  ],
  "commonPorts": [
    {
      "id": "port-1",
      "port": 80,
      "service": "HTTP"
    },
    {
      "id": "port-2",
      "port": 443,
      "service": "HTTPS"
    },
    {
      "id": "port-3",
      "port": 22,
      "service": "SSH"
    },
    {
      "id": "port-4",
      "port": 3306,
      "service": "MySQL"
    },
    {
      "id": "port-5",
      "port": 5432,
      "service": "PostgreSQL"
    }
  ]
}

================
File: data/system/process_steps.json
================
{
  "processSteps": [
    {
      "id": 1,
      "title": "Initial Assessment",
      "description": "System discovery and initial evaluation",
      "sections": [
        {
          "title": "System Discovery",
          "tasks": [
            "Conduct initial system inventory",
            "Document system purpose and functions",
            "Identify system components and boundaries",
            "Map data flows and interconnections",
            "Review existing security documentation"
          ]
        },
        {
          "title": "Gap Analysis",
          "tasks": [
            "Compare current state against required controls",
            "Document existing security measures",
            "Identify missing controls and documentation",
            "Assess current security practices",
            "Review existing policies and procedures"
          ]
        },
        {
          "title": "Environment Analysis",
          "tasks": [
            "Evaluate hosting environment (Cloud/On-Prem/Hybrid)",
            "Document infrastructure components",
            "Review network architecture",
            "Assess system dependencies",
            "Identify critical system interfaces"
          ]
        },
        {
          "title": "Stakeholder Analysis",
          "tasks": [
            "Identify key system stakeholders",
            "Document system owners and operators",
            "Map security responsibilities",
            "Establish points of contact",
            "Define communication channels"
          ]
        }
      ]
    },
    {
      "id": 2,
      "title": "System Categorization",
      "description": "Information classification and impact analysis",
      "sections": [
        {
          "title": "Information Types",
          "tasks": [
            "Identify all information types",
            "Document data sensitivity levels",
            "Map regulatory requirements",
            "Define data ownership",
            "Document data flows"
          ]
        },
        {
          "title": "Impact Analysis",
          "tasks": [
            "Assess confidentiality impact",
            "Evaluate integrity impact",
            "Determine availability impact",
            "Document impact rationale",
            "Define system categorization"
          ]
        },
        {
          "title": "Security Objectives",
          "tasks": [
            "Document security objectives",
            "Define protection requirements",
            "Identify critical functions",
            "Map business impact",
            "Establish security priorities"
          ]
        }
      ]
    },
    {
      "id": 3,
      "title": "Security Controls",
      "description": "Control selection and implementation",
      "sections": [
        {
          "title": "Baseline Selection",
          "tasks": [
            "Select security control baseline",
            "Document baseline rationale",
            "Map regulatory requirements",
            "Identify applicable overlays",
            "Define supplemental controls"
          ]
        },
        {
          "title": "Control Implementation",
          "tasks": [
            "Configure security settings",
            "Deploy security tools",
            "Implement procedures",
            "Document configurations",
            "Validate implementations"
          ]
        },
        {
          "title": "System Security Plan",
          "tasks": [
            "Document system description",
            "Detail control implementations",
            "Map security responsibilities",
            "Document architecture",
            "Define boundaries"
          ]
        }
      ]
    },
    {
      "id": 4,
      "title": "Assessment",
      "description": "Security testing and evaluation",
      "sections": [
        {
          "title": "Assessment Planning",
          "tasks": [
            "Develop assessment plan",
            "Define testing procedures",
            "Identify assessment tools",
            "Create test cases",
            "Document methodology"
          ]
        },
        {
          "title": "Security Testing",
          "tasks": [
            "Conduct vulnerability scans",
            "Perform penetration testing",
            "Test control effectiveness",
            "Document test results",
            "Validate configurations"
          ]
        },
        {
          "title": "Control Assessment",
          "tasks": [
            "Review control evidence",
            "Test control effectiveness",
            "Document findings",
            "Identify gaps",
            "Assess residual risk"
          ]
        }
      ]
    },
    {
      "id": 5,
      "title": "Authorization",
      "description": "ATO package and decision",
      "sections": [
        {
          "title": "Risk Assessment",
          "tasks": [
            "Analyze assessment results",
            "Document identified risks",
            "Assess risk levels",
            "Define mitigations",
            "Create POA&M"
          ]
        },
        {
          "title": "Package Preparation",
          "tasks": [
            "Compile authorization package",
            "Review documentation",
            "Validate completeness",
            "Prepare executive summary",
            "Document recommendations"
          ]
        },
        {
          "title": "Authorization Decision",
          "tasks": [
            "Present to authorizing official",
            "Review residual risks",
            "Document decision",
            "Define conditions",
            "Establish authorization boundary"
          ]
        }
      ]
    },
    {
      "id": 6,
      "title": "Continuous Monitoring",
      "description": "Ongoing security maintenance",
      "sections": [
        {
          "title": "Monitoring Program",
          "tasks": [
            "Define monitoring strategy",
            "Select security metrics",
            "Establish frequency",
            "Document procedures",
            "Define roles"
          ]
        },
        {
          "title": "Change Management",
          "tasks": [
            "Document change procedures",
            "Review security impact",
            "Update documentation",
            "Track modifications",
            "Maintain baseline"
          ]
        },
        {
          "title": "Maintenance",
          "tasks": [
            "Review security posture",
            "Update documentation",
            "Maintain evidence",
            "Track compliance",
            "Report status"
          ]
        }
      ]
    }
  ]
}

================
File: data/system/security_controls/controls.json
================
{
  "technical": [
    {
      "id": "AC-1",
      "number": "AC-1",
      "family": "Access Control",
      "title": "Access Control Policy and Procedures",
      "description": "The organization develops, documents, and disseminates an access control policy and procedures.",
      "implementationStatus": "Partially Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [
        {
          "id": "ev-1",
          "title": "Access Control Policy.pdf",
          "dateAdded": "2024-02-19"
        }
      ],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AC-2",
      "number": "AC-2",
      "family": "Access Control",
      "title": "Account Management",
      "description": "The organization manages information system accounts, including establishing, activating, modifying, reviewing, disabling, and removing accounts.",
      "implementationStatus": "Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AC-3",
      "number": "AC-3",
      "family": "Access Control",
      "title": "Access Enforcement",
      "description": "The system enforces approved authorizations for logical access to information and system resources.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "MODERATE",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    }
  ],
  "operational": [
    {
      "id": "AT-1",
      "number": "AT-1",
      "family": "Awareness and Training",
      "title": "Security Awareness and Training Policy and Procedures",
      "description": "The organization develops, documents, and disseminates security awareness and training policies and procedures.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AT-2",
      "number": "AT-2",
      "family": "Awareness and Training",
      "title": "Security Awareness Training",
      "description": "The organization provides basic security awareness training to information system users.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AT-3",
      "number": "AT-3",
      "family": "Awareness and Training",
      "title": "Role-Based Security Training",
      "description": "The organization provides role-based security training to personnel with assigned security roles and responsibilities.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "MODERATE",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    }
  ],
  "management": [
    {
      "id": "CA-1",
      "number": "CA-1",
      "family": "Security Assessment",
      "title": "Security Assessment and Authorization Policies and Procedures",
      "description": "The organization develops, documents, and disseminates security assessment and authorization policies and procedures.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "CA-2",
      "number": "CA-2",
      "family": "Security Assessment",
      "title": "Security Assessments",
      "description": "The organization develops a security assessment plan and conducts security assessments.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "CA-3",
      "number": "CA-3",
      "family": "Security Assessment",
      "title": "System Interconnections",
      "description": "The organization documents and controls system interconnections.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "MODERATE",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    }
  ]
}

================
File: data/system/security_controls/families.json
================
{
  "families": [
    { "id": "AC", "name": "Access Control" },
    { "id": "AT", "name": "Awareness and Training" },
    { "id": "AU", "name": "Audit and Accountability" },
    { "id": "CA", "name": "Security Assessment and Authorization" },
    { "id": "CM", "name": "Configuration Management" },
    { "id": "CP", "name": "Contingency Planning" },
    { "id": "IA", "name": "Identification and Authentication" },
    { "id": "IR", "name": "Incident Response" },
    { "id": "MA", "name": "Maintenance" },
    { "id": "MP", "name": "Media Protection" },
    { "id": "PE", "name": "Physical and Environmental Protection" },
    { "id": "PL", "name": "Planning" },
    { "id": "PS", "name": "Personnel Security" },
    { "id": "RA", "name": "Risk Assessment" },
    { "id": "SA", "name": "System and Services Acquisition" },
    { "id": "SC", "name": "System and Communications Protection" },
    { "id": "SI", "name": "System and Information Integrity" }
  ]
}

================
File: data/system/security_controls/stats.json
================
{
  "overallProgress": {
    "value": 35
  },
  "statusBreakdown": {
    "Implemented": 12,
    "Partially Implemented": 24,
    "Not Implemented": 45,
    "Not Applicable": 8
  }
}

================
File: data/system/system_packages.json
================
{
  "authorizationPackages": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "completed": ["System Security Plan", "Risk Assessment Report"],
      "pending": ["Privacy Impact Assessment", "Contingency Plan"],
      "executiveSummary": "System implements moderate security controls with some gaps identified.",
      "status": "in-progress",
      "validationStatus": "pending",
      "completionPercentage": 65,
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "authorizationDecisions": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "result": "pending",
      "official": "",
      "date": "",
      "expirationDate": "",
      "justification": "",
      "conditions": [],
      "boundary": "System includes all components within the development network segment.",
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ]
}

================
File: data/system/systems.json
================
{
  "systems": [
    {
      "id": "sys-001",
      "clientId": 1,
      "name": "Core Banking Platform",
      "type": "Major Application",
      "category": "Mission Critical",
      "securityLevel": "high",
      "informationLevel": "confidential",
      "status": "IN_PROGRESS",
      "atoStatus": "IN_PROGRESS",
      "currentPhase": "initial_assessment",
      "createdAt": "2025-02-20T10:00:00Z",
      "updatedAt": "2025-02-20T10:30:00Z",
      "lastAssessment": null,
      "phaseProgress": {
        "initial-assessment": 65,
        "system-categorization": 30,
        "security-controls": 10,
        "assessment": 0,
        "ato-authorization": 0,
        "continuous-monitoring": 0
      },
      "phases": {
        "initialAssessment": {
          "discovery": {
            "status": "in_progress",
            "completedItems": [
              "System inventory",
              "System purpose documentation"
            ],
            "pendingItems": [
              "Data flow mapping",
              "System boundaries"
            ]
          },
          "gapAnalysis": {
            "status": "in_progress",
            "completedItems": [
              "Current state assessment"
            ],
            "pendingItems": [
              "Control gap identification",
              "Security practice review"
            ]
          },
          "environment": {
            "status": "completed",
            "details": {
              "hosting": "Hybrid",
              "components": ["Web Servers", "Database Clusters", "Load Balancers"]
            }
          },
          "stakeholders": {
            "status": "not_started",
            "identified": [],
            "pending": ["System Owner", "Security Officer", "Operations Team"]
          }
        },
        "systemCategorization": {
          "infoTypes": {
            "status": "in_progress",
            "identified": [
              "Customer Data",
              "Transaction Records"
            ],
            "pending": [
              "Audit Logs",
              "Configuration Data"
            ]
          },
          "impact": {
            "status": "not_started",
            "assessments": {
              "confidentiality": null,
              "integrity": null,
              "availability": null
            }
          },
          "objectives": {
            "status": "not_started",
            "defined": [],
            "pending": [
              "Data Protection Goals",
              "System Availability Targets",
              "Compliance Requirements"
            ]
          }
        },
        "securityControls": {
          "baseline": {
            "status": "not_started",
            "selected": null,
            "rationale": null
          },
          "tailoring": {
            "status": "not_started",
            "completedControls": [],
            "pendingControls": []
          },
          "implementation": {
            "status": "not_started",
            "implemented": [],
            "pending": []
          },
          "documentation": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Security Policies",
              "Procedures",
              "Training Materials"
            ]
          }
        },
        "assessment": {
          "planning": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Assessment Plan",
              "Test Procedures",
              "Tool Selection"
            ]
          },
          "testing": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Vulnerability Scans",
              "Penetration Tests",
              "Control Testing"
            ]
          },
          "review": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Documentation Review",
              "Evidence Validation",
              "Findings Documentation"
            ]
          }
        },
        "authorization": {
          "riskAssessment": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Risk Analysis",
              "Mitigation Planning",
              "Residual Risk Assessment"
            ]
          },
          "package": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Package Assembly",
              "Documentation Review",
              "Executive Summary"
            ]
          },
          "decision": {
            "status": "not_started",
            "result": null,
            "conditions": []
          }
        },
        "continuousMonitoring": {
          "program": {
            "status": "not_started",
            "defined": [],
            "pending": [
              "Monitoring Strategy",
              "Metrics Definition",
              "Reporting Requirements"
            ]
          },
          "assessment": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Control Effectiveness",
              "Metric Collection",
              "Risk Updates"
            ]
          },
          "maintenance": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "System Updates",
              "Documentation Maintenance",
              "Training Updates"
            ]
          }
        }
      },
      "components": [],
      "networks": [],
      "ports": [],
      "procedures": [],
      "artifacts": [],
      "boundaries": {
        "physical": [],
        "network": [],
        "security": []
      },
      "compliance": {
        "nist": 0,
        "hipaa": 0,
        "pci": 0
      }
    }
  ]
}

================
File: db.json
================
{
  "0": {
    "id": "1",
    "name": "Primary Database Server",
    "type": "PHYSICAL",
    "uploadDate": "2024-02-21T08:00:00Z",
    "description": "Main database server hosting customer data",
    "fileUrl": "/artifacts/system-architecture.pdf",
    "fileType": "application/pdf",
    "size": 2457600,
    "uploadedBy": "John Smith",
    "specifications": {
      "manufacturer": "Dell",
      "model": "PowerEdge R740",
      "cpu": "Intel Xeon Gold 6248R",
      "ram": "384GB",
      "storage": "4TB SSD RAID-10"
    },
    "status": "ACTIVE",
    "lastUpdated": "2024-02-19T10:00:00Z"
  },
  "1": {
    "id": "2",
    "name": "Web Application Server",
    "type": "VIRTUAL",
    "uploadDate": "2024-02-20T15:30:00Z",
    "description": "Primary web application server",
    "fileUrl": "/artifacts/security-policy-v1.docx",
    "fileType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "size": 1048576,
    "uploadedBy": "Sarah Johnson",
    "specifications": {
      "os": "Ubuntu 22.04 LTS",
      "vcpus": 8,
      "ram": "32GB",
      "storage": "500GB"
    },
    "status": "ACTIVE",
    "lastUpdated": "2024-02-19T10:00:00Z"
  },
  "2": {
    "id": "3",
    "name": "Core Switch",
    "type": "NETWORK",
    "uploadDate": "2024-02-19T11:15:00Z",
    "description": "Primary network switch for data center",
    "fileUrl": "/artifacts/vuln-scan-feb2024.pdf",
    "fileType": "application/pdf",
    "size": 3145728,
    "uploadedBy": "Mike Wilson",
    "specifications": {
      "manufacturer": "Cisco",
      "model": "Catalyst 9300",
      "ports": "48x 10GbE",
      "throughput": "960 Gbps"
    },
    "status": "ACTIVE",
    "lastUpdated": "2024-02-19T10:00:00Z"
  },
  "3": {
    "id": "art-004",
    "name": "Network Diagram",
    "type": "Technical Documentation",
    "uploadDate": "2024-02-18T09:45:00Z",
    "description": "Current network topology and configuration",
    "fileUrl": "/artifacts/network-diagram.png",
    "fileType": "image/png",
    "size": 512000,
    "uploadedBy": "John Smith"
  },
  "4": {
    "id": "art-005",
    "name": "Security Control Implementation",
    "type": "Implementation Evidence",
    "uploadDate": "2024-02-17T14:20:00Z",
    "description": "Screenshots and configuration files showing security control implementation",
    "fileUrl": "/artifacts/control-implementation.zip",
    "fileType": "application/zip",
    "size": 5242880,
    "uploadedBy": "Sarah Johnson"
  },
  "roles": [
    {
      "id": "PROGRAM_MANAGER",
      "name": "PROGRAM_MANAGER"
    },
    {
      "id": "ISSM",
      "name": "ISSM"
    },
    {
      "id": "ISSO",
      "name": "ISSO"
    },
    {
      "id": "ISSE",
      "name": "ISSE"
    },
    {
      "id": "SYSTEM_ADMIN",
      "name": "SYSTEM_ADMIN"
    }
  ],
  "permissions": [
    {
      "id": "all",
      "description": "Full system access with no restrictions",
      "name": "all"
    },
    {
      "id": "view",
      "description": "Read-only access to system information"
    },
    {
      "id": "edit",
      "description": "Ability to modify system information"
    },
    {
      "id": "approve",
      "description": "Authority to approve system changes and assessments"
    },
    {
      "id": "review",
      "description": "Ability to review and comment on system documentation"
    },
    {
      "id": "assess",
      "description": "Permission to perform security assessments"
    },
    {
      "id": "manage_users",
      "name": "manage_users"
    },
    {
      "id": "view_users",
      "name": "view_users"
    },
    {
      "id": "manage_systems",
      "name": "manage_systems"
    },
    {
      "id": "view_systems",
      "name": "view_systems"
    },
    {
      "id": "manage_audits",
      "name": "manage_audits"
    },
    {
      "id": "view_audits",
      "name": "view_audits"
    },
    {
      "id": "manage_strategy",
      "name": "manage_strategy"
    }
  ],
  "users": [
    {
      "id": 1,
      "email": "senior.ao@example.com",
      "password": "password123",
      "firstName": "John",
      "lastName": "Smith",
      "role": "SENIOR_AO",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0123",
      "department": "Executive",
      "title": "Senior Authorizing Official",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "light",
        "language": "en"
      }
    },
    {
      "id": 2,
      "email": "sao@example.com",
      "password": "password123",
      "firstName": "Jane",
      "lastName": "Doe",
      "role": "SUBORDINATE_AO",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0124",
      "department": "Authorization",
      "title": "Subordinate Authorizing Official",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "light",
        "language": "en"
      }
    },
    {
      "id": 3,
      "email": "aodr@example.com",
      "password": "password123",
      "firstName": "Mike",
      "lastName": "Johnson",
      "role": "AODR",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0125",
      "department": "Authorization",
      "title": "AO Designated Representative",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "dark",
        "language": "en"
      }
    },
    {
      "id": 4,
      "email": "sca@example.com",
      "password": "password123",
      "firstName": "Sarah",
      "lastName": "Wilson",
      "role": "SCA",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0126",
      "department": "Security Assessment",
      "title": "Security Control Assessor",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "light",
        "language": "en"
      }
    },
    {
      "id": 5,
      "email": "scar@example.com",
      "password": "password123",
      "firstName": "David",
      "lastName": "Brown",
      "role": "SCAR",
      "isActive": true,
      "lastLogin": "2024-02-19T12:00:00Z",
      "lastActive": "2024-02-19T12:00:00Z",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-02-19T12:00:00Z",
      "profileImage": null,
      "phoneNumber": "+1-555-0127",
      "department": "Security Assessment",
      "title": "Security Control Assessor Representative",
      "status": "active",
      "failedLoginAttempts": 0,
      "lastPasswordChange": "2024-01-01T00:00:00Z",
      "preferences": {
        "notifications": true,
        "theme": "dark",
        "language": "en"
      }
    },
    {
      "id": 1,
      "username": "john.smith",
      "email": "john.smith@acme.com",
      "role": "PROGRAM_MANAGER",
      "clientId": 1,
      "firstName": "John",
      "lastName": "Smith",
      "title": "Program Manager",
      "department": "Security",
      "phone": "(555) 123-4567",
      "isActive": true,
      "lastActive": "2024-02-19T10:00:00Z",
      "permissions": [
        "manage_users",
        "manage_systems",
        "view_audits",
        "manage_strategy"
      ]
    },
    {
      "id": 2,
      "username": "sarah.johnson",
      "email": "sarah.johnson@acme.com",
      "role": "ISSM",
      "clientId": 1,
      "firstName": "Sarah",
      "lastName": "Johnson",
      "title": "Information System Security Manager",
      "department": "Security",
      "phone": "(555) 234-5678",
      "isActive": true,
      "lastActive": "2024-02-19T09:00:00Z",
      "permissions": [
        "manage_users",
        "manage_systems",
        "manage_audits",
        "manage_strategy"
      ]
    },
    {
      "id": 3,
      "username": "mike.wilson",
      "email": "mike.wilson@acme.com",
      "role": "ISSO",
      "clientId": 1,
      "firstName": "Mike",
      "lastName": "Wilson",
      "title": "Information System Security Officer",
      "department": "IT",
      "phone": "(555) 345-6789",
      "isActive": true,
      "lastActive": "2024-02-19T08:00:00Z",
      "permissions": [
        "view_users",
        "manage_systems",
        "manage_audits"
      ]
    },
    {
      "id": 4,
      "username": "alice.brown",
      "email": "alice.brown@healthcareplus.com",
      "role": "PROGRAM_MANAGER",
      "clientId": 2,
      "firstName": "Alice",
      "lastName": "Brown",
      "title": "Security Program Manager",
      "department": "Security",
      "phone": "(555) 456-7890",
      "isActive": true,
      "lastActive": "2024-02-19T11:00:00Z",
      "permissions": [
        "manage_users",
        "manage_systems",
        "view_audits",
        "manage_strategy"
      ]
    },
    {
      "id": 5,
      "username": "admin",
      "email": "admin@grc.com",
      "role": "SYSTEM_ADMIN",
      "clientId": null,
      "firstName": "System",
      "lastName": "Administrator",
      "title": "System Administrator",
      "department": "IT",
      "phone": "(555) 999-9999",
      "isActive": true,
      "lastActive": "2024-02-19T12:00:00Z",
      "permissions": [
        "all"
      ]
    }
  ],
  "statuses": [
    {
      "id": "active",
      "description": "User account is active and accessible"
    },
    {
      "id": "inactive",
      "description": "User account has been deactivated"
    },
    {
      "id": "suspended",
      "description": "User account has been temporarily suspended"
    },
    {
      "id": "pending_activation",
      "description": "User account awaiting activation"
    }
  ],
  "preferences": {
    "themes": [
      {
        "id": "light",
        "name": "Light Theme",
        "description": "Default light color scheme"
      },
      {
        "id": "dark",
        "name": "Dark Theme",
        "description": "Dark color scheme for low-light environments"
      }
    ],
    "languages": [
      {
        "id": "en",
        "name": "English",
        "code": "en-US"
      },
      {
        "id": "es",
        "name": "Spanish",
        "code": "es-ES"
      },
      {
        "id": "fr",
        "name": "French",
        "code": "fr-FR"
      }
    ],
    "notificationTypes": [
      {
        "id": "email",
        "name": "Email Notifications",
        "description": "Receive notifications via email"
      },
      {
        "id": "in-app",
        "name": "In-App Notifications",
        "description": "Receive notifications within the application"
      },
      {
        "id": "sms",
        "name": "SMS Notifications",
        "description": "Receive notifications via text message"
      }
    ]
  },
  "advancesQuestions": [
    {
      "id": "AC-1-Q1",
      "controlId": "AC-1",
      "text": "Has the organization developed and documented access control policies and procedures?",
      "impact": "Access control policies are fundamental to system security",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing access control policies and procedures",
        "description": "Organization lacks documented access control policies and procedures",
        "severity": "high",
        "recommendation": "Develop and document comprehensive access control policies and procedures",
        "category": "Access Control",
        "nistControl": "AC-1"
      }
    },
    {
      "id": "AC-2-Q1",
      "controlId": "AC-2",
      "text": "Does the organization implement automated account management processes?",
      "impact": "Automated account management ensures consistent access control",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Lack of automated account management",
        "description": "Account management processes are not automated",
        "severity": "high",
        "recommendation": "Implement automated account management system",
        "category": "Access Control",
        "nistControl": "AC-2"
      }
    },
    {
      "id": "AC-2-Q2",
      "controlId": "AC-2",
      "text": "Are account creation, modification, and termination processes documented and followed?",
      "impact": "Proper account lifecycle management prevents unauthorized access",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Inadequate account lifecycle management",
        "description": "Account management processes are not properly documented or followed",
        "severity": "high",
        "recommendation": "Document and implement account lifecycle management procedures",
        "category": "Access Control",
        "nistControl": "AC-2"
      }
    },
    {
      "id": "AC-3-Q1",
      "controlId": "AC-3",
      "text": "Is role-based access control (RBAC) implemented across all systems?",
      "impact": "RBAC ensures proper access enforcement",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing role-based access control",
        "description": "Systems do not implement role-based access control",
        "severity": "high",
        "recommendation": "Implement RBAC across all systems",
        "category": "Access Control",
        "nistControl": "AC-3"
      }
    },
    {
      "id": "AC-4-Q1",
      "controlId": "AC-4",
      "text": "Are information flow controls implemented between system components?",
      "impact": "Information flow control prevents unauthorized data transfer",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing information flow controls",
        "description": "System lacks proper information flow controls between components",
        "severity": "high",
        "recommendation": "Implement information flow controls between system components",
        "category": "Access Control",
        "nistControl": "AC-4"
      }
    },
    {
      "id": "AC-5-Q1",
      "controlId": "AC-5",
      "text": "Is separation of duties enforced through assigned access authorizations?",
      "impact": "Separation of duties prevents abuse of privileges",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Lack of separation of duties",
        "description": "System does not enforce separation of duties through access controls",
        "severity": "high",
        "recommendation": "Implement separation of duties in access authorizations",
        "category": "Access Control",
        "nistControl": "AC-5"
      }
    },
    {
      "id": "AC-6-Q1",
      "controlId": "AC-6",
      "text": "Is the principle of least privilege enforced for all user types?",
      "impact": "Least privilege minimizes potential damage from accidents or malicious acts",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Insufficient least privilege implementation",
        "description": "System does not properly enforce principle of least privilege",
        "severity": "high",
        "recommendation": "Implement least privilege access controls",
        "category": "Access Control",
        "nistControl": "AC-6"
      }
    },
    {
      "id": "AU-2-Q1",
      "controlId": "AU-2",
      "text": "Are audit events defined and logged across all systems?",
      "impact": "Audit logging is essential for security monitoring",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Insufficient audit logging",
        "description": "Systems do not have proper audit event logging configured",
        "severity": "high",
        "recommendation": "Define and implement comprehensive audit logging",
        "category": "Audit and Accountability",
        "nistControl": "AU-2"
      }
    },
    {
      "id": "AU-3-Q1",
      "controlId": "AU-3",
      "text": "Do audit records contain sufficient information for forensic analysis?",
      "impact": "Detailed audit records enable incident investigation",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Insufficient audit record content",
        "description": "Audit records lack necessary detail for forensic analysis",
        "severity": "high",
        "recommendation": "Configure audit logging to capture all required information",
        "category": "Audit and Accountability",
        "nistControl": "AU-3"
      }
    },
    {
      "id": "AU-6-Q1",
      "controlId": "AU-6",
      "text": "Is there a process for regular audit log review and analysis?",
      "impact": "Regular log review helps detect security incidents",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Inadequate audit log review",
        "description": "Organization lacks regular audit log review process",
        "severity": "high",
        "recommendation": "Implement regular audit log review procedures",
        "category": "Audit and Accountability",
        "nistControl": "AU-6"
      }
    },
    {
      "id": "AU-8-Q1",
      "controlId": "AU-8",
      "text": "Are system clocks synchronized across all systems for accurate timestamps?",
      "impact": "Time synchronization ensures accurate event correlation",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Lack of time synchronization",
        "description": "System clocks not properly synchronized",
        "severity": "medium",
        "recommendation": "Implement NTP or similar time synchronization",
        "category": "Audit and Accountability",
        "nistControl": "AU-8"
      }
    },
    {
      "id": "AU-9-Q1",
      "controlId": "AU-9",
      "text": "Are audit records protected from unauthorized access and modification?",
      "impact": "Protected audit records maintain integrity of security monitoring",
      "category": "Audit and Accountability",
      "findingTemplate": {
        "title": "Unprotected audit records",
        "description": "Audit records not adequately protected from tampering",
        "severity": "high",
        "recommendation": "Implement audit record protection mechanisms",
        "category": "Audit and Accountability",
        "nistControl": "AU-9"
      }
    },
    {
      "id": "CM-2-Q1",
      "controlId": "CM-2",
      "text": "Is there a documented baseline configuration for all systems?",
      "impact": "Baseline configurations ensure consistent security",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Missing baseline configurations",
        "description": "Systems lack documented baseline configurations",
        "severity": "high",
        "recommendation": "Develop and maintain baseline configurations for all systems",
        "category": "Configuration Management",
        "nistControl": "CM-2"
      }
    },
    {
      "id": "CM-3-Q1",
      "controlId": "CM-3",
      "text": "Is there a change management process for system modifications?",
      "impact": "Change management prevents unauthorized changes",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Inadequate change management",
        "description": "Organization lacks proper change management process",
        "severity": "high",
        "recommendation": "Implement formal change management procedures",
        "category": "Configuration Management",
        "nistControl": "CM-3"
      }
    },
    {
      "id": "CM-6-Q1",
      "controlId": "CM-6",
      "text": "Are configuration settings monitored and controlled?",
      "impact": "Configuration control maintains security posture",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Insufficient configuration control",
        "description": "Configuration settings not properly monitored or controlled",
        "severity": "high",
        "recommendation": "Implement configuration monitoring and control",
        "category": "Configuration Management",
        "nistControl": "CM-6"
      }
    },
    {
      "id": "CM-7-Q1",
      "controlId": "CM-7",
      "text": "Is the principle of least functionality enforced through application whitelisting?",
      "impact": "Least functionality reduces attack surface",
      "category": "Configuration Management",
      "findingTemplate": {
        "title": "Missing application whitelisting",
        "description": "Systems do not enforce least functionality through whitelisting",
        "severity": "high",
        "recommendation": "Implement application whitelisting",
        "category": "Configuration Management",
        "nistControl": "CM-7"
      }
    },
    {
      "id": "IA-2-Q1",
      "controlId": "IA-2",
      "text": "Is multi-factor authentication required for all privileged accounts?",
      "impact": "MFA protects privileged access from compromise",
      "category": "Identification and Authentication",
      "findingTemplate": {
        "title": "Missing MFA for privileged accounts",
        "description": "Privileged accounts not protected by multi-factor authentication",
        "severity": "critical",
        "recommendation": "Implement MFA for all privileged account access",
        "category": "Identification and Authentication",
        "nistControl": "IA-2"
      }
    },
    {
      "id": "IA-4-Q1",
      "controlId": "IA-4",
      "text": "Are unique identifiers assigned to all system users?",
      "impact": "Unique identifiers ensure accountability",
      "category": "Identification and Authentication",
      "findingTemplate": {
        "title": "Non-unique user identifiers",
        "description": "System users not assigned unique identifiers",
        "severity": "high",
        "recommendation": "Implement unique identifier assignment process",
        "category": "Identification and Authentication",
        "nistControl": "IA-4"
      }
    },
    {
      "id": "IA-5-Q1",
      "controlId": "IA-5",
      "text": "Are password complexity and lifetime restrictions enforced?",
      "impact": "Strong passwords reduce risk of compromise",
      "category": "Identification and Authentication",
      "findingTemplate": {
        "title": "Weak password requirements",
        "description": "Password policies do not enforce adequate complexity or rotation",
        "severity": "high",
        "recommendation": "Implement strong password policies",
        "category": "Identification and Authentication",
        "nistControl": "IA-5"
      }
    },
    {
      "id": "IR-4-Q1",
      "controlId": "IR-4",
      "text": "Is there an incident handling capability in place?",
      "impact": "Incident handling ensures proper response to security events",
      "category": "Incident Response",
      "findingTemplate": {
        "title": "Missing incident handling capability",
        "description": "Organization lacks proper incident handling procedures",
        "severity": "high",
        "recommendation": "Establish incident handling capability",
        "category": "Incident Response",
        "nistControl": "IR-4"
      }
    },
    {
      "id": "IR-5-Q1",
      "controlId": "IR-5",
      "text": "Are security incidents tracked and documented?",
      "impact": "Incident tracking enables trend analysis and improvement",
      "category": "Incident Response",
      "findingTemplate": {
        "title": "Inadequate incident tracking",
        "description": "Security incidents not properly tracked and documented",
        "severity": "high",
        "recommendation": "Implement incident tracking system",
        "category": "Incident Response",
        "nistControl": "IR-5"
      }
    },
    {
      "id": "IR-6-Q1",
      "controlId": "IR-6",
      "text": "Is there a process for incident reporting?",
      "impact": "Incident reporting ensures timely response",
      "category": "Incident Response",
      "findingTemplate": {
        "title": "Missing incident reporting process",
        "description": "Organization lacks formal incident reporting procedures",
        "severity": "high",
        "recommendation": "Establish incident reporting procedures",
        "category": "Incident Response",
        "nistControl": "IR-6"
      }
    },
    {
      "id": "SC-7-Q1",
      "controlId": "SC-7",
      "text": "Are boundary protection mechanisms implemented?",
      "impact": "Boundary protection prevents unauthorized network access",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Insufficient boundary protection",
        "description": "System boundaries lack proper protection mechanisms",
        "severity": "high",
        "recommendation": "Implement boundary protection controls",
        "category": "System and Communications Protection",
        "nistControl": "SC-7"
      }
    },
    {
      "id": "SC-8-Q1",
      "controlId": "SC-8",
      "text": "Is transmission confidentiality and integrity protected?",
      "impact": "Protected transmission prevents data compromise",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Unprotected data transmission",
        "description": "Data transmission lacks confidentiality and integrity protection",
        "severity": "high",
        "recommendation": "Implement transmission protection mechanisms",
        "category": "System and Communications Protection",
        "nistControl": "SC-8"
      }
    },
    {
      "id": "SC-12-Q1",
      "controlId": "SC-12",
      "text": "Are cryptographic keys properly managed throughout their lifecycle?",
      "impact": "Key management ensures cryptographic security",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Inadequate cryptographic key management",
        "description": "Cryptographic keys not properly managed",
        "severity": "high",
        "recommendation": "Implement cryptographic key management procedures",
        "category": "System and Communications Protection",
        "nistControl": "SC-12"
      }
    },
    {
      "id": "SC-13-Q1",
      "controlId": "SC-13",
      "text": "Are FIPS-validated or NSA-approved cryptography used?",
      "impact": "Approved cryptography ensures adequate protection",
      "category": "System and Communications Protection",
      "findingTemplate": {
        "title": "Non-approved cryptography",
        "description": "System uses non-approved cryptographic algorithms",
        "severity": "high",
        "recommendation": "Implement FIPS-validated cryptography",
        "category": "System and Communications Protection",
        "nistControl": "SC-13"
      }
    },
    {
      "id": "SI-2-Q1",
      "controlId": "SI-2",
      "text": "Are system flaws identified and corrected?",
      "impact": "Flaw remediation prevents exploitation",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Inadequate flaw remediation",
        "description": "System flaws not properly identified and corrected",
        "severity": "high",
        "recommendation": "Implement flaw remediation process",
        "category": "System and Information Integrity",
        "nistControl": "SI-2"
      }
    },
    {
      "id": "SI-3-Q1",
      "controlId": "SI-3",
      "text": "Is malicious code protection implemented and updated?",
      "impact": "Malware protection prevents system compromise",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Insufficient malware protection",
        "description": "Systems lack adequate malicious code protection",
        "severity": "high",
        "recommendation": "Implement comprehensive malware protection",
        "category": "System and Information Integrity",
        "nistControl": "SI-3"
      }
    },
    {
      "id": "SI-4-Q1",
      "controlId": "SI-4",
      "text": "Is system monitoring capability implemented?",
      "impact": "Monitoring detects potential security violations",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Insufficient system monitoring",
        "description": "System lacks proper monitoring capability",
        "severity": "high",
        "recommendation": "Implement comprehensive system monitoring",
        "category": "System and Information Integrity",
        "nistControl": "SI-4"
      }
    },
    {
      "id": "SI-5-Q1",
      "controlId": "SI-5",
      "text": "Are security alerts and advisories monitored and acted upon?",
      "impact": "Security alerts enable timely response to threats",
      "category": "System and Information Integrity",
      "findingTemplate": {
        "title": "Inadequate security alert monitoring",
        "description": "Organization does not properly monitor or respond to security alerts",
        "severity": "high",
        "recommendation": "Implement security alert monitoring and response procedures",
        "category": "System and Information Integrity",
        "nistControl": "SI-5"
      }
    }
  ],
  "assessmentHistory": [
    {
      "id": "asmt-001",
      "date": "2025-02-01T08:00:00Z",
      "type": "basic",
      "name": "Basic Security Assessment Feb 2025",
      "score": 75,
      "status": "completed",
      "clientId": 1,
      "systemId": "sys-001",
      "answers": [
        {
          "questionId": 1,
          "questionType": "basic",
          "answer": "no",
          "notes": "Antivirus software outdated on 30% of systems"
        },
        {
          "questionId": 2,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Firewalls properly configured"
        },
        {
          "questionId": 3,
          "questionType": "basic",
          "answer": "no",
          "notes": "MFA not implemented on development systems"
        },
        {
          "questionId": 4,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Password policies enforced through AD"
        },
        {
          "questionId": 5,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Monthly training sessions conducted"
        },
        {
          "questionId": 6,
          "questionType": "basic",
          "answer": "no",
          "notes": "Backup testing not performed regularly"
        },
        {
          "questionId": 7,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Encryption implemented for all sensitive data"
        },
        {
          "questionId": 8,
          "questionType": "basic",
          "answer": "yes",
          "notes": "Regular patch management in place"
        }
      ],
      "generatedFindings": [
        {
          "id": "f-001",
          "sourceQuestionId": 1,
          "questionType": "basic",
          "title": "Missing or outdated antivirus protection",
          "description": "Systems lack proper antivirus protection or updates are not maintained",
          "severity": "high",
          "category": "System Security",
          "recommendation": "Install and configure antivirus software on all systems with automatic updates",
          "status": "open",
          "createdDate": "2025-02-01T08:00:00Z"
        },
        {
          "id": "f-002",
          "sourceQuestionId": 6,
          "questionType": "basic",
          "title": "Insufficient backup procedures",
          "description": "Backup processes are not adequate or tested",
          "severity": "high",
          "category": "Data Protection",
          "recommendation": "Implement comprehensive backup strategy with regular testing",
          "status": "in_progress",
          "createdDate": "2025-02-01T08:00:00Z"
        }
      ]
    },
    {
      "id": "asmt-002",
      "date": "2025-02-15T10:00:00Z",
      "type": "advanced",
      "name": "NIST 800-53 Assessment Feb 2025",
      "score": 82,
      "status": "completed",
      "clientId": 1,
      "systemId": "sys-001",
      "answers": [
        {
          "questionId": "AU-2-Q1",
          "questionType": "advanced",
          "answer": "no",
          "notes": "Audit logging not configured on all systems"
        },
        {
          "questionId": "CM-2-Q1",
          "questionType": "advanced",
          "answer": "no",
          "notes": "Baseline configurations not documented"
        },
        {
          "questionId": "SI-4-Q1",
          "questionType": "advanced",
          "answer": "partial",
          "notes": "Monitoring implemented but not comprehensive"
        },
        {
          "questionId": "AC-2-Q1",
          "questionType": "advanced",
          "answer": "yes",
          "notes": "Automated account management implemented"
        },
        {
          "questionId": "SC-7-Q1",
          "questionType": "advanced",
          "answer": "yes",
          "notes": "Boundary protection mechanisms in place"
        }
      ],
      "generatedFindings": [
        {
          "id": "f-003",
          "sourceQuestionId": "AU-2-Q1",
          "questionType": "advanced",
          "title": "Inadequate audit logging",
          "description": "Systems do not have proper audit event logging configured",
          "severity": "high",
          "category": "Audit and Accountability",
          "recommendation": "Define and implement comprehensive audit logging",
          "status": "completed",
          "createdDate": "2025-02-15T10:00:00Z",
          "nistControl": "AU-2"
        },
        {
          "id": "f-004",
          "sourceQuestionId": "CM-2-Q1",
          "questionType": "advanced",
          "title": "Missing baseline configurations",
          "description": "Systems lack documented baseline configurations",
          "severity": "high",
          "category": "Configuration Management",
          "recommendation": "Develop and maintain baseline configurations for all systems",
          "status": "open",
          "createdDate": "2025-02-15T10:00:00Z",
          "nistControl": "CM-2"
        },
        {
          "id": "f-005",
          "sourceQuestionId": "SI-4-Q1",
          "questionType": "advanced",
          "title": "Insufficient system monitoring",
          "description": "System lacks proper monitoring capability",
          "severity": "high",
          "category": "System and Information Integrity",
          "recommendation": "Implement comprehensive system monitoring",
          "status": "in_progress",
          "createdDate": "2025-02-15T10:00:00Z",
          "nistControl": "SI-4"
        }
      ]
    }
  ],
  "authorizationPackages": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "completed": [
        "System Security Plan",
        "Risk Assessment Report"
      ],
      "pending": [
        "Privacy Impact Assessment",
        "Contingency Plan"
      ],
      "executiveSummary": "System implements moderate security controls with some gaps identified.",
      "status": "in-progress",
      "validationStatus": "pending",
      "completionPercentage": 65,
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "authorizationDecisions": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "result": "pending",
      "official": "",
      "date": "",
      "expirationDate": "",
      "justification": "",
      "conditions": [],
      "boundary": "System includes all components within the development network segment.",
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "authorizationRisks": [
    {
      "id": "RISK-001",
      "systemId": "sys-001",
      "clientId": 1,
      "description": "Insufficient access controls",
      "likelihood": "high",
      "impact": "high",
      "status": "open",
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "nonCompliantControls": [
    {
      "id": 1,
      "systemId": "sys-001",
      "clientId": 1,
      "controlId": "AC-2",
      "title": "Account Management",
      "status": "non-compliant",
      "findings": "Missing automated account management procedures",
      "createdAt": "2024-02-10",
      "updatedAt": "2024-02-10"
    }
  ],
  "basicQuestions": [
    {
      "id": 1,
      "text": "Is antivirus software installed and updated on all systems?",
      "impact": "Antivirus helps protect against malware and cyber threats",
      "category": "System Security",
      "findingTemplate": {
        "title": "Missing or outdated antivirus protection",
        "description": "Systems lack proper antivirus protection or updates are not maintained",
        "severity": "high",
        "recommendation": "Install and configure antivirus software on all systems with automatic updates",
        "category": "System Security"
      }
    },
    {
      "id": 2,
      "text": "Are firewalls configured and maintained on all network boundaries?",
      "impact": "Firewalls help prevent unauthorized network access",
      "category": "Network Security",
      "findingTemplate": {
        "title": "Inadequate firewall protection",
        "description": "Network boundaries lack proper firewall configuration",
        "severity": "high",
        "recommendation": "Deploy and configure firewalls at all network boundaries",
        "category": "Network Security"
      }
    },
    {
      "id": 3,
      "text": "Is multi-factor authentication (MFA) enabled for all critical systems?",
      "impact": "MFA significantly reduces the risk of unauthorized access",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Missing Multi-Factor Authentication",
        "description": "Critical systems lack MFA protection",
        "severity": "high",
        "recommendation": "Implement MFA for all critical system access",
        "category": "Access Control"
      }
    },
    {
      "id": 4,
      "text": "Are password policies enforced across all systems?",
      "impact": "Strong password policies are essential for access security",
      "category": "Access Control",
      "findingTemplate": {
        "title": "Insufficient password policies",
        "description": "Password policies do not meet security requirements",
        "severity": "high",
        "recommendation": "Implement and enforce strong password policies",
        "category": "Access Control"
      }
    },
    {
      "id": 5,
      "text": "Is security awareness training provided regularly?",
      "impact": "Training helps prevent social engineering attacks",
      "category": "Security Awareness",
      "findingTemplate": {
        "title": "Inadequate security awareness training",
        "description": "Security awareness training is not regularly conducted",
        "severity": "medium",
        "recommendation": "Implement regular security awareness training program",
        "category": "Security Awareness"
      }
    },
    {
      "id": 6,
      "text": "Are regular backups performed and tested?",
      "impact": "Backups are critical for business continuity",
      "category": "Data Protection",
      "findingTemplate": {
        "title": "Insufficient backup procedures",
        "description": "Backup processes are not adequate or tested",
        "severity": "high",
        "recommendation": "Implement comprehensive backup strategy with regular testing",
        "category": "Data Protection"
      }
    },
    {
      "id": 7,
      "text": "Is sensitive data encrypted at rest and in transit?",
      "impact": "Encryption protects data from unauthorized access",
      "category": "Data Protection",
      "findingTemplate": {
        "title": "Inadequate data encryption",
        "description": "Sensitive data is not properly encrypted",
        "severity": "high",
        "recommendation": "Implement encryption for data at rest and in transit",
        "category": "Data Protection"
      }
    },
    {
      "id": 8,
      "text": "Is patch management performed regularly?",
      "impact": "Regular patching prevents exploitation of known vulnerabilities",
      "category": "System Security",
      "findingTemplate": {
        "title": "Inadequate patch management",
        "description": "Systems are not patched regularly",
        "severity": "high",
        "recommendation": "Implement regular patch management process",
        "category": "System Security"
      }
    }
  ],
  "clients": [
    {
      "id": 1,
      "name": "Acme Corporation",
      "industry": "Technology",
      "email": "contact@acme.com",
      "phone": "(555) 123-4567",
      "primaryContact": "John Smith",
      "createdAt": "2024-01-01T10:00:00Z",
      "lastActivity": "2024-02-19T10:00:00Z",
      "complianceScore": 85,
      "status": "active",
      "address": {
        "street": "123 Tech Lane",
        "city": "San Francisco",
        "state": "CA",
        "zip": "94105",
        "country": "USA"
      },
      "size": "Enterprise",
      "employeeCount": 5000,
      "website": "www.acme.com"
    }
  ],
  "rolePermissions": [
    {
      "id": "PROGRAM_MANAGER",
      "permissions": [
        "manage_users",
        "manage_systems",
        "view_audits",
        "manage_strategy"
      ]
    },
    {
      "id": "ISSM",
      "permissions": [
        "manage_users",
        "manage_systems",
        "manage_audits",
        "manage_strategy"
      ]
    },
    {
      "id": "ISSO",
      "permissions": [
        "view_users",
        "manage_systems",
        "manage_audits"
      ]
    },
    {
      "id": "ISSE",
      "permissions": [
        "view_users",
        "view_systems",
        "view_audits"
      ]
    },
    {
      "id": "SYSTEM_ADMIN",
      "permissions": [
        "all"
      ]
    }
  ],
  "departments": [
    {
      "id": "Security",
      "name": "Security"
    },
    {
      "id": "IT",
      "name": "IT"
    },
    {
      "id": "Compliance",
      "name": "Compliance"
    },
    {
      "id": "Risk Management",
      "name": "Risk Management"
    },
    {
      "id": "Operations",
      "name": "Operations"
    },
    {
      "id": "Executive",
      "name": "Executive"
    },
    {
      "id": 1,
      "clientId": 1,
      "name": "Information Technology",
      "head": "David Wilson",
      "headTitle": "CTO",
      "employeeCount": 150,
      "positions": [
        {
          "id": 1,
          "name": "Software Engineer"
        },
        {
          "id": 2,
          "name": "System Administrator"
        },
        {
          "id": 3,
          "name": "Security Analyst"
        }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    },
    {
      "id": 2,
      "clientId": 1,
      "name": "Security Operations",
      "head": "Alice Brown",
      "headTitle": "CISO",
      "employeeCount": 50,
      "positions": [
        {
          "id": 1,
          "name": "Security Engineer"
        },
        {
          "id": 2,
          "name": "Incident Responder"
        },
        {
          "id": 3,
          "name": "Security Analyst"
        }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    },
    {
      "id": 3,
      "clientId": 1,
      "name": "Risk & Compliance",
      "head": "Michael Chen",
      "headTitle": "Risk Director",
      "employeeCount": 35,
      "positions": [
        {
          "id": 1,
          "name": "Risk Analyst"
        },
        {
          "id": 2,
          "name": "Compliance Officer"
        },
        {
          "id": 3,
          "name": "Auditor"
        }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    },
    {
      "id": 4,
      "clientId": 1,
      "name": "Network Operations",
      "head": "Sarah Johnson",
      "headTitle": "Network Director",
      "employeeCount": 45,
      "positions": [
        {
          "id": 1,
          "name": "Network Engineer"
        },
        {
          "id": 2,
          "name": "Infrastructure Specialist"
        },
        {
          "id": 3,
          "name": "Cloud Architect"
        }
      ],
      "lastUpdated": "2024-02-19T10:00:00Z"
    }
  ],
  "titles": [
    {
      "id": "Program Manager",
      "name": "Program Manager"
    },
    {
      "id": "Information System Security Manager",
      "name": "Information System Security Manager"
    },
    {
      "id": "Information System Security Officer",
      "name": "Information System Security Officer"
    },
    {
      "id": "Security Engineer",
      "name": "Security Engineer"
    },
    {
      "id": "System Administrator",
      "name": "System Administrator"
    },
    {
      "id": "Security Analyst",
      "name": "Security Analyst"
    },
    {
      "id": "Compliance Officer",
      "name": "Compliance Officer"
    },
    {
      "id": "Risk Manager",
      "name": "Risk Manager"
    }
  ],
  "userStatus": [
    {
      "id": "active",
      "name": "active"
    },
    {
      "id": "inactive",
      "name": "inactive"
    },
    {
      "id": "suspended",
      "name": "suspended"
    },
    {
      "id": "pending",
      "name": "pending"
    }
  ],
  "assessmentDocuments": [
    {
      "id": "doc-001",
      "name": "System Security Plan",
      "expirationDate": "2026-02-20",
      "lastReviewed": "2025-02-15",
      "validationNotes": "Annual review completed. Updates required for new controls.",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2025-02-15",
          "notes": "Annual review completed. Updates required for new controls."
        },
        {
          "id": 2,
          "date": "2024-02-15",
          "notes": "Initial review completed."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-02-15T00:00:00Z",
      "updatedAt": "2025-02-15T00:00:00Z"
    },
    {
      "id": "doc-002",
      "name": "Incident Response Plan",
      "expirationDate": "2025-03-15",
      "lastReviewed": "2024-03-15",
      "validationNotes": "Review needed before expiration",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2024-03-15",
          "notes": "Annual review completed. No major changes required."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-03-15T00:00:00Z",
      "updatedAt": "2024-03-15T00:00:00Z"
    },
    {
      "id": "doc-003",
      "name": "Contingency Plan",
      "expirationDate": "2025-01-10",
      "lastReviewed": "2024-01-10",
      "validationNotes": "Document expired. Immediate review required.",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2024-01-10",
          "notes": "Annual review completed. Updated recovery procedures."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-01-10T00:00:00Z",
      "updatedAt": "2024-01-10T00:00:00Z"
    },
    {
      "id": "doc-004",
      "name": "Configuration Management Plan",
      "expirationDate": "2025-06-30",
      "lastReviewed": "2024-06-30",
      "validationNotes": "Current and valid",
      "reviewHistory": [
        {
          "id": 1,
          "date": "2024-06-30",
          "notes": "Updated to include new system components."
        }
      ],
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2024-06-30T00:00:00Z",
      "updatedAt": "2024-06-30T00:00:00Z"
    }
  ],
  "risks": [
    {
      "id": "risk-001",
      "clientId": 1,
      "name": "Unauthorized Access to Sensitive Data",
      "description": "There is a risk of unauthorized access to sensitive customer data due to weak access controls.",
      "impact": "high",
      "likelihood": "medium",
      "category": "Access Control",
      "status": "open",
      "lastAssessed": "2024-12-15T10:30:00Z",
      "sourceFindings": [
        {
          "findingId": "f-001",
          "title": "Weak Password Policy",
          "sourceType": "security_assessment",
          "date": "2024-12-15T10:30:00Z"
        }
      ],
      "businessImpact": {
        "financial": "High potential for fines and legal costs",
        "operational": "Moderate disruption to operations",
        "reputational": "Severe damage to customer trust",
        "compliance": "Violation of data protection regulations"
      },
      "treatment": {
        "approach": "mitigate",
        "plan": "Implement stronger password policies and multi-factor authentication",
        "status": "in_progress",
        "objectives": [
          "obj-001"
        ]
      }
    },
    {
      "id": "risk-002",
      "clientId": 1,
      "name": "Outdated Software Vulnerabilities",
      "description": "Critical systems are running outdated software with known security vulnerabilities.",
      "impact": "high",
      "likelihood": "high",
      "category": "Vulnerability Management",
      "status": "open",
      "lastAssessed": "2024-12-16T14:45:00Z",
      "sourceFindings": [
        {
          "findingId": "f-002",
          "title": "Outdated Operating Systems",
          "sourceType": "security_assessment",
          "date": "2024-12-16T14:45:00Z"
        }
      ],
      "businessImpact": {
        "financial": "Potential for significant recovery costs",
        "operational": "High risk of service disruption",
        "reputational": "Moderate impact on reputation",
        "compliance": "Potential compliance issues"
      },
      "treatment": {
        "approach": "mitigate",
        "plan": "Implement a regular patching schedule and software upgrade policy",
        "status": "not_started",
        "objectives": [
          "obj-002"
        ]
      }
    },
    {
      "id": "risk-003",
      "clientId": 1,
      "name": "Insufficient Backup Procedures",
      "description": "Current backup procedures do not adequately protect against data loss in case of a disaster.",
      "impact": "medium",
      "likelihood": "medium",
      "category": "Business Continuity",
      "status": "open",
      "lastAssessed": "2024-12-18T09:15:00Z",
      "sourceFindings": [
        {
          "findingId": "f-003",
          "title": "Inadequate Backup Testing",
          "sourceType": "security_assessment",
          "date": "2024-12-18T09:15:00Z"
        }
      ],
      "businessImpact": {
        "financial": "Moderate recovery costs",
        "operational": "Severe operational disruption possible",
        "reputational": "Minor reputational impact",
        "compliance": "Potential regulatory issues"
      },
      "treatment": {
        "approach": "mitigate",
        "plan": "Implement automated daily backups with regular testing",
        "status": "in_progress",
        "objectives": [
          "obj-003"
        ]
      }
    }
  ],
  "incidentTypes": [
    {
      "id": 1,
      "name": "security"
    },
    {
      "id": 2,
      "name": "system"
    },
    {
      "id": 3,
      "name": "network"
    },
    {
      "id": 4,
      "name": "application"
    },
    {
      "id": 5,
      "name": "hardware"
    },
    {
      "id": 6,
      "name": "software"
    },
    {
      "id": 7,
      "name": "data"
    },
    {
      "id": 8,
      "name": "user"
    },
    {
      "id": 9,
      "name": "other"
    }
  ],
  "incidentSeverities": [
    {
      "id": 1,
      "name": "critical"
    },
    {
      "id": 2,
      "name": "high"
    },
    {
      "id": 3,
      "name": "medium"
    },
    {
      "id": 4,
      "name": "low"
    }
  ],
  "incidentStatuses": [
    {
      "id": 1,
      "name": "active"
    },
    {
      "id": 2,
      "name": "investigating"
    },
    {
      "id": 3,
      "name": "mitigated"
    },
    {
      "id": 4,
      "name": "resolved"
    },
    {
      "id": 5,
      "name": "closed"
    }
  ],
  "incidentPriorities": [
    {
      "id": 1,
      "name": "critical"
    },
    {
      "id": 2,
      "name": "high"
    },
    {
      "id": 3,
      "name": "medium"
    },
    {
      "id": 4,
      "name": "low"
    }
  ],
  "actionTypes": [
    {
      "id": 1,
      "name": "detection"
    },
    {
      "id": 2,
      "name": "investigation"
    },
    {
      "id": 3,
      "name": "mitigation"
    },
    {
      "id": 4,
      "name": "resolution"
    },
    {
      "id": 5,
      "name": "communication"
    },
    {
      "id": 6,
      "name": "escalation"
    }
  ],
  "teams": [
    {
      "id": 1,
      "name": "Information Technology"
    },
    {
      "id": 2,
      "name": "Security Operations"
    },
    {
      "id": 3,
      "name": "Risk & Compliance"
    },
    {
      "id": 4,
      "name": "Network Operations"
    }
  ],
  "systemTypes": [
    {
      "id": 1,
      "name": "Web Server"
    },
    {
      "id": 2,
      "name": "Database Server"
    },
    {
      "id": 3,
      "name": "Authentication Server"
    },
    {
      "id": 4,
      "name": "Network Infrastructure"
    },
    {
      "id": 5,
      "name": "Storage System"
    },
    {
      "id": 6,
      "name": "Backup System"
    },
    {
      "id": 7,
      "name": "End User Systems"
    },
    {
      "id": 8,
      "name": "Security Systems"
    },
    {
      "id": 9,
      "name": "Cloud Services"
    },
    {
      "id": "sys-type-1",
      "name": "Major Application"
    },
    {
      "id": "sys-type-2",
      "name": "General Support System"
    },
    {
      "id": "sys-type-3",
      "name": "Minor Application"
    },
    {
      "id": "sys-type-4",
      "name": "Other"
    }
  ],
  "incidents": [
    {
      "id": 1,
      "clientId": 1,
      "title": "Unauthorized Access Attempt",
      "type": "security",
      "severity": "high",
      "status": "active",
      "priority": "high",
      "createdAt": "2024-02-19T08:00:00Z",
      "updatedAt": "2024-02-19T10:30:00Z",
      "resolvedAt": null,
      "assignedTo": "Security Operations",
      "description": "Multiple failed login attempts detected from suspicious IP addresses",
      "affectedSystems": [
        "Authentication Server",
        "User Database"
      ],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-19T08:00:00Z",
          "description": "IDS detected multiple failed login attempts",
          "performedBy": "Security Operations"
        },
        {
          "id": 2,
          "type": "mitigation",
          "timestamp": "2024-02-19T08:15:00Z",
          "description": "IP addresses temporarily blocked",
          "performedBy": "Alice Brown"
        },
        {
          "id": 3,
          "type": "investigation",
          "timestamp": "2024-02-19T10:30:00Z",
          "description": "Analysis of login attempt patterns",
          "performedBy": "Security Operations"
        }
      ]
    },
    {
      "id": 2,
      "clientId": 1,
      "title": "Data Backup Failure",
      "type": "system",
      "severity": "medium",
      "status": "resolved",
      "priority": "medium",
      "createdAt": "2024-02-18T15:00:00Z",
      "updatedAt": "2024-02-18T17:45:00Z",
      "resolvedAt": "2024-02-18T17:45:00Z",
      "assignedTo": "Information Technology",
      "description": "Scheduled backup job failed due to storage capacity issues",
      "affectedSystems": [
        "Backup System",
        "Storage System"
      ],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-18T15:00:00Z",
          "description": "Backup job failure alert received",
          "performedBy": "Information Technology"
        },
        {
          "id": 2,
          "type": "investigation",
          "timestamp": "2024-02-18T15:30:00Z",
          "description": "Storage capacity analysis performed",
          "performedBy": "David Wilson"
        },
        {
          "id": 3,
          "type": "resolution",
          "timestamp": "2024-02-18T17:45:00Z",
          "description": "Additional storage allocated and backup job rerun successfully",
          "performedBy": "Information Technology"
        }
      ]
    },
    {
      "id": 3,
      "clientId": 1,
      "title": "SSL Certificate Expiration",
      "type": "security",
      "severity": "medium",
      "status": "active",
      "priority": "high",
      "createdAt": "2024-02-19T09:00:00Z",
      "updatedAt": "2024-02-19T09:30:00Z",
      "resolvedAt": null,
      "assignedTo": "Security Operations",
      "description": "SSL certificate for main website approaching expiration",
      "affectedSystems": [
        "Web Server"
      ],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-19T09:00:00Z",
          "description": "Certificate expiration alert received",
          "performedBy": "Security Operations"
        },
        {
          "id": 2,
          "type": "mitigation",
          "timestamp": "2024-02-19T09:30:00Z",
          "description": "Certificate renewal process initiated",
          "performedBy": "Alice Brown"
        }
      ]
    },
    {
      "id": 4,
      "clientId": 1,
      "title": "Network Performance Degradation",
      "type": "network",
      "severity": "high",
      "status": "investigating",
      "priority": "high",
      "createdAt": "2024-02-19T11:00:00Z",
      "updatedAt": "2024-02-19T11:45:00Z",
      "resolvedAt": null,
      "assignedTo": "Network Operations",
      "description": "Users reporting slow network performance and intermittent connectivity issues",
      "affectedSystems": [
        "Network Infrastructure",
        "Cloud Services"
      ],
      "actions": [
        {
          "id": 1,
          "type": "detection",
          "timestamp": "2024-02-19T11:00:00Z",
          "description": "Multiple user reports of slow network performance",
          "performedBy": "Information Technology"
        },
        {
          "id": 2,
          "type": "investigation",
          "timestamp": "2024-02-19T11:45:00Z",
          "description": "Network monitoring analysis initiated",
          "performedBy": "Sarah Johnson"
        }
      ]
    }
  ],
  "keyPersonnel": [
    {
      "id": 1,
      "clientId": 1,
      "departmentId": null,
      "name": "John Smith",
      "role": "Primary Contact",
      "department": "Executive",
      "title": "CEO"
    },
    {
      "id": 2,
      "clientId": 1,
      "departmentId": 1,
      "name": "David Wilson",
      "role": "Technology Lead",
      "department": "Information Technology",
      "title": "CTO"
    },
    {
      "id": 3,
      "clientId": 1,
      "departmentId": 2,
      "name": "Alice Brown",
      "role": "Security Lead",
      "department": "Security Operations",
      "title": "CISO"
    },
    {
      "id": 4,
      "clientId": 1,
      "departmentId": 3,
      "name": "Michael Chen",
      "role": "Risk Lead",
      "department": "Risk & Compliance",
      "title": "Risk Director"
    },
    {
      "id": 5,
      "clientId": 1,
      "departmentId": 4,
      "name": "Sarah Johnson",
      "role": "Infrastructure Lead",
      "department": "Network Operations",
      "title": "Network Director"
    }
  ],
  "objectiveInitiatives": [
    {
      "id": "oi-001",
      "objectiveId": "obj-001",
      "initiativeId": "init-001",
      "dateLinked": "2025-01-18T11:20:00Z"
    },
    {
      "id": "oi-002",
      "objectiveId": "obj-002",
      "initiativeId": "init-002",
      "dateLinked": "2025-01-25T15:30:00Z"
    },
    {
      "id": "oi-003",
      "objectiveId": "obj-003",
      "initiativeId": "init-003",
      "dateLinked": "2025-02-10T10:45:00Z"
    }
  ],
  "industries": [
    {
      "id": 1,
      "name": "Technology"
    },
    {
      "id": 2,
      "name": "Healthcare"
    },
    {
      "id": 3,
      "name": "Financial Services"
    },
    {
      "id": 4,
      "name": "Manufacturing"
    },
    {
      "id": 5,
      "name": "Retail"
    },
    {
      "id": 6,
      "name": "Energy"
    },
    {
      "id": 7,
      "name": "Education"
    },
    {
      "id": 8,
      "name": "Government"
    },
    {
      "id": 9,
      "name": "Non-Profit"
    }
  ],
  "clientSizes": [
    {
      "id": 1,
      "name": "Small"
    },
    {
      "id": 2,
      "name": "Medium"
    },
    {
      "id": 3,
      "name": "Large"
    },
    {
      "id": 4,
      "name": "Enterprise"
    }
  ],
  "clientStatuses": [
    {
      "id": 1,
      "name": "active"
    },
    {
      "id": 2,
      "name": "inactive"
    },
    {
      "id": 3,
      "name": "suspended"
    },
    {
      "id": 4,
      "name": "pending"
    }
  ],
  "documentCategories": [
    {
      "id": 1,
      "name": "Policies"
    },
    {
      "id": 2,
      "name": "Procedures"
    },
    {
      "id": 3,
      "name": "Compliance"
    },
    {
      "id": 4,
      "name": "Reports"
    },
    {
      "id": 5,
      "name": "Training"
    },
    {
      "id": 6,
      "name": "Documentation"
    },
    {
      "id": 7,
      "name": "General"
    }
  ],
  "documentTypes": [
    {
      "id": 1,
      "name": "PDF"
    },
    {
      "id": 2,
      "name": "DOCX"
    },
    {
      "id": 3,
      "name": "XLSX"
    },
    {
      "id": 4,
      "name": "PPT"
    },
    {
      "id": 5,
      "name": "TXT"
    },
    {
      "id": 6,
      "name": "ZIP"
    }
  ],
  "riskObjectives": [
    {
      "id": "ro-001",
      "riskId": "risk-001",
      "objectiveId": "obj-001",
      "dateLinked": "2025-01-15T10:30:00Z"
    },
    {
      "id": "ro-002",
      "riskId": "risk-002",
      "objectiveId": "obj-002",
      "dateLinked": "2025-01-20T14:45:00Z"
    },
    {
      "id": "ro-003",
      "riskId": "risk-003",
      "objectiveId": "obj-003",
      "dateLinked": "2025-02-05T09:15:00Z"
    }
  ],
  "scanResults": [
    {
      "id": "scan-001",
      "type": "STIG Scan",
      "date": "2025-02-15T10:00:00Z",
      "findings": {
        "high": 2,
        "medium": 5,
        "low": 8
      },
      "status": "Completed",
      "downloadUrl": "#",
      "detailsUrl": "#",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-15T10:00:00Z",
      "updatedAt": "2025-02-15T10:00:00Z"
    },
    {
      "id": "scan-002",
      "type": "SCAP Scan",
      "date": "2025-02-01T14:30:00Z",
      "findings": {
        "high": 1,
        "medium": 3,
        "low": 6
      },
      "status": "Completed",
      "downloadUrl": "#",
      "detailsUrl": "#",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-01T14:30:00Z",
      "updatedAt": "2025-02-01T14:30:00Z"
    }
  ],
  "securityInitiatives": [
    {
      "id": "init-001",
      "clientId": 1,
      "name": "MFA Implementation Project",
      "description": "Project to implement multi-factor authentication across all systems",
      "phase": "Implementation",
      "timeline": "Q2 2025",
      "status": "In Progress",
      "objectiveId": "obj-001",
      "milestones": [
        {
          "id": "ms-001",
          "name": "MFA Solution Selection",
          "completed": true,
          "dueDate": "2025-04-15T00:00:00Z"
        },
        {
          "id": "ms-002",
          "name": "Admin Account MFA Implementation",
          "completed": true,
          "dueDate": "2025-05-15T00:00:00Z"
        },
        {
          "id": "ms-003",
          "name": "User Account MFA Implementation",
          "completed": false,
          "dueDate": "2025-06-15T00:00:00Z"
        }
      ],
      "resources": {
        "team": [
          "Security Team",
          "IT Operations"
        ],
        "budget": "$50,000",
        "tools": [
          "Okta",
          "Microsoft Authenticator"
        ]
      }
    },
    {
      "id": "init-002",
      "clientId": 1,
      "name": "Vulnerability Management Implementation",
      "description": "Establish vulnerability scanning and patch management processes",
      "phase": "Design",
      "timeline": "Q3 2025",
      "status": "Planning",
      "objectiveId": "obj-002",
      "milestones": [
        {
          "id": "ms-004",
          "name": "Vulnerability Scanner Selection",
          "completed": true,
          "dueDate": "2025-05-30T00:00:00Z"
        },
        {
          "id": "ms-005",
          "name": "Initial Vulnerability Assessment",
          "completed": false,
          "dueDate": "2025-07-15T00:00:00Z"
        },
        {
          "id": "ms-006",
          "name": "Patch Management Process Definition",
          "completed": false,
          "dueDate": "2025-08-01T00:00:00Z"
        }
      ],
      "resources": {
        "team": [
          "Security Team",
          "IT Operations"
        ],
        "budget": "$75,000",
        "tools": [
          "Tenable",
          "Microsoft SCCM"
        ]
      }
    },
    {
      "id": "init-003",
      "clientId": 1,
      "name": "Backup and Recovery Enhancement",
      "description": "Improve backup procedures and implement disaster recovery testing",
      "phase": "Implementation",
      "timeline": "Q3 2025",
      "status": "In Progress",
      "objectiveId": "obj-003",
      "milestones": [
        {
          "id": "ms-007",
          "name": "Backup Solution Upgrade",
          "completed": true,
          "dueDate": "2025-05-01T00:00:00Z"
        },
        {
          "id": "ms-008",
          "name": "Automated Backup Implementation",
          "completed": true,
          "dueDate": "2025-06-01T00:00:00Z"
        },
        {
          "id": "ms-009",
          "name": "Recovery Testing Procedure Development",
          "completed": false,
          "dueDate": "2025-07-15T00:00:00Z"
        }
      ],
      "resources": {
        "team": [
          "IT Operations",
          "Disaster Recovery Team"
        ],
        "budget": "$60,000",
        "tools": [
          "Veeam",
          "AWS S3"
        ]
      }
    }
  ],
  "securityObjectives": [
    {
      "id": "obj-001",
      "clientId": 1,
      "name": "Implement Multi-Factor Authentication",
      "description": "Implement MFA across all critical systems to enhance access security",
      "priority": "High",
      "status": "In Progress",
      "progress": 60,
      "dueDate": "2025-06-30T00:00:00Z",
      "metrics": {
        "successCriteria": [
          "MFA enabled for all admin accounts",
          "MFA enabled for all user accounts",
          "MFA compliance monitoring implemented"
        ],
        "currentMetrics": [
          "Admin accounts secured with MFA"
        ]
      }
    },
    {
      "id": "obj-002",
      "clientId": 1,
      "name": "Vulnerability Management Program",
      "description": "Establish a comprehensive vulnerability management program",
      "priority": "High",
      "status": "Planning",
      "progress": 20,
      "dueDate": "2025-08-15T00:00:00Z",
      "metrics": {
        "successCriteria": [
          "Regular vulnerability scanning implemented",
          "Patch management process established",
          "Vulnerability remediation SLAs defined"
        ],
        "currentMetrics": []
      }
    },
    {
      "id": "obj-003",
      "clientId": 1,
      "name": "Data Backup and Recovery",
      "description": "Improve data backup procedures and implement disaster recovery testing",
      "priority": "Medium",
      "status": "In Progress",
      "progress": 40,
      "dueDate": "2025-07-20T00:00:00Z",
      "metrics": {
        "successCriteria": [
          "Automated daily backups implemented",
          "Quarterly recovery testing established",
          "Offsite backup storage configured"
        ],
        "currentMetrics": [
          "Automated daily backups implemented"
        ]
      }
    }
  ],
  "artifactTypes": [
    {
      "id": "type-1",
      "name": "Technical Documentation"
    },
    {
      "id": "type-2",
      "name": "Policy Documentation"
    },
    {
      "id": "type-3",
      "name": "Security Assessment"
    },
    {
      "id": "type-4",
      "name": "Implementation Evidence"
    },
    {
      "id": "type-5",
      "name": "Training Records"
    },
    {
      "id": "type-6",
      "name": "Audit Reports"
    },
    {
      "id": "type-7",
      "name": "Configuration Files"
    },
    {
      "id": "type-8",
      "name": "System Logs"
    },
    {
      "id": "type-9",
      "name": "Incident Reports"
    },
    {
      "id": "type-10",
      "name": "Other"
    }
  ],
  "sys-001": {
    "phases": [
      {
        "id": 1,
        "title": "Initial Assessment",
        "description": "System discovery and initial evaluation",
        "progress": 65,
        "sections": [
          {
            "title": "System Discovery",
            "tasks": [
              {
                "description": "Conduct initial system inventory",
                "completed": true
              },
              {
                "description": "Document system purpose and functions",
                "completed": true
              },
              {
                "description": "Identify system components and boundaries",
                "completed": false
              },
              {
                "description": "Map data flows and interconnections",
                "completed": false
              },
              {
                "description": "Review existing security documentation",
                "completed": true
              }
            ]
          },
          {
            "title": "Gap Analysis",
            "tasks": [
              {
                "description": "Compare current state against required controls",
                "completed": true
              },
              {
                "description": "Document existing security measures",
                "completed": false
              },
              {
                "description": "Identify missing controls and documentation",
                "completed": false
              },
              {
                "description": "Assess current security practices",
                "completed": true
              },
              {
                "description": "Review existing policies and procedures",
                "completed": true
              }
            ]
          },
          {
            "title": "Environment Analysis",
            "tasks": [
              {
                "description": "Evaluate hosting environment (Cloud/On-Prem/Hybrid)",
                "completed": true
              },
              {
                "description": "Document infrastructure components",
                "completed": true
              },
              {
                "description": "Review network architecture",
                "completed": false
              },
              {
                "description": "Assess system dependencies",
                "completed": true
              },
              {
                "description": "Identify critical system interfaces",
                "completed": false
              }
            ]
          },
          {
            "title": "Stakeholder Analysis",
            "tasks": [
              {
                "description": "Identify key system stakeholders",
                "completed": true
              },
              {
                "description": "Document system owners and operators",
                "completed": true
              },
              {
                "description": "Map security responsibilities",
                "completed": false
              },
              {
                "description": "Establish points of contact",
                "completed": true
              },
              {
                "description": "Define communication channels",
                "completed": false
              }
            ]
          }
        ]
      }
    ],
    "informationTypes": {
      "types": [],
      "customTypes": "",
      "sensitivity": "",
      "regulations": [],
      "ownership": "",
      "dataFlows": "",
      "dataLifecycle": "",
      "privacyRequirements": ""
    },
    "impactAnalysis": {
      "confidentiality": "",
      "integrity": "",
      "availability": "",
      "rationale": "",
      "categorization": ""
    },
    "securityObjectives": {
      "objectives": [],
      "requirements": [],
      "criticalFunctions": [],
      "businessImpact": "",
      "priorities": []
    },
    "progress": {
      "progress": 30,
      "sections": {
        "informationTypes": "not_started",
        "impactAnalysis": "not_started",
        "securityObjectives": "not_started"
      }
    }
  },
  "client-1": {
    "sys-001": {
      "riskAssessment": {
        "risks": [
          {
            "id": "RISK-001",
            "description": "Insufficient access controls",
            "likelihood": "high",
            "impact": "high",
            "status": "open"
          }
        ],
        "nonCompliantControls": [
          {
            "controlId": "AC-2",
            "title": "Account Management",
            "status": "non-compliant",
            "findings": "Missing automated account management procedures"
          }
        ]
      },
      "package": {
        "completed": [
          "System Security Plan",
          "Risk Assessment Report"
        ],
        "pending": [
          "Privacy Impact Assessment",
          "Contingency Plan"
        ],
        "executiveSummary": "System implements moderate security controls with some gaps identified.",
        "status": "in-progress",
        "validationStatus": "pending",
        "completionPercentage": 65
      },
      "decision": {
        "result": "pending",
        "official": "",
        "date": "",
        "expirationDate": "",
        "justification": "",
        "conditions": [],
        "boundary": "System includes all components within the development network segment."
      }
    }
  },
  "componentTypes": [
    {
      "id": "type-1",
      "name": "PHYSICAL"
    },
    {
      "id": "type-2",
      "name": "VIRTUAL"
    },
    {
      "id": "type-3",
      "name": "NETWORK"
    },
    {
      "id": "type-4",
      "name": "SECURITY_APPLIANCE"
    },
    {
      "id": "comp-1",
      "name": "Server"
    },
    {
      "id": "comp-2",
      "name": "Database"
    },
    {
      "id": "comp-3",
      "name": "Application"
    },
    {
      "id": "comp-4",
      "name": "Network Device"
    },
    {
      "id": "comp-5",
      "name": "Security Appliance"
    }
  ],
  "componentStatuses": [
    {
      "id": "status-1",
      "name": "ACTIVE"
    },
    {
      "id": "status-2",
      "name": "INACTIVE"
    },
    {
      "id": "status-3",
      "name": "MAINTENANCE"
    },
    {
      "id": "status-4",
      "name": "DECOMMISSIONED"
    }
  ],
  "controls": [
    {
      "id": "AC-1",
      "title": "Access Control Policy and Procedures",
      "status": "Compliant",
      "evidence": "Access Control Policy v2.1 implemented and reviewed",
      "notes": "Annual review completed",
      "lastUpdated": "2025-02-10T09:00:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-10T09:00:00Z",
      "updatedAt": "2025-02-10T09:00:00Z"
    },
    {
      "id": "AC-2",
      "title": "Account Management",
      "status": "Non-Compliant",
      "evidence": "Automated account review process not implemented",
      "notes": "Implementation in progress",
      "lastUpdated": "2025-02-11T15:30:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-11T15:30:00Z",
      "updatedAt": "2025-02-11T15:30:00Z"
    },
    {
      "id": "AC-3",
      "title": "Access Enforcement",
      "status": "Compliant",
      "evidence": "Role-based access control implemented",
      "notes": "Verified during testing",
      "lastUpdated": "2025-02-12T11:20:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-12T11:20:00Z",
      "updatedAt": "2025-02-12T11:20:00Z"
    },
    {
      "id": "AC-4",
      "title": "Information Flow Enforcement",
      "status": "Not-Applicable",
      "evidence": "System does not process classified information",
      "notes": "Approved deviation",
      "lastUpdated": "2025-02-13T14:15:00Z",
      "clientId": 1,
      "systemId": "sys-001",
      "assessmentPlanId": "ap-001",
      "createdAt": "2025-02-13T14:15:00Z",
      "updatedAt": "2025-02-13T14:15:00Z"
    }
  ],
  "systemStatus": [
    {
      "id": "status-1",
      "name": "DRAFT"
    },
    {
      "id": "status-2",
      "name": "IN_PROGRESS"
    },
    {
      "id": "status-3",
      "name": "COMPLETED"
    },
    {
      "id": "status-4",
      "name": "ARCHIVED"
    }
  ],
  "atoStatus": [
    {
      "id": "ato-1",
      "name": "NOT_STARTED"
    },
    {
      "id": "ato-2",
      "name": "IN_PROGRESS"
    },
    {
      "id": "ato-3",
      "name": "APPROVED"
    },
    {
      "id": "ato-4",
      "name": "DENIED"
    },
    {
      "id": "ato-5",
      "name": "EXPIRED"
    }
  ],
  "securityLevel": [
    {
      "id": "sec-1",
      "name": "low"
    },
    {
      "id": "sec-2",
      "name": "moderate"
    },
    {
      "id": "sec-3",
      "name": "high"
    }
  ],
  "informationLevel": [
    {
      "id": "info-1",
      "name": "public"
    },
    {
      "id": "info-2",
      "name": "internal"
    },
    {
      "id": "info-3",
      "name": "confidential"
    },
    {
      "id": "info-4",
      "name": "restricted"
    }
  ],
  "systemCategory": [
    {
      "id": "cat-1",
      "name": "Mission Critical"
    },
    {
      "id": "cat-2",
      "name": "Business Critical"
    },
    {
      "id": "cat-3",
      "name": "Business Operational"
    },
    {
      "id": "cat-4",
      "name": "Business Support"
    }
  ],
  "networkTypes": [
    {
      "id": "net-1",
      "name": "LAN"
    },
    {
      "id": "net-2",
      "name": "WAN"
    },
    {
      "id": "net-3",
      "name": "VPN"
    },
    {
      "id": "net-4",
      "name": "Cloud"
    },
    {
      "id": "net-5",
      "name": "Hybrid"
    }
  ],
  "procedureTypes": [
    {
      "id": "proc-1",
      "name": "Backup"
    },
    {
      "id": "proc-2",
      "name": "Recovery"
    },
    {
      "id": "proc-3",
      "name": "Maintenance"
    },
    {
      "id": "proc-4",
      "name": "Security"
    },
    {
      "id": "proc-5",
      "name": "Compliance"
    }
  ],
  "commonPorts": [
    {
      "id": 1,
      "port": 80,
      "service": "HTTP"
    },
    {
      "id": 2,
      "port": 443,
      "service": "HTTPS"
    },
    {
      "id": 3,
      "port": 22,
      "service": "SSH"
    },
    {
      "id": 4,
      "port": 3306,
      "service": "MySQL"
    },
    {
      "id": 5,
      "port": 5432,
      "service": "PostgreSQL"
    }
  ],
  "processSteps": [
    {
      "id": 1,
      "title": "Initial Assessment",
      "description": "System discovery and initial evaluation",
      "sections": [
        {
          "title": "System Discovery",
          "tasks": [
            "Conduct initial system inventory",
            "Document system purpose and functions",
            "Identify system components and boundaries",
            "Map data flows and interconnections",
            "Review existing security documentation"
          ]
        },
        {
          "title": "Gap Analysis",
          "tasks": [
            "Compare current state against required controls",
            "Document existing security measures",
            "Identify missing controls and documentation",
            "Assess current security practices",
            "Review existing policies and procedures"
          ]
        },
        {
          "title": "Environment Analysis",
          "tasks": [
            "Evaluate hosting environment (Cloud/On-Prem/Hybrid)",
            "Document infrastructure components",
            "Review network architecture",
            "Assess system dependencies",
            "Identify critical system interfaces"
          ]
        },
        {
          "title": "Stakeholder Analysis",
          "tasks": [
            "Identify key system stakeholders",
            "Document system owners and operators",
            "Map security responsibilities",
            "Establish points of contact",
            "Define communication channels"
          ]
        }
      ]
    },
    {
      "id": 2,
      "title": "System Categorization",
      "description": "Information classification and impact analysis",
      "sections": [
        {
          "title": "Information Types",
          "tasks": [
            "Identify all information types",
            "Document data sensitivity levels",
            "Map regulatory requirements",
            "Define data ownership",
            "Document data flows"
          ]
        },
        {
          "title": "Impact Analysis",
          "tasks": [
            "Assess confidentiality impact",
            "Evaluate integrity impact",
            "Determine availability impact",
            "Document impact rationale",
            "Define system categorization"
          ]
        },
        {
          "title": "Security Objectives",
          "tasks": [
            "Document security objectives",
            "Define protection requirements",
            "Identify critical functions",
            "Map business impact",
            "Establish security priorities"
          ]
        }
      ]
    },
    {
      "id": 3,
      "title": "Security Controls",
      "description": "Control selection and implementation",
      "sections": [
        {
          "title": "Baseline Selection",
          "tasks": [
            "Select security control baseline",
            "Document baseline rationale",
            "Map regulatory requirements",
            "Identify applicable overlays",
            "Define supplemental controls"
          ]
        },
        {
          "title": "Control Implementation",
          "tasks": [
            "Configure security settings",
            "Deploy security tools",
            "Implement procedures",
            "Document configurations",
            "Validate implementations"
          ]
        },
        {
          "title": "System Security Plan",
          "tasks": [
            "Document system description",
            "Detail control implementations",
            "Map security responsibilities",
            "Document architecture",
            "Define boundaries"
          ]
        }
      ]
    },
    {
      "id": 4,
      "title": "Assessment",
      "description": "Security testing and evaluation",
      "sections": [
        {
          "title": "Assessment Planning",
          "tasks": [
            "Develop assessment plan",
            "Define testing procedures",
            "Identify assessment tools",
            "Create test cases",
            "Document methodology"
          ]
        },
        {
          "title": "Security Testing",
          "tasks": [
            "Conduct vulnerability scans",
            "Perform penetration testing",
            "Test control effectiveness",
            "Document test results",
            "Validate configurations"
          ]
        },
        {
          "title": "Control Assessment",
          "tasks": [
            "Review control evidence",
            "Test control effectiveness",
            "Document findings",
            "Identify gaps",
            "Assess residual risk"
          ]
        }
      ]
    },
    {
      "id": 5,
      "title": "Authorization",
      "description": "ATO package and decision",
      "sections": [
        {
          "title": "Risk Assessment",
          "tasks": [
            "Analyze assessment results",
            "Document identified risks",
            "Assess risk levels",
            "Define mitigations",
            "Create POA&M"
          ]
        },
        {
          "title": "Package Preparation",
          "tasks": [
            "Compile authorization package",
            "Review documentation",
            "Validate completeness",
            "Prepare executive summary",
            "Document recommendations"
          ]
        },
        {
          "title": "Authorization Decision",
          "tasks": [
            "Present to authorizing official",
            "Review residual risks",
            "Document decision",
            "Define conditions",
            "Establish authorization boundary"
          ]
        }
      ]
    },
    {
      "id": 6,
      "title": "Continuous Monitoring",
      "description": "Ongoing security maintenance",
      "sections": [
        {
          "title": "Monitoring Program",
          "tasks": [
            "Define monitoring strategy",
            "Select security metrics",
            "Establish frequency",
            "Document procedures",
            "Define roles"
          ]
        },
        {
          "title": "Change Management",
          "tasks": [
            "Document change procedures",
            "Review security impact",
            "Update documentation",
            "Track modifications",
            "Maintain baseline"
          ]
        },
        {
          "title": "Maintenance",
          "tasks": [
            "Review security posture",
            "Update documentation",
            "Maintain evidence",
            "Track compliance",
            "Report status"
          ]
        }
      ]
    }
  ],
  "technical": [
    {
      "id": "AC-1",
      "number": "AC-1",
      "family": "Access Control",
      "title": "Access Control Policy and Procedures",
      "description": "The organization develops, documents, and disseminates an access control policy and procedures.",
      "implementationStatus": "Partially Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [
        {
          "id": "ev-1",
          "title": "Access Control Policy.pdf",
          "dateAdded": "2024-02-19"
        }
      ],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AC-2",
      "number": "AC-2",
      "family": "Access Control",
      "title": "Account Management",
      "description": "The organization manages information system accounts, including establishing, activating, modifying, reviewing, disabling, and removing accounts.",
      "implementationStatus": "Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AC-3",
      "number": "AC-3",
      "family": "Access Control",
      "title": "Access Enforcement",
      "description": "The system enforces approved authorizations for logical access to information and system resources.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "MODERATE",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    }
  ],
  "operational": [
    {
      "id": "AT-1",
      "number": "AT-1",
      "family": "Awareness and Training",
      "title": "Security Awareness and Training Policy and Procedures",
      "description": "The organization develops, documents, and disseminates security awareness and training policies and procedures.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AT-2",
      "number": "AT-2",
      "family": "Awareness and Training",
      "title": "Security Awareness Training",
      "description": "The organization provides basic security awareness training to information system users.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "AT-3",
      "number": "AT-3",
      "family": "Awareness and Training",
      "title": "Role-Based Security Training",
      "description": "The organization provides role-based security training to personnel with assigned security roles and responsibilities.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "MODERATE",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    }
  ],
  "management": [
    {
      "id": "CA-1",
      "number": "CA-1",
      "family": "Security Assessment",
      "title": "Security Assessment and Authorization Policies and Procedures",
      "description": "The organization develops, documents, and disseminates security assessment and authorization policies and procedures.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "CA-2",
      "number": "CA-2",
      "family": "Security Assessment",
      "title": "Security Assessments",
      "description": "The organization develops a security assessment plan and conducts security assessments.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "LOW",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    },
    {
      "id": "CA-3",
      "number": "CA-3",
      "family": "Security Assessment",
      "title": "System Interconnections",
      "description": "The organization documents and controls system interconnections.",
      "implementationStatus": "Not Implemented",
      "implementationDetails": "",
      "baselineImpact": "MODERATE",
      "evidence": [],
      "lastAssessed": "2024-02-19"
    }
  ],
  "families": [
    {
      "id": "AC",
      "name": "Access Control"
    },
    {
      "id": "AT",
      "name": "Awareness and Training"
    },
    {
      "id": "AU",
      "name": "Audit and Accountability"
    },
    {
      "id": "CA",
      "name": "Security Assessment and Authorization"
    },
    {
      "id": "CM",
      "name": "Configuration Management"
    },
    {
      "id": "CP",
      "name": "Contingency Planning"
    },
    {
      "id": "IA",
      "name": "Identification and Authentication"
    },
    {
      "id": "IR",
      "name": "Incident Response"
    },
    {
      "id": "MA",
      "name": "Maintenance"
    },
    {
      "id": "MP",
      "name": "Media Protection"
    },
    {
      "id": "PE",
      "name": "Physical and Environmental Protection"
    },
    {
      "id": "PL",
      "name": "Planning"
    },
    {
      "id": "PS",
      "name": "Personnel Security"
    },
    {
      "id": "RA",
      "name": "Risk Assessment"
    },
    {
      "id": "SA",
      "name": "System and Services Acquisition"
    },
    {
      "id": "SC",
      "name": "System and Communications Protection"
    },
    {
      "id": "SI",
      "name": "System and Information Integrity"
    }
  ],
  "overallProgress": {
    "value": 35
  },
  "statusBreakdown": {
    "Implemented": 12,
    "Partially Implemented": 24,
    "Not Implemented": 45,
    "Not Applicable": 8
  },
  "systems": [
    {
      "id": "sys-001",
      "clientId": 1,
      "name": "Core Banking Platform",
      "type": "Major Application",
      "category": "Mission Critical",
      "securityLevel": "high",
      "informationLevel": "confidential",
      "status": "IN_PROGRESS",
      "atoStatus": "IN_PROGRESS",
      "currentPhase": "initial_assessment",
      "createdAt": "2025-02-20T10:00:00Z",
      "updatedAt": "2025-02-20T10:30:00Z",
      "lastAssessment": null,
      "phaseProgress": {
        "initial-assessment": 65,
        "system-categorization": 30,
        "security-controls": 10,
        "assessment": 0,
        "ato-authorization": 0,
        "continuous-monitoring": 0
      },
      "phases": {
        "initialAssessment": {
          "discovery": {
            "status": "in_progress",
            "completedItems": [
              "System inventory",
              "System purpose documentation"
            ],
            "pendingItems": [
              "Data flow mapping",
              "System boundaries"
            ]
          },
          "gapAnalysis": {
            "status": "in_progress",
            "completedItems": [
              "Current state assessment"
            ],
            "pendingItems": [
              "Control gap identification",
              "Security practice review"
            ]
          },
          "environment": {
            "status": "completed",
            "details": {
              "hosting": "Hybrid",
              "components": [
                "Web Servers",
                "Database Clusters",
                "Load Balancers"
              ]
            }
          },
          "stakeholders": {
            "status": "not_started",
            "identified": [],
            "pending": [
              "System Owner",
              "Security Officer",
              "Operations Team"
            ]
          }
        },
        "systemCategorization": {
          "infoTypes": {
            "status": "in_progress",
            "identified": [
              "Customer Data",
              "Transaction Records"
            ],
            "pending": [
              "Audit Logs",
              "Configuration Data"
            ]
          },
          "impact": {
            "status": "not_started",
            "assessments": {
              "confidentiality": null,
              "integrity": null,
              "availability": null
            }
          },
          "objectives": {
            "status": "not_started",
            "defined": [],
            "pending": [
              "Data Protection Goals",
              "System Availability Targets",
              "Compliance Requirements"
            ]
          }
        },
        "securityControls": {
          "baseline": {
            "status": "not_started",
            "selected": null,
            "rationale": null
          },
          "tailoring": {
            "status": "not_started",
            "completedControls": [],
            "pendingControls": []
          },
          "implementation": {
            "status": "not_started",
            "implemented": [],
            "pending": []
          },
          "documentation": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Security Policies",
              "Procedures",
              "Training Materials"
            ]
          }
        },
        "assessment": {
          "planning": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Assessment Plan",
              "Test Procedures",
              "Tool Selection"
            ]
          },
          "testing": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Vulnerability Scans",
              "Penetration Tests",
              "Control Testing"
            ]
          },
          "review": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Documentation Review",
              "Evidence Validation",
              "Findings Documentation"
            ]
          }
        },
        "authorization": {
          "riskAssessment": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Risk Analysis",
              "Mitigation Planning",
              "Residual Risk Assessment"
            ]
          },
          "package": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Package Assembly",
              "Documentation Review",
              "Executive Summary"
            ]
          },
          "decision": {
            "status": "not_started",
            "result": null,
            "conditions": []
          }
        },
        "continuousMonitoring": {
          "program": {
            "status": "not_started",
            "defined": [],
            "pending": [
              "Monitoring Strategy",
              "Metrics Definition",
              "Reporting Requirements"
            ]
          },
          "assessment": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "Control Effectiveness",
              "Metric Collection",
              "Risk Updates"
            ]
          },
          "maintenance": {
            "status": "not_started",
            "completed": [],
            "pending": [
              "System Updates",
              "Documentation Maintenance",
              "Training Updates"
            ]
          }
        }
      },
      "components": [],
      "networks": [],
      "ports": [],
      "procedures": [],
      "artifacts": [],
      "boundaries": {
        "physical": [],
        "network": [],
        "security": []
      },
      "compliance": {
        "nist": 0,
        "hipaa": 0,
        "pci": 0
      }
    }
  ],
  "enums": {
    "systemStatus": [
      {
        "id": 1,
        "name": "active"
      },
      {
        "id": 2,
        "name": "inactive"
      },
      {
        "id": 3,
        "name": "maintenance"
      },
      {
        "id": 4,
        "name": "retired"
      }
    ],
    "atoStatus": [
      {
        "id": 1,
        "name": "not_started"
      },
      {
        "id": 2,
        "name": "in_progress"
      },
      {
        "id": 3,
        "name": "approved"
      },
      {
        "id": 4,
        "name": "denied"
      },
      {
        "id": 5,
        "name": "expired"
      }
    ],
    "securityLevel": [
      {
        "id": 1,
        "name": "low"
      },
      {
        "id": 2,
        "name": "moderate"
      },
      {
        "id": 3,
        "name": "high"
      }
    ],
    "informationLevel": [
      {
        "id": 1,
        "name": "public"
      },
      {
        "id": 2,
        "name": "internal"
      },
      {
        "id": 3,
        "name": "confidential"
      },
      {
        "id": 4,
        "name": "restricted"
      }
    ],
    "systemCategory": [
      {
        "id": 1,
        "name": "financial"
      },
      {
        "id": 2,
        "name": "operational"
      },
      {
        "id": 3,
        "name": "administrative"
      },
      {
        "id": 4,
        "name": "security"
      }
    ],
    "networkTypes": [
      {
        "id": 1,
        "name": "LAN"
      },
      {
        "id": 2,
        "name": "WAN"
      },
      {
        "id": 3,
        "name": "Cloud"
      },
      {
        "id": 4,
        "name": "VPN"
      },
      {
        "id": 5,
        "name": "DMZ"
      }
    ],
    "componentTypes": [
      {
        "id": 1,
        "name": "Server"
      },
      {
        "id": 2,
        "name": "Database"
      },
      {
        "id": 3,
        "name": "Application"
      },
      {
        "id": 4,
        "name": "Network Device"
      },
      {
        "id": 5,
        "name": "Security Appliance"
      }
    ],
    "procedureTypes": [
      {
        "id": 1,
        "name": "Backup"
      },
      {
        "id": 2,
        "name": "Recovery"
      },
      {
        "id": 3,
        "name": "Maintenance"
      },
      {
        "id": 4,
        "name": "Security"
      },
      {
        "id": 5,
        "name": "Monitoring"
      }
    ]
  }
}

================
File: generateDb.js
================
import { readFileSync, readdirSync, statSync, writeFileSync } from 'fs';
import { join, extname } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Function to read JSON file
const readJsonFile = (filePath) => {
  try {
    const data = readFileSync(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error(`Error reading ${filePath}:`, error);
    return {};
  }
};

// Function to recursively get all JSON files in a directory
const getJsonFiles = (dir) => {
  let results = [];
  const items = readdirSync(dir);

  items.forEach((item) => {
    const fullPath = join(dir, item);
    const stat = statSync(fullPath);

    if (stat.isDirectory()) {
      results = results.concat(getJsonFiles(fullPath));
    } else if (extname(item) === '.json' && item !== 'db.json') {
      results.push(fullPath);
    }
  });

  return results;
};

// Function to merge data preserving and concatenating arrays
const mergeData = (target, source) => {
  if (!target) target = Array.isArray(source) ? [] : {};
  
  Object.keys(source).forEach(key => {
    // Special handling for users array from auth/users.json
    if (key === 'users' && Array.isArray(source[key])) {
      if (!Array.isArray(target[key])) {
        target[key] = [];
      }
      // Add each auth user if they don't already exist
      source[key].forEach(sourceUser => {
        const existingUser = target[key].find(targetUser => 
          targetUser && targetUser.email === sourceUser.email
        );
        if (!existingUser) {
          target[key].push(sourceUser);
        }
      });
    }
    // Handle other arrays
    else if (Array.isArray(source[key])) {
      if (!Array.isArray(target[key])) {
        target[key] = [];
      }
      
      // Merge arrays
      source[key].forEach(sourceItem => {
        if (typeof sourceItem === 'object' && sourceItem !== null && 'id' in sourceItem) {
          // For objects with IDs, update or add
          const existingItem = target[key].find(targetItem => 
            targetItem && typeof targetItem === 'object' && targetItem.id === sourceItem.id
          );
          if (existingItem) {
            Object.assign(existingItem, sourceItem);
          } else {
            target[key].push(sourceItem);
          }
        } else {
          // For primitive values or objects without IDs, just add if not exists
          const exists = target[key].some(targetItem => 
            JSON.stringify(targetItem) === JSON.stringify(sourceItem)
          );
          if (!exists) {
            target[key].push(sourceItem);
          }
        }
      });
    }
    // Handle nested objects
    else if (typeof source[key] === 'object' && source[key] !== null) {
      target[key] = mergeData(target[key] || {}, source[key]);
    }
    // Handle primitive values
    else {
      target[key] = source[key];
    }
  });
  
  return target;
};

// Main function to generate db.json
const generateDb = () => {
  const dataDir = join(__dirname, 'data');
  const outputFile = join(__dirname, 'db.json');
  const jsonFiles = getJsonFiles(dataDir);

  console.log('Found JSON files:', jsonFiles);

  // Combine all JSON data
  const combinedData = jsonFiles.reduce((acc, file) => {
    console.log('Processing file:', file);
    const data = readJsonFile(file);
    return mergeData(acc, data);
  }, {});

  // Add reference data
  combinedData.enums = {
    systemStatus: [
      { id: 1, name: "active" },
      { id: 2, name: "inactive" },
      { id: 3, name: "maintenance" },
      { id: 4, name: "retired" }
    ],
    atoStatus: [
      { id: 1, name: "not_started" },
      { id: 2, name: "in_progress" },
      { id: 3, name: "approved" },
      { id: 4, name: "denied" },
      { id: 5, name: "expired" }
    ],
    securityLevel: [
      { id: 1, name: "low" },
      { id: 2, name: "moderate" },
      { id: 3, name: "high" }
    ],
    informationLevel: [
      { id: 1, name: "public" },
      { id: 2, name: "internal" },
      { id: 3, name: "confidential" },
      { id: 4, name: "restricted" }
    ],
    systemCategory: [
      { id: 1, name: "financial" },
      { id: 2, name: "operational" },
      { id: 3, name: "administrative" },
      { id: 4, name: "security" }
    ],
    networkTypes: [
      { id: 1, name: "LAN" },
      { id: 2, name: "WAN" },
      { id: 3, name: "Cloud" },
      { id: 4, name: "VPN" },
      { id: 5, name: "DMZ" }
    ],
    componentTypes: [
      { id: 1, name: "Server" },
      { id: 2, name: "Database" },
      { id: 3, name: "Application" },
      { id: 4, name: "Network Device" },
      { id: 5, name: "Security Appliance" }
    ],
    procedureTypes: [
      { id: 1, name: "Backup" },
      { id: 2, name: "Recovery" },
      { id: 3, name: "Maintenance" },
      { id: 4, name: "Security" },
      { id: 5, name: "Monitoring" }
    ]
  };

  combinedData.commonPorts = [
    { id: 1, port: 80, service: "HTTP" },
    { id: 2, port: 443, service: "HTTPS" },
    { id: 3, port: 22, service: "SSH" },
    { id: 4, port: 3306, service: "MySQL" },
    { id: 5, port: 5432, service: "PostgreSQL" }
  ];

  // Write the combined data to db.json
  writeFileSync(outputFile, JSON.stringify(combinedData, null, 2));
  console.log('Generated db.json successfully');
};

// Run the generator
generateDb();

================
File: mockDb.js
================
// src/services/mocks/mockDb.js
// Import client data
import clientsData from './data/client_data/clients.json';
import securityObjectivesData from './data/client_data/securityObjectives.json';
import securityInitiativesData from './data/client_data/securityInitiatives.json';
import assessmentsData from './data/client_data/assessments.json';
import clientUsersData from './data/client_data/client_users.json';
import departmentsData from './data/client_data/departments.json';
import documentsData from './data/client_data/documents.json';
import findingsToRiskData from './data/client_data/findings_to_risk.json';
import keyPersonnelData from './data/client_data/key_personnel.json';
import objectiveToInitiativeData from './data/client_data/objective_to_initiative.json';
import referenceData from './data/client_data/reference_data.json';
import riskToObjectiveData from './data/client_data/risk_to_objective.json';
import scanResultsData from './data/client_data/scan_results.json';
import advancedQuestionsData from './data/client_data/advanced_questions.json';
import basicQuestionsData from './data/client_data/basic_questions.json';
import authorizationData from './data/client_data/authorization.json';
import incidentData from './data/client_data/incidents/incidents.json';
import incidentReferenceData from './data/client_data/incident_reference_data.json';

// Import system data
import systemsData from './data/system/systems.json';
import atoTrackerData from './data/system/ato_tracker.json';
import systemAuthorizationData from './data/system/authorization.json';
import categorizationData from './data/system/categorization.json';
import controlsData from './data/system/controls.json';
import enumsData from './data/system/enums.json';
import processStepsData from './data/system/process_steps.json';
import systemPackagesData from './data/system/system_packages.json';

// Import auth data
import usersData from './data/auth/users.json';

// Create a flatter structure for the mock database
const mockDb = {
  // Client domain
  clients: clientsData.clients || [],
  securityObjectives: securityObjectivesData.securityObjectives || [],
  securityInitiatives: securityInitiativesData.securityInitiatives || [],
  assessments: assessmentsData.assessments || [],
  clientUsers: clientUsersData.client_users || [],
  departments: departmentsData.departments || [],
  documents: documentsData.documents || [],
  findingsToRisk: findingsToRiskData.findings_to_risk || [],
  keyPersonnel: keyPersonnelData.key_personnel || [],
  objectiveToInitiative: objectiveToInitiativeData.objective_to_initiative || [],
  referenceData: referenceData.reference_data || [],
  riskToObjective: riskToObjectiveData.risk_to_objective || [],
  scanResults: scanResultsData.scan_results || [],
  advancedQuestions: advancedQuestionsData.advanced_questions || [],
  basicQuestions: basicQuestionsData.basic_questions || [],
  authorization: authorizationData.authorization || [],
  incidents: incidentData.incidents || [],
  
  // Incident reference data
  incidentTypes: incidentReferenceData.incidentTypes || [],
  incidentSeverities: incidentReferenceData.incidentSeverities || [],
  incidentStatuses: incidentReferenceData.incidentStatuses || [],
  incidentPriorities: incidentReferenceData.incidentPriorities || [],
  actionTypes: incidentReferenceData.actionTypes || [],
  teams: incidentReferenceData.teams || [],
  systemTypes: incidentReferenceData.systemTypes || [],
  
  // System domain
  systems: systemsData.systems || [],
  atoTracker: atoTrackerData.ato_tracker || [],
  systemAuthorization: systemAuthorizationData.authorization || [],
  categorization: categorizationData.categorization || [],
  controls: controlsData.controls || [],
  processSteps: processStepsData.process_steps || [],
  systemPackages: systemPackagesData.system_packages || [],
  
  // Auth domain
  users: usersData.users || [],
  
  // Client user roles and permissions - this is what we need to fix
  roles: clientUsersData.roles || [], // Use client user roles directly
  rolePermissions: clientUsersData.rolePermissions || [],
  permissions: clientUsersData.permissions || [],
  userStatus: clientUsersData.userStatus || [],
  titles: clientUsersData.titles || [],
  
  // Reference data (enums)
  enums: {
    objectiveStatuses: ['Planning', 'In Progress', 'Completed', 'On Hold', 'Cancelled'],
    priorityLevels: ['High', 'Medium', 'Low'],
    riskLevels: ['Critical', 'High', 'Medium', 'Low', 'Negligible'],
    riskStatuses: ['Open', 'Mitigated', 'Accepted', 'Transferred', 'Closed'],
    incidentStatuses: ['Open', 'Investigating', 'Resolved', 'Closed'],
    incidentSeverities: ['Critical', 'High', 'Medium', 'Low'],
    ...enumsData.enums || {}
  }
};

// Helper to generate unique IDs
export const generateId = (prefix = '') => {
  return `${prefix}${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
};

// Helper to add delay to simulate network latency
export const delay = (ms = 300) => new Promise(resolve => setTimeout(resolve, ms));

export default mockDb;

================
File: repositories/Repository.js
================
// src/services/mocks/repositories/Repository.js
import mockDb, { generateId, delay } from '../mockDb';
import { ApiError } from '../../utils/apiHelpers';

export class Repository {
  constructor(entityName) {
    this.entityName = entityName;
    this.collection = mockDb[entityName] || [];
  }

  // Find all entities with optional filtering
  async findAll(queryParams = {}) {
    await delay();
    
    let results = [...this.collection];
    
    // Apply filters from queryParams
    Object.entries(queryParams).forEach(([key, value]) => {
      if (key === 'sort' || key === 'order' || key === 'limit' || key === 'offset') {
        return; // Skip special params
      }
      
      results = results.filter(item => {
        if (typeof value === 'string' && value.includes(',')) {
          // Handle array values (e.g., status=open,closed)
          const values = value.split(',');
          return values.includes(String(item[key]));
        }
        return String(item[key]) === String(value);
      });
    });
    
    // Apply sorting
    if (queryParams.sort) {
      const sortField = queryParams.sort;
      const sortOrder = queryParams.order === 'desc' ? -1 : 1;
      
      results.sort((a, b) => {
        if (a[sortField] < b[sortField]) return -1 * sortOrder;
        if (a[sortField] > b[sortField]) return 1 * sortOrder;
        return 0;
      });
    }
    
    // Apply pagination
    if (queryParams.limit) {
      const limit = parseInt(queryParams.limit, 10);
      const offset = parseInt(queryParams.offset, 10) || 0;
      
      results = results.slice(offset, offset + limit);
    }
    
    return results;
  }

  // Find entity by ID
  async findById(id) {
    await delay();
    
    const entity = this.collection.find(item => String(item.id) === String(id));
    
    if (!entity) {
      throw new ApiError(`${this.entityName} not found with id: ${id}`, 404);
    }
    
    return entity;
  }

  // Create new entity
  async create(data) {
    await delay();
    
    const newEntity = {
      id: data.id || generateId(this.entityName.slice(0, 3) + '-'),
      ...data,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    this.collection.push(newEntity);
    mockDb[this.entityName] = this.collection;
    
    return newEntity;
  }

  // Update entity
  async update(id, data) {
    await delay();
    
    const index = this.collection.findIndex(item => String(item.id) === String(id));
    
    if (index === -1) {
      throw new ApiError(`${this.entityName} not found with id: ${id}`, 404);
    }
    
    const updatedEntity = {
      ...this.collection[index],
      ...data,
      id: this.collection[index].id, // Ensure ID doesn't change
      updatedAt: new Date().toISOString()
    };
    
    this.collection[index] = updatedEntity;
    mockDb[this.entityName] = this.collection;
    
    return updatedEntity;
  }

  // Partial update entity
  async partialUpdate(id, data) {
    return this.update(id, data);
  }

  // Delete entity
  async delete(id) {
    await delay();
    
    const index = this.collection.findIndex(item => String(item.id) === String(id));
    
    if (index === -1) {
      throw new ApiError(`${this.entityName} not found with id: ${id}`, 404);
    }
    
    this.collection.splice(index, 1);
    mockDb[this.entityName] = this.collection;
    
    return { success: true, message: `${this.entityName} deleted successfully` };
  }
}

// Factory function to get repository instance
export const getRepository = (entityName) => {
  if (!mockDb[entityName]) {
    mockDb[entityName] = [];
  }
  
  return new Repository(entityName);
};

================
File: server.js
================
/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
// src/services/mocks/server.js
import express from 'express';
import cors from 'cors';
import { getRepository } from './repositories/Repository';
import { delay } from './mockDb';

// Create Express app
const app = express();
app.use(cors());
app.use(express.json());

// Logger middleware
app.use((req, res, next) => {
  const start = Date.now();
  const requestId = `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  
  console.log(`[${new Date().toISOString()}] [${requestId}] ${req.method} ${req.url} - Request started`);
  
  // Log request body if present
  if (req.method !== 'GET' && Object.keys(req.body).length > 0) {
    console.log(`[${requestId}] Request body:`, JSON.stringify(req.body, null, 2));
  }
  
  // Log query parameters if present
  if (Object.keys(req.query).length > 0) {
    console.log(`[${requestId}] Query params:`, req.query);
  }
  
  // Capture the original res.json to intercept responses
  const originalJson = res.json;
  res.json = function(body) {
    const duration = Date.now() - start;
    console.log(`[${new Date().toISOString()}] [${requestId}] ${req.method} ${req.url} - Response sent (${res.statusCode}) - ${duration}ms`);
    
    // Call the original json method
    return originalJson.call(this, body);
  };
  
  // Capture errors
  res.on('finish', () => {
    if (res.statusCode >= 400) {
      console.error(`[${requestId}] Error response: ${res.statusCode}`);
    }
  });
  
  next();
});

// Middleware to simulate network delay
app.use(async (req, res, next) => {
  await delay(300);
  next();
});

// Create a generic REST endpoint for any entity
const createEntityEndpoints = (entityName, path) => {
  const router = express.Router();
  
  // GET all
  router.get('/', async (req, res) => {
    try {
      const repository = getRepository(entityName);
      const data = await repository.findAll(req.query);
      res.json(data);
    } catch (error) {
      console.error(`Error in GET ${path}:`, error);
      res.status(error.status || 500).json({ message: error.message });
    }
  });
  
  // GET by ID
  router.get('/:id', async (req, res) => {
    try {
      const repository = getRepository(entityName);
      const data = await repository.findById(req.params.id);
      res.json(data);
    } catch (error) {
      console.error(`Error in GET ${path}/${req.params.id}:`, error);
      res.status(error.status || 500).json({ message: error.message });
    }
  });
  
  // POST new entity
  router.post('/', async (req, res) => {
    try {
      const repository = getRepository(entityName);
      const data = await repository.create(req.body);
      console.log(`Created new ${entityName} with ID: ${data.id}`);
      res.status(201).json(data);
    } catch (error) {
      console.error(`Error in POST ${path}:`, error);
      res.status(error.status || 500).json({ message: error.message });
    }
  });
  
  // PUT update entity
  router.put('/:id', async (req, res) => {
    try {
      const repository = getRepository(entityName);
      const data = await repository.update(req.params.id, req.body);
      console.log(`Updated ${entityName} with ID: ${data.id}`);
      res.json(data);
    } catch (error) {
      console.error(`Error in PUT ${path}/${req.params.id}:`, error);
      res.status(error.status || 500).json({ message: error.message });
    }
  });
  
  // PATCH partial update entity
  router.patch('/:id', async (req, res) => {
    try {
      const repository = getRepository(entityName);
      const data = await repository.partialUpdate(req.params.id, req.body);
      console.log(`Partially updated ${entityName} with ID: ${data.id}`);
      res.json(data);
    } catch (error) {
      console.error(`Error in PATCH ${path}/${req.params.id}:`, error);
      res.status(error.status || 500).json({ message: error.message });
    }
  });
  
  // DELETE entity
  router.delete('/:id', async (req, res) => {
    try {
      const repository = getRepository(entityName);
      await repository.delete(req.params.id);
      console.log(`Deleted ${entityName} with ID: ${req.params.id}`);
      res.json({ success: true });
    } catch (error) {
      console.error(`Error in DELETE ${path}/${req.params.id}:`, error);
      res.status(error.status || 500).json({ message: error.message });
    }
  });
  
  app.use(path, router);
  console.log(`Registered routes for ${entityName} at ${path}`);
};

// Authentication endpoints
const authRouter = express.Router();

// Login endpoint
authRouter.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    if (!email || !password) {
      console.warn(`Login attempt with missing credentials: email=${!!email}, password=${!!password}`);
      return res.status(400).json({ message: 'Email and password are required' });
    }
    
    // Find user by email
    const usersRepository = getRepository('users');
    const users = await usersRepository.findAll({ email });
    const user = users[0];
    
    if (!user || user.password !== password) {
      console.warn(`Failed login attempt for email: ${email}`);
      return res.status(401).json({ message: 'Invalid email or password' });
    }
    
    if (!user.isActive) {
      console.warn(`Login attempt for inactive account: ${email}`);
      return res.status(403).json({ message: 'Account is inactive' });
    }
    
    // Generate a mock token
    const token = `mock-token-${Date.now()}`;
    
    // Update last active timestamp
    await usersRepository.partialUpdate(user.id, {
      lastActive: new Date().toISOString(),
      lastLogin: new Date().toISOString()
    });
    
    console.log(`Successful login for user: ${email} (ID: ${user.id})`);
    
    // Return user data without sensitive information
    const { password: _password, ...userWithoutPassword } = user;
    res.json({
      user: userWithoutPassword,
      token
    });
  } catch (error) {
    console.error('Error in login endpoint:', error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Get current user
authRouter.get('/me', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    
    if (!token) {
      console.warn('Unauthorized access attempt to /auth/me (no token)');
      return res.status(401).json({ message: 'Unauthorized' });
    }
    
    // In a real app, we would validate the token
    // For mock purposes, we'll just return the first user
    const usersRepository = getRepository('users');
    const users = await usersRepository.findAll();
    const user = users[0];
    
    if (!user) {
      console.error('No users found in the database for /auth/me');
      return res.status(404).json({ message: 'User not found' });
    }
    
    console.log(`Retrieved current user: ${user.email} (ID: ${user.id})`);
    
    // Return user data without sensitive information
    const { password: _password, ...userWithoutPassword } = user;
    res.json(userWithoutPassword);
  } catch (error) {
    console.error('Error in /auth/me endpoint:', error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Logout endpoint
authRouter.post('/logout', (req, res) => {
  const token = req.headers.authorization?.split(' ')[1];
  console.log(`User logged out (token: ${token?.substring(0, 10)}...)`);
  // In a real app, we would invalidate the token
  res.json({ success: true, message: 'Logged out successfully' });
});

// Register auth routes
app.use('/auth', authRouter);
console.log('Registered authentication routes at /auth');

// System-specific endpoints
const authorizationRouter = express.Router();

// Get authorization data
authorizationRouter.get('/:clientId/:systemId', async (req, res) => {
  try {
    const { clientId, systemId } = req.params;
    console.log(`Retrieving authorization data for client ${clientId}, system ${systemId}`);
    
    // Mock authorization data
    res.json({
      id: `auth-${systemId}`,
      systemId: systemId,
      clientId: Number(clientId),
      status: 'IN_PROGRESS',
      package: {
        completed: false,
        documents: [],
        lastUpdated: new Date().toISOString()
      },
      decision: {
        status: 'PENDING',
        approver: null,
        date: null,
        conditions: [],
        expirationDate: null
      },
      poam: []
    });
  } catch (error) {
    console.error(`Error retrieving authorization data for client ${req.params.clientId}, system ${req.params.systemId}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Create POAM item
authorizationRouter.post('/:clientId/:systemId/poam', async (req, res) => {
  try {
    const { clientId, systemId } = req.params;
    const poamData = req.body;
    
    console.log(`Creating POAM item for client ${clientId}, system ${systemId}`);
    
    // Mock POAM creation
    const poamId = `poam-${Date.now()}`;
    res.status(201).json({
      id: poamId,
      ...poamData,
      systemId: systemId,
      clientId: Number(clientId)
    });
    
    console.log(`Created POAM item with ID: ${poamId}`);
  } catch (error) {
    console.error(`Error creating POAM item for client ${req.params.clientId}, system ${req.params.systemId}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Update authorization package
authorizationRouter.put('/:clientId/:systemId/package', async (req, res) => {
  try {
    const { clientId, systemId } = req.params;
    const packageData = req.body;
    
    console.log(`Updating authorization package for client ${clientId}, system ${systemId}`);
    
    // Mock package update
    res.json({
      id: `auth-${systemId}`,
      systemId: systemId,
      clientId: Number(clientId),
      status: 'IN_PROGRESS',
      package: {
        ...packageData,
        lastUpdated: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error(`Error updating authorization package for client ${req.params.clientId}, system ${req.params.systemId}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Update authorization decision
authorizationRouter.put('/:clientId/:systemId/decision', async (req, res) => {
  try {
    const { clientId, systemId } = req.params;
    const decisionData = req.body;
    
    console.log(`Updating authorization decision for client ${clientId}, system ${systemId}`);
    
    // Mock decision update
    res.json({
      id: `auth-${systemId}`,
      systemId: systemId,
      clientId: Number(clientId),
      status: decisionData.status || 'IN_PROGRESS',
      decision: {
        ...decisionData,
        date: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error(`Error updating authorization decision for client ${req.params.clientId}, system ${req.params.systemId}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Validate authorization package
authorizationRouter.put('/:clientId/:systemId/validate', async (req, res) => {
  try {
    const { clientId, systemId } = req.params;
    
    console.log(`Validating authorization package for client ${clientId}, system ${systemId}`);
    
    // Mock validation results
    res.json({
      status: 'VALIDATED',
      timestamp: new Date().toISOString(),
      findings: [],
      recommendations: [
        'Ensure all POA&M items have detailed remediation plans',
        'Update system boundary documentation with network diagrams',
        'Include detailed testing results in security assessment report'
      ]
    });
  } catch (error) {
    console.error(`Error validating authorization package for client ${req.params.clientId}, system ${req.params.systemId}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Register authorization routes
app.use('/authorization', authorizationRouter);
console.log('Registered authorization routes at /authorization');

// Client-specific endpoints
const clientRouter = express.Router();

// Get industries
app.get('/industries', (req, res) => {
  console.log('Retrieving industries list');
  res.json([
    'Technology',
    'Healthcare',
    'Finance',
    'Manufacturing',
    'Retail',
    'Education',
    'Government',
    'Non-profit',
    'Other'
  ]);
});

// Get client sizes
app.get('/clientSizes', (req, res) => {
  console.log('Retrieving client sizes list');
  res.json([
    'Small (1-50 employees)',
    'Medium (51-500 employees)',
    'Large (501-5000 employees)',
    'Enterprise (5000+ employees)'
  ]);
});

// Get client statuses
app.get('/clientStatuses', (req, res) => {
  console.log('Retrieving client statuses list');
  res.json([
    'active',
    'inactive',
    'pending',
    'suspended'
  ]);
});

// Get document categories
app.get('/documentCategories', (req, res) => {
  console.log('Retrieving document categories list');
  res.json([
    'General',
    'Policies',
    'Procedures',
    'Contracts',
    'Reports',
    'Compliance',
    'Security',
    'Other'
  ]);
});

// Get document types
app.get('/documentTypes', (req, res) => {
  console.log('Retrieving document types list');
  res.json([
    'PDF',
    'DOCX',
    'XLSX',
    'PPTX',
    'TXT',
    'CSV',
    'ZIP',
    'JPG',
    'PNG'
  ]);
});

// Incident-related endpoints
app.get('/incidentTypes', (req, res) => {
  console.log('Retrieving incident types list');
  res.json([
    'security',
    'availability',
    'performance',
    'data_breach',
    'unauthorized_access',
    'malware',
    'phishing',
    'dos',
    'hardware_failure',
    'software_failure',
    'human_error',
    'other'
  ]);
});

app.get('/incidentSeverities', (req, res) => {
  console.log('Retrieving incident severities list');
  res.json([
    'critical',
    'high',
    'medium',
    'low'
  ]);
});

app.get('/incidentStatuses', (req, res) => {
  console.log('Retrieving incident statuses list');
  res.json([
    'active',
    'investigating',
    'resolved',
    'closed'
  ]);
});

app.get('/incidentPriorities', (req, res) => {
  console.log('Retrieving incident priorities list');
  res.json([
    'critical',
    'high',
    'medium',
    'low'
  ]);
});

app.get('/actionTypes', (req, res) => {
  console.log('Retrieving action types list');
  res.json([
    'investigation',
    'containment',
    'eradication',
    'recovery',
    'communication',
    'documentation',
    'other'
  ]);
});

app.get('/teams', (req, res) => {
  console.log('Retrieving teams list');
  res.json([
    'Security Operations',
    'Network Operations',
    'System Administration',
    'Development',
    'Management',
    'Legal',
    'PR',
    'HR',
    'Other'
  ]);
});

app.get('/systemTypes', (req, res) => {
  console.log('Retrieving system types list');
  res.json([
    'Web Application',
    'Database',
    'Network Infrastructure',
    'Cloud Service',
    'Desktop Application',
    'Mobile Application',
    'IoT Device',
    'Server',
    'Other'
  ]);
});

// Client user roles and permissions endpoints
app.get('/roles', (req, res) => {
  console.log('Retrieving roles list');
  const repository = getRepository('roles');
  repository.findAll()
    .then(data => res.json(data))
    .catch(error => {
      console.error('Error retrieving roles:', error);
      res.status(error.status || 500).json({ message: error.message });
    });
});

app.get('/rolePermissions', (req, res) => {
  console.log('Retrieving role permissions list');
  const repository = getRepository('rolePermissions');
  repository.findAll()
    .then(data => res.json(data))
    .catch(error => {
      console.error('Error retrieving role permissions:', error);
      res.status(error.status || 500).json({ message: error.message });
    });
});

app.get('/permissions', (req, res) => {
  console.log('Retrieving permissions list');
  const repository = getRepository('permissions');
  repository.findAll()
    .then(data => res.json(data))
    .catch(error => {
      console.error('Error retrieving permissions:', error);
      res.status(error.status || 500).json({ message: error.message });
    });
});

// Get titles
app.get('/titles', (req, res) => {
  console.log('Retrieving titles list');
  const repository = getRepository('titles');
  repository.findAll()
    .then(data => res.json(data))
    .catch(error => {
      console.error('Error retrieving titles:', error);
      res.status(error.status || 500).json({ message: error.message });
    });
});

// Get user statuses
app.get('/userStatus', (req, res) => {
  console.log('Retrieving user statuses list');
  const repository = getRepository('userStatus');
  repository.findAll()
    .then(data => res.json(data))
    .catch(error => {
      console.error('Error retrieving user statuses:', error);
      res.status(error.status || 500).json({ message: error.message });
    });
});

// Create endpoints for each entity
createEntityEndpoints('securityObjectives', '/security-objectives');
createEntityEndpoints('securityInitiatives', '/security-initiatives');
createEntityEndpoints('riskAssessment', '/risks');
createEntityEndpoints('users', '/users');
createEntityEndpoints('roles', '/roles');
createEntityEndpoints('systems', '/systems');
createEntityEndpoints('clients', '/clients');
createEntityEndpoints('departments', '/departments');
createEntityEndpoints('documents', '/documents');
createEntityEndpoints('assessmentHistory', '/assessmentHistory');
createEntityEndpoints('incidents', '/incidents');
createEntityEndpoints('clientUsers', '/client-users'); // Add endpoint for client users
createEntityEndpoints('titles', '/titles'); // Add endpoint for titles
createEntityEndpoints('userStatus', '/userStatus'); // Add endpoint for user statuses

// Add assessments endpoints
const assessmentsRouter = express.Router();

//GET all departments
assessmentsRouter.get('/departments/:id', async (req, res) => {
  try {
    console.log('Retrieving all departments');
    const repository = getRepository('departments');
    const data = await repository.findAll(req.query);
    res.json(data);
  } catch (error) {
    console.error('Error retrieving all departments:', error);
    res.status(error.status || 500).json({ message: error.message });
  }
});
//Post new department
assessmentsRouter.post('/departments', async (req, res) => {
  try {
    console.log('Creating new department');
    const repository = getRepository('departments');
    const data = await repository.create(req.body);
    console.log(`Created new department with ID: ${data.id}`);
    res.status(201).json(data);
  } catch (error) {
    console.error('Error creating new department:', error);
    res.status(error.status || 500).json({ message: error.message });
  }
});
//Patch update department
assessmentsRouter.patch('/departments/:id', async (req, res) => {
  try {
    console.log(`Updating department with ID: ${req.params.id}`);
    const repository = getRepository('departments');
    const data = await repository.partialUpdate(req.params.id, req.body);
    console.log(`Updated department with ID: ${data.id}`);
    res.json(data);
  } catch (error) {
    console.error(`Error updating department with ID ${req.params.id}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});
//Delete department
assessmentsRouter.delete('/:id', async (req, res) => {
  try {
    console.log(`Deleting department with ID: ${req.params.id}`);
    const repository = getRepository('departments');
    await repository.delete(req.params.id);
    console.log(`Deleted department with ID: ${req.params.id}`);
    res.json({ success: true });
  } catch (error) {
    console.error(`Error deleting department with ID ${req.params.id}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// GET all assessments
assessmentsRouter.get('/', async (req, res) => {
  try {
    console.log('Retrieving all assessments');
    const repository = getRepository('assessmentHistory');
    const data = await repository.findAll(req.query);
    res.json(data);
  } catch (error) {
    console.error('Error retrieving all assessments:', error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// GET assessment by ID
assessmentsRouter.get('/:id', async (req, res) => {
  try {
    console.log(`Retrieving assessment with ID: ${req.params.id}`);
    const repository = getRepository('assessmentHistory');
    const data = await repository.findById(req.params.id);
    res.json(data);
  } catch (error) {
    console.error(`Error retrieving assessment with ID ${req.params.id}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// GET assessments by client ID
assessmentsRouter.get('/client/:clientId', async (req, res) => {
  try {
    console.log(`Retrieving assessments for client ID: ${req.params.clientId}`);
    const repository = getRepository('assessmentHistory');
    const data = await repository.findAll({ clientId: req.params.clientId });
    res.json(data);
  } catch (error) {
    console.error(`Error retrieving assessments for client ID ${req.params.clientId}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// GET assessments by system ID
assessmentsRouter.get('/system/:systemId', async (req, res) => {
  try {
    console.log(`Retrieving assessments for system ID: ${req.params.systemId}`);
    const repository = getRepository('assessmentHistory');
    const data = await repository.findAll({ systemId: req.params.systemId });
    res.json(data);
  } catch (error) {
    console.error(`Error retrieving assessments for system ID ${req.params.systemId}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// POST new assessment
assessmentsRouter.post('/', async (req, res) => {
  try {
    console.log('Creating new assessment');
    const repository = getRepository('assessmentHistory');
    const data = await repository.create(req.body);
    console.log(`Created new assessment with ID: ${data.id}`);
    res.status(201).json(data);
  } catch (error) {
    console.error('Error creating new assessment:', error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// PATCH update assessment
assessmentsRouter.patch('/:id', async (req, res) => {
  try {
    console.log(`Updating assessment with ID: ${req.params.id}`);
    const repository = getRepository('assessmentHistory');
    const data = await repository.partialUpdate(req.params.id, req.body);
    console.log(`Updated assessment with ID: ${data.id}`);
    res.json(data);
  } catch (error) {
    console.error(`Error updating assessment with ID ${req.params.id}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// DELETE assessment
assessmentsRouter.delete('/:id', async (req, res) => {
  try {
    console.log(`Deleting assessment with ID: ${req.params.id}`);
    const repository = getRepository('assessmentHistory');
    await repository.delete(req.params.id);
    console.log(`Deleted assessment with ID: ${req.params.id}`);
    res.json({ success: true });
  } catch (error) {
    console.error(`Error deleting assessment with ID ${req.params.id}:`, error);
    res.status(error.status || 500).json({ message: error.message });
  }
});

// Register assessments routes
app.use('/assessments', assessmentsRouter);
console.log('Registered assessment routes at /assessments');

// Start server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log(`Mock server running on port ${PORT}`);
  console.log(`Server started at: ${new Date().toISOString()}`);
  console.log(`API base URL: http://localhost:${PORT}`);
  console.log('='.repeat(50));
});

export default app;



================================================================
End of Codebase
================================================================

================
File: src/app.controller.spec.ts
================
import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { AppService } from './app.service';

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      controllers: [AppController],
      providers: [AppService],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('root', () => {
    it('should return "Hello World!"', () => {
      expect(appController.getHello()).toBe('Hello World!');
    });
  });
});

================
File: src/app.controller.ts
================
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }
}

================
File: src/app.module.ts
================
import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import databaseConfig from './config/database.config';
import appConfig from './config/app.config';
import { CommonModule } from './common/common.module';
import { UsersModule } from './users/users.module';
import { AuthModule } from './auth/auth.module';
import { ClientsModule } from './clients/clients.module';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      load: [databaseConfig, appConfig],
    }),
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService): TypeOrmModuleOptions => {
        const dbConfig = configService.get<TypeOrmModuleOptions>('database');
        if (!dbConfig) {
          throw new Error('Database configuration not found');
        }
        
        // Set synchronize to true to create tables automatically
        return {
          ...dbConfig,
          synchronize: true,
          autoLoadEntities: true,
        };
      },
    }),
    CommonModule,
    UsersModule,
    AuthModule,
    ClientsModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

================
File: src/app.service.ts
================
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}

================
File: src/auth/auth.controller.ts
================
import {
  Controller,
  Post,
  Body,
  UseGuards,
  Get,
  Request,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { AuthService } from './auth.service';
import { LoginDto } from './dto/login.dto';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { ApiResponse } from '../common/interfaces/api-response.interface';
import { UtilityService } from '../common/services/utility.service';

interface RequestWithUser {
  user: {
    id: number;
    email: string;
    role: string;
  };
}

@Controller('auth')
export class AuthController {
  constructor(
    private readonly authService: AuthService,
    private readonly utilityService: UtilityService,
  ) {}

  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(@Body() loginDto: LoginDto): Promise<ApiResponse<any>> {
    const result = await this.authService.login(loginDto);
    return this.utilityService.createSuccessResponse(
      result,
      'Login successful',
    );
  }

  @UseGuards(JwtAuthGuard)
  @Get('me')
  getProfile(@Request() req: RequestWithUser): ApiResponse<any> {
    return this.utilityService.createSuccessResponse(
      req.user,
      'User profile retrieved successfully',
    );
  }

  @UseGuards(JwtAuthGuard)
  @Post('refresh-token')
  async refreshToken(@Request() req: RequestWithUser): Promise<ApiResponse<any>> {
    const result = await this.authService.refreshToken(req.user.id);
    return this.utilityService.createSuccessResponse(
      result,
      'Token refreshed successfully',
    );
  }
}

================
File: src/auth/auth.module.ts
================
import { Module } from '@nestjs/common';
import { JwtModule } from '@nestjs/jwt';
import { PassportModule } from '@nestjs/passport';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { AuthService } from './auth.service';
import { AuthController } from './auth.controller';
import { UsersModule } from '../users/users.module';
import { JwtStrategy } from './strategies/jwt.strategy';
import { RolesGuard } from './guards/roles.guard';
import { CommonModule } from '../common/common.module';

@Module({
  imports: [
    UsersModule,
    CommonModule,
    PassportModule,
    JwtModule.registerAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (configService: ConfigService) => ({
        secret: configService.get<string>('app.jwtSecret'),
        signOptions: { 
          expiresIn: configService.get<string>('app.jwtExpiresIn') || '1d',
        },
      }),
    }),
  ],
  controllers: [AuthController],
  providers: [AuthService, JwtStrategy, RolesGuard],
  exports: [AuthService, RolesGuard],
})
export class AuthModule {}

================
File: src/auth/auth.service.ts
================
import { Injectable, UnauthorizedException, Logger } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcrypt';
import { UsersService } from '../users/users.service';
import { LoginDto } from './dto/login.dto';
import { User } from '../users/entities/user.entity';

@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name);

  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
  ) {}

  async validateUser(email: string, password: string): Promise<Omit<User, 'password'> | null> {
    try {
      const user = await this.usersService.findByEmail(email);
      
      if (!user) {
        return null;
      }
      
      const isPasswordValid = await bcrypt.compare(password, user.password);
      
      if (!isPasswordValid) {
        return null;
      }
      
      // Update last login time
      await this.usersService.update(user.id, { 
        lastLogin: new Date(),
        failedLoginAttempts: 0,
      });
      
      const { password: _, ...result } = user;
      return result;
    } catch (error) {
      this.logger.error(`Error validating user: ${(error as Error).message}`, (error as Error).stack);
      return null;
    }
  }

  async login(loginDto: LoginDto) {
    const user = await this.validateUser(loginDto.email, loginDto.password);
    
    if (!user) {
      // Increment failed login attempts
      const existingUser = await this.usersService.findByEmail(loginDto.email);
      if (existingUser) {
        await this.usersService.update(existingUser.id, {
          failedLoginAttempts: existingUser.failedLoginAttempts + 1,
        });
      }
      throw new UnauthorizedException('Invalid credentials');
    }
    
    const payload = { 
      email: user.email, 
      sub: user.id,
      role: user.role,
    };
    
    return {
      accessToken: this.jwtService.sign(payload),
      user,
    };
  }

  async refreshToken(userId: number) {
    const user = await this.usersService.findOne(userId);
    
    const payload = { 
      email: user.email, 
      sub: user.id,
      role: user.role,
    };
    
    return {
      accessToken: this.jwtService.sign(payload),
    };
  }
}

================
File: src/auth/dto/login.dto.ts
================
import { IsEmail, IsNotEmpty, IsString } from 'class-validator';

export class LoginDto {
  @IsNotEmpty()
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @IsString()
  password: string;
}

================
File: src/auth/guards/jwt-auth.guard.ts
================
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {}

================
File: src/auth/guards/roles.guard.ts
================
import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { ROLES_KEY } from '../../common/decorators/roles.decorator';

interface RequestWithUser {
  user: {
    id: number;
    email: string;
    role: string;
  };
}

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<string[]>(ROLES_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);
    
    if (!requiredRoles) {
      return true;
    }
    
    const request = context.switchToHttp().getRequest<RequestWithUser>();
    return requiredRoles.includes(request.user.role);
  }
}

================
File: src/auth/strategies/jwt.strategy.ts
================
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { ConfigService } from '@nestjs/config';
import { UsersService } from '../../users/users.service';

interface JwtPayload {
  sub: number;
  email: string;
  role: string;
  iat?: number;
  exp?: number;
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(
    private configService: ConfigService,
    private usersService: UsersService,
  ) {
    const jwtSecret = configService.get<string>('app.jwtSecret');
    if (!jwtSecret) {
      throw new Error('JWT secret is not defined');
    }
    
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: jwtSecret,
    });
  }

  async validate(payload: JwtPayload) {
    const user = await this.usersService.findOne(payload.sub);
    
    if (!user || !user.isActive) {
      throw new UnauthorizedException('User is not active or does not exist');
    }
    
    return {
      id: user.id,
      email: user.email,
      role: user.role,
    };
  }
}

================
File: src/clients/clients.controller.ts
================
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  UseGuards,
} from '@nestjs/common';
import { ClientsService } from './clients.service';
import { CreateClientDto } from './dto/create-client.dto';
import { UpdateClientDto } from './dto/update-client.dto';
import { CreateClientUserDto } from './dto/create-client-user.dto';
import { UpdateClientUserDto } from './dto/update-client-user.dto';
import { PaginationDto } from '../common/dto/pagination.dto';
import { ApiResponse } from '../common/interfaces/api-response.interface';
import { Client } from './entities/client.entity';
import { ClientUser } from './entities/client-user.entity';
import { UtilityService } from '../common/services/utility.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { Roles } from '../common/decorators/roles.decorator';
import { RolesGuard } from '../auth/guards/roles.guard';

@Controller('clients')
@UseGuards(JwtAuthGuard, RolesGuard)
export class ClientsController {
  constructor(
    private readonly clientsService: ClientsService,
    private readonly utilityService: UtilityService,
  ) {}

  @Post()
  @Roles('admin')
  async create(@Body() createClientDto: CreateClientDto): Promise<ApiResponse<Client>> {
    const client = await this.clientsService.create(createClientDto);
    return this.utilityService.createSuccessResponse(
      client,
      'Client created successfully',
    );
  }

  @Get()
  @Roles('admin')
  async findAll(@Query() paginationDto: PaginationDto): Promise<ApiResponse<{ clients: Client[]; total: number }>> {
    const [clients, total] = await this.clientsService.findAll(paginationDto);
    return this.utilityService.createSuccessResponse(
      { clients, total },
      'Clients retrieved successfully',
      {
        page: paginationDto.page,
        limit: paginationDto.limit,
        totalPages: Math.ceil(total / paginationDto.limit),
      },
    );
  }

  @Get(':id')
  @Roles('admin')
  async findOne(@Param('id') id: string): Promise<ApiResponse<Client>> {
    const client = await this.clientsService.findOne(+id);
    return this.utilityService.createSuccessResponse(
      client,
      'Client retrieved successfully',
    );
  }

  @Patch(':id')
  @Roles('admin')
  async update(
    @Param('id') id: string,
    @Body() updateClientDto: UpdateClientDto,
  ): Promise<ApiResponse<Client>> {
    const client = await this.clientsService.update(+id, updateClientDto);
    return this.utilityService.createSuccessResponse(
      client,
      'Client updated successfully',
    );
  }

  @Delete(':id')
  @Roles('admin')
  async remove(@Param('id') id: string): Promise<ApiResponse<null>> {
    await this.clientsService.remove(+id);
    return this.utilityService.createSuccessResponse(
      null,
      'Client deleted successfully',
    );
  }

  // Client User endpoints
  @Post(':clientId/users')
  @Roles('admin')
  async createClientUser(
    @Param('clientId') clientId: string,
    @Body() createClientUserDto: CreateClientUserDto,
  ): Promise<ApiResponse<ClientUser>> {
    // Ensure clientId in path matches the one in the DTO
    createClientUserDto.clientId = +clientId;
    
    const clientUser = await this.clientsService.createClientUser(createClientUserDto);
    return this.utilityService.createSuccessResponse(
      clientUser,
      'Client user created successfully',
    );
  }

  @Get(':clientId/users')
  @Roles('admin')
  async findClientUsers(
    @Param('clientId') clientId: string,
    @Query() paginationDto: PaginationDto,
  ): Promise<ApiResponse<{ users: ClientUser[]; total: number }>> {
    const [users, total] = await this.clientsService.findClientUsers(+clientId, paginationDto);
    return this.utilityService.createSuccessResponse(
      { users, total },
      'Client users retrieved successfully',
      {
        page: paginationDto.page,
        limit: paginationDto.limit,
        totalPages: Math.ceil(total / paginationDto.limit),
      },
    );
  }

  @Get(':clientId/users/:userId')
  @Roles('admin')
  async findClientUser(
    @Param('clientId') clientId: string,
    @Param('userId') userId: string,
  ): Promise<ApiResponse<ClientUser>> {
    const clientUser = await this.clientsService.findClientUser(+clientId, +userId);
    return this.utilityService.createSuccessResponse(
      clientUser,
      'Client user retrieved successfully',
    );
  }

  @Patch(':clientId/users/:userId')
  @Roles('admin')
  async updateClientUser(
    @Param('clientId') clientId: string,
    @Param('userId') userId: string,
    @Body() updateClientUserDto: UpdateClientUserDto,
  ): Promise<ApiResponse<ClientUser>> {
    const clientUser = await this.clientsService.updateClientUser(+clientId, +userId, updateClientUserDto);
    return this.utilityService.createSuccessResponse(
      clientUser,
      'Client user updated successfully',
    );
  }

  @Delete(':clientId/users/:userId')
  @Roles('admin')
  async removeClientUser(
    @Param('clientId') clientId: string,
    @Param('userId') userId: string,
  ): Promise<ApiResponse<null>> {
    await this.clientsService.removeClientUser(+clientId, +userId);
    return this.utilityService.createSuccessResponse(
      null,
      'Client user deleted successfully',
    );
  }
}

================
File: src/clients/clients.module.ts
================
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ClientsService } from './clients.service';
import { ClientsController } from './clients.controller';
import { Client } from './entities/client.entity';
import { ClientUser } from './entities/client-user.entity';
import { CommonModule } from '../common/common.module';

@Module({
  imports: [
    TypeOrmModule.forFeature([Client, ClientUser]),
    CommonModule,
  ],
  controllers: [ClientsController],
  providers: [ClientsService],
  exports: [ClientsService],
})
export class ClientsModule {}

================
File: src/clients/clients.service.ts
================
import {
  Injectable,
  NotFoundException,
  ConflictException,
  InternalServerErrorException,
  Logger,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Client } from './entities/client.entity';
import { ClientUser } from './entities/client-user.entity';
import { CreateClientDto } from './dto/create-client.dto';
import { UpdateClientDto } from './dto/update-client.dto';
import { CreateClientUserDto } from './dto/create-client-user.dto';
import { UpdateClientUserDto } from './dto/update-client-user.dto';
import { PaginationDto } from '../common/dto/pagination.dto';

@Injectable()
export class ClientsService {
  private readonly logger = new Logger(ClientsService.name);

  constructor(
    @InjectRepository(Client)
    private clientsRepository: Repository<Client>,
    @InjectRepository(ClientUser)
    private clientUsersRepository: Repository<ClientUser>,
  ) {}

  async create(createClientDto: CreateClientDto): Promise<Client> {
    try {
      const client = this.clientsRepository.create(createClientDto);
      return await this.clientsRepository.save(client);
    } catch (error) {
      this.logger.error(`Failed to create client: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to create client');
    }
  }

  async findAll(paginationDto: PaginationDto): Promise<[Client[], number]> {
    try {
      return await this.clientsRepository.findAndCount({
        skip: paginationDto.skip,
        take: paginationDto.limit,
        order: {
          createdAt: 'DESC',
        },
      });
    } catch (error) {
      this.logger.error(`Failed to find clients: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to find clients');
    }
  }

  async findOne(id: number): Promise<Client> {
    try {
      const client = await this.clientsRepository.findOne({ 
        where: { id },
        relations: ['users'],
      });
      
      if (!client) {
        throw new NotFoundException(`Client with ID ${id} not found`);
      }
      
      return client;
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to find client: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to find client');
    }
  }

  async update(id: number, updateClientDto: UpdateClientDto): Promise<Client> {
    try {
      const client = await this.findOne(id);
      
      Object.assign(client, updateClientDto);
      return await this.clientsRepository.save(client);
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to update client: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to update client');
    }
  }

  async remove(id: number): Promise<void> {
    try {
      const result = await this.clientsRepository.delete(id);
      
      if (result.affected === 0) {
        throw new NotFoundException(`Client with ID ${id} not found`);
      }
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to remove client: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to remove client');
    }
  }

  // Client User methods
  async createClientUser(createClientUserDto: CreateClientUserDto): Promise<ClientUser> {
    try {
      // Check if client exists
      await this.findOne(createClientUserDto.clientId);
      
      // Check if user with email already exists for this client
      const existingUser = await this.clientUsersRepository.findOne({
        where: {
          clientId: createClientUserDto.clientId,
          email: createClientUserDto.email,
        },
      });
      
      if (existingUser) {
        throw new ConflictException('User with this email already exists for this client');
      }
      
      const clientUser = this.clientUsersRepository.create(createClientUserDto);
      return await this.clientUsersRepository.save(clientUser);
    } catch (error) {
      if (error instanceof NotFoundException || error instanceof ConflictException) {
        throw error;
      }
      this.logger.error(`Failed to create client user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to create client user');
    }
  }

  async findClientUsers(clientId: number, paginationDto: PaginationDto): Promise<[ClientUser[], number]> {
    try {
      // Check if client exists
      await this.findOne(clientId);
      
      return await this.clientUsersRepository.findAndCount({
        where: { clientId },
        skip: paginationDto.skip,
        take: paginationDto.limit,
        order: {
          createdAt: 'DESC',
        },
      });
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to find client users: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to find client users');
    }
  }

  async findClientUser(clientId: number, userId: number): Promise<ClientUser> {
    try {
      const clientUser = await this.clientUsersRepository.findOne({
        where: {
          id: userId,
          clientId,
        },
      });
      
      if (!clientUser) {
        throw new NotFoundException(`User with ID ${userId} not found for client ${clientId}`);
      }
      
      return clientUser;
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to find client user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to find client user');
    }
  }

  async updateClientUser(clientId: number, userId: number, updateClientUserDto: UpdateClientUserDto): Promise<ClientUser> {
    try {
      const clientUser = await this.findClientUser(clientId, userId);
      
      Object.assign(clientUser, updateClientUserDto);
      return await this.clientUsersRepository.save(clientUser);
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to update client user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to update client user');
    }
  }

  async removeClientUser(clientId: number, userId: number): Promise<void> {
    try {
      const result = await this.clientUsersRepository.delete({
        id: userId,
        clientId,
      });
      
      if (result.affected === 0) {
        throw new NotFoundException(`User with ID ${userId} not found for client ${clientId}`);
      }
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to remove client user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to remove client user');
    }
  }
}

================
File: src/clients/dto/create-client-user.dto.ts
================
import {
  IsEmail,
  IsNotEmpty,
  IsOptional,
  IsString,
  IsNumber,
  IsArray,
  IsBoolean,
} from 'class-validator';

export class CreateClientUserDto {
  @IsNotEmpty()
  @IsString()
  username: string;

  @IsNotEmpty()
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @IsString()
  role: string;

  @IsNotEmpty()
  @IsNumber()
  clientId: number;

  @IsNotEmpty()
  @IsString()
  firstName: string;

  @IsNotEmpty()
  @IsString()
  lastName: string;

  @IsOptional()
  @IsString()
  title?: string;

  @IsOptional()
  @IsString()
  department?: string;

  @IsOptional()
  @IsString()
  phone?: string;

  @IsOptional()
  @IsBoolean()
  isActive?: boolean;

  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  permissions?: string[];
}

================
File: src/clients/dto/create-client.dto.ts
================
import {
  IsEmail,
  IsNotEmpty,
  IsOptional,
  IsString,
  IsNumber,
  IsUrl,
  ValidateNested,
  IsObject,
} from 'class-validator';
import { Type } from 'class-transformer';
import { Address } from '../entities/client.entity';

export class AddressDto implements Address {
  @IsOptional()
  @IsString()
  street?: string;

  @IsOptional()
  @IsString()
  city?: string;

  @IsOptional()
  @IsString()
  state?: string;

  @IsOptional()
  @IsString()
  zipCode?: string;

  @IsOptional()
  @IsString()
  country?: string;

  [key: string]: unknown;
}

export class CreateClientDto {
  @IsNotEmpty()
  @IsString()
  name: string;

  @IsOptional()
  @IsString()
  industry?: string;

  @IsOptional()
  @IsEmail()
  email?: string;

  @IsOptional()
  @IsString()
  phone?: string;

  @IsOptional()
  @IsString()
  primaryContact?: string;

  @IsOptional()
  @IsObject()
  @ValidateNested()
  @Type(() => AddressDto)
  address?: AddressDto;

  @IsOptional()
  @IsString()
  size?: string;

  @IsOptional()
  @IsNumber()
  employeeCount?: number;

  @IsOptional()
  @IsUrl()
  website?: string;
}

================
File: src/clients/dto/update-client-user.dto.ts
================
import {
  IsEmail,
  IsOptional,
  IsString,
  IsNumber,
  IsArray,
  IsBoolean,
} from 'class-validator';
import { PartialType } from '@nestjs/mapped-types';
import { CreateClientUserDto } from './create-client-user.dto';

export class UpdateClientUserDto extends PartialType(CreateClientUserDto) {
  @IsOptional()
  @IsEmail()
  email?: string;

  @IsOptional()
  @IsString()
  role?: string;

  @IsOptional()
  @IsNumber()
  clientId?: number;

  @IsOptional()
  @IsString()
  firstName?: string;

  @IsOptional()
  @IsString()
  lastName?: string;

  @IsOptional()
  @IsString()
  title?: string;

  @IsOptional()
  @IsString()
  department?: string;

  @IsOptional()
  @IsString()
  phone?: string;

  @IsOptional()
  @IsBoolean()
  isActive?: boolean;

  @IsOptional()
  @IsArray()
  @IsString({ each: true })
  permissions?: string[];
}

================
File: src/clients/dto/update-client.dto.ts
================
import {
  IsOptional,
  IsString,
  IsNumber,
  IsDate,
} from 'class-validator';
import { Type } from 'class-transformer';
import { PartialType } from '@nestjs/mapped-types';
import { CreateClientDto } from './create-client.dto';

export class UpdateClientDto extends PartialType(CreateClientDto) {
  @IsOptional()
  @Type(() => Date)
  @IsDate()
  lastActivity?: Date;

  @IsOptional()
  @IsNumber()
  complianceScore?: number;

  @IsOptional()
  @IsString()
  status?: string;
}

================
File: src/clients/entities/client-user.entity.ts
================
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  JoinColumn,
  CreateDateColumn,
  UpdateDateColumn,
} from 'typeorm';
import { Client } from './client.entity';

@Entity('client_users')
export class ClientUser {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  username: string;

  @Column()
  email: string;

  @Column()
  role: string;

  @Column()
  clientId: number;

  @ManyToOne(() => Client, (client: Client) => client.users)
  @JoinColumn({ name: 'clientId' })
  client: Client;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column({ nullable: true })
  title: string;

  @Column({ nullable: true })
  department: string;

  @Column({ nullable: true })
  phone: string;

  @Column({ default: true })
  isActive: boolean;

  @Column({ nullable: true, type: 'timestamp' })
  lastActive: Date;

  @Column({ type: 'json', nullable: true })
  permissions: string[];

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}

================
File: src/clients/entities/client.entity.ts
================
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  OneToMany,
} from 'typeorm';
import { ClientUser } from './client-user.entity';

export interface Address {
  street?: string;
  city?: string;
  state?: string;
  zipCode?: string;
  country?: string;
  [key: string]: unknown;
}

@Entity('clients')
export class Client {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  name: string;

  @Column({ nullable: true })
  industry: string;

  @Column({ nullable: true })
  email: string;

  @Column({ nullable: true })
  phone: string;

  @Column({ nullable: true })
  primaryContact: string;

  @CreateDateColumn()
  createdAt: Date;

  @Column({ nullable: true, type: 'timestamp' })
  lastActivity: Date;

  @Column({ nullable: true })
  complianceScore: number;

  @Column({ default: 'active' })
  status: string;

  @Column({ type: 'json', nullable: true })
  address: Address;

  @Column({ nullable: true })
  size: string;

  @Column({ nullable: true })
  employeeCount: number;

  @Column({ nullable: true })
  website: string;

  @OneToMany(() => ClientUser, (clientUser: ClientUser) => clientUser.client)
  users: ClientUser[];
}

================
File: src/common/common.module.ts
================
import { Module } from '@nestjs/common';
import { APP_FILTER } from '@nestjs/core';
import { HttpExceptionFilter } from './filters/http-exception.filter';
import { UtilityService } from './services/utility.service';

@Module({
  providers: [
    {
      provide: APP_FILTER,
      useClass: HttpExceptionFilter,
    },
    UtilityService,
  ],
  exports: [UtilityService],
})
export class CommonModule {}

================
File: src/common/decorators/roles.decorator.ts
================
import { SetMetadata } from '@nestjs/common';

export const ROLES_KEY = 'roles';
export const Roles = (...roles: string[]) => SetMetadata(ROLES_KEY, roles);

================
File: src/common/dto/pagination.dto.ts
================
import { IsNumber, IsOptional, Min } from 'class-validator';
import { Type } from 'class-transformer';

export class PaginationDto {
  @IsOptional()
  @Type(() => Number)
  @IsNumber()
  @Min(1)
  page: number = 1;

  @IsOptional()
  @Type(() => Number)
  @IsNumber()
  @Min(1)
  limit: number = 10;

  get skip(): number {
    return (this.page - 1) * this.limit;
  }
}

================
File: src/common/filters/http-exception.filter.ts
================
import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
  Logger,
} from '@nestjs/common';
import { Request, Response } from 'express';

@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter {
  private readonly logger = new Logger(HttpExceptionFilter.name);

  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest<Request>();
    const status = exception.getStatus();

    const errorResponse = {
      statusCode: status,
      timestamp: new Date().toISOString(),
      path: request.url,
      method: request.method,
      message: exception.message || null,
    };

    if (status === HttpStatus.INTERNAL_SERVER_ERROR as number) {
      this.logger.error(
        `${request.method} ${request.url}`,
        exception.stack,
        'HttpExceptionFilter',
      );
    } else {
      this.logger.error(
        `${request.method} ${request.url}`,
        JSON.stringify(errorResponse),
        'HttpExceptionFilter',
      );
    }

    response.status(status).json(errorResponse);
  }
}

================
File: src/common/interfaces/api-response.interface.ts
================
export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
  errors?: string[];
  meta?: {
    [key: string]: any;
  };
}

================
File: src/common/services/utility.service.ts
================
import { Injectable } from '@nestjs/common';
import { ApiResponse } from '../interfaces/api-response.interface';

@Injectable()
export class UtilityService {
  /**
   * Creates a standardized successful API response
   */
  createSuccessResponse<T, M extends { [key: string]: any; } | undefined = Record<string, unknown>>(data: T, message?: string, meta?: M): ApiResponse<T> {
    return {
      success: true,
      data,
      message,
      meta,
    };
  }

  /**
   * Creates a standardized error API response
   */
  createErrorResponse(message: string, errors?: string[]): ApiResponse<null> {
    return {
      success: false,
      message,
      errors,
    };
  }

  /**
   * Generates a random string of specified length
   */
  generateRandomString(length: number): string {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    const charactersLength = characters.length;
    
    for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    
    return result;
  }
}

================
File: src/config/app.config.ts
================
import { registerAs } from '@nestjs/config';

export default registerAs(
  'app',
  () => ({
    port: parseInt(process.env.PORT || '3000', 10),
    environment: process.env.NODE_ENV || 'development',
    apiPrefix: process.env.API_PREFIX || 'api',
    jwtSecret: process.env.JWT_SECRET || 'your-secret-key',
    jwtExpiresIn: process.env.JWT_EXPIRES_IN || '1d',
  }),
);

================
File: src/config/database.config.ts
================
import { registerAs } from '@nestjs/config';
import { TypeOrmModuleOptions } from '@nestjs/typeorm';

export default registerAs(
  'database',
  (): TypeOrmModuleOptions => ({
    type: 'postgres',
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432', 10),
    username: process.env.DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_PASSWORD || '',
    database: process.env.DB_DATABASE || 'grc_db',
    entities: ['dist/**/*.entity{.ts,.js}'],
    synchronize: process.env.NODE_ENV !== 'production',
    logging: process.env.NODE_ENV !== 'production',
    migrations: ['dist/migrations/**/*{.ts,.js}'],
    migrationsRun: true,
  }),
);

================
File: src/main.ts
================
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Logger } from '@nestjs/common';

async function bootstrap() {
  const logger = new Logger('Bootstrap');
  const app = await NestFactory.create(AppModule);
  const configService = app.get(ConfigService);
  
  // Get configuration
  const port = configService.get<number>('app.port') || 3000;
  const apiPrefix = configService.get<string>('app.apiPrefix') || 'api';
  const environment = configService.get<string>('app.environment') || 'development';
  
  // Set global prefix
  app.setGlobalPrefix(apiPrefix);
  
  // Enable CORS
  app.enableCors();
  
  // Set up global validation pipe
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      transform: true,
      forbidNonWhitelisted: true,
      transformOptions: {
        enableImplicitConversion: true,
      },
    }),
  );
  
  await app.listen(port);
  logger.log(`Application running in ${environment} mode on port ${port}`);
  logger.log(`API available at: http://localhost:${port}/${apiPrefix}`);
}

bootstrap();

================
File: src/migrations/1709575571000-InitialSchema.ts
================
import { MigrationInterface, QueryRunner } from 'typeorm';

export class InitialSchema1709575571000 implements MigrationInterface {
  name = 'InitialSchema1709575571000';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // Create users table
    await queryRunner.query(`
      CREATE TABLE "users" (
        "id" SERIAL NOT NULL,
        "email" character varying NOT NULL,
        "password" character varying NOT NULL,
        "firstName" character varying NOT NULL,
        "lastName" character varying NOT NULL,
        "role" character varying NOT NULL,
        "isActive" boolean NOT NULL DEFAULT true,
        "lastLogin" TIMESTAMP,
        "createdAt" TIMESTAMP NOT NULL DEFAULT now(),
        "updatedAt" TIMESTAMP NOT NULL DEFAULT now(),
        "profileImage" character varying,
        "phoneNumber" character varying,
        "department" character varying,
        "title" character varying,
        "status" character varying NOT NULL DEFAULT 'active',
        "failedLoginAttempts" integer NOT NULL DEFAULT 0,
        "lastPasswordChange" TIMESTAMP,
        "preferences" json,
        CONSTRAINT "UQ_users_email" UNIQUE ("email"),
        CONSTRAINT "PK_users" PRIMARY KEY ("id")
      )
    `);

    // Create clients table
    await queryRunner.query(`
      CREATE TABLE "clients" (
        "id" SERIAL NOT NULL,
        "name" character varying NOT NULL,
        "industry" character varying,
        "email" character varying,
        "phone" character varying,
        "primaryContact" character varying,
        "createdAt" TIMESTAMP NOT NULL DEFAULT now(),
        "lastActivity" TIMESTAMP,
        "complianceScore" integer,
        "status" character varying NOT NULL DEFAULT 'active',
        "address" json,
        "size" character varying,
        "employeeCount" integer,
        "website" character varying,
        CONSTRAINT "PK_clients" PRIMARY KEY ("id")
      )
    `);

    // Create client_users table
    await queryRunner.query(`
      CREATE TABLE "client_users" (
        "id" SERIAL NOT NULL,
        "username" character varying NOT NULL,
        "email" character varying NOT NULL,
        "role" character varying NOT NULL,
        "clientId" integer NOT NULL,
        "firstName" character varying NOT NULL,
        "lastName" character varying NOT NULL,
        "title" character varying,
        "department" character varying,
        "phone" character varying,
        "isActive" boolean NOT NULL DEFAULT true,
        "lastActive" TIMESTAMP,
        "permissions" json,
        "createdAt" TIMESTAMP NOT NULL DEFAULT now(),
        "updatedAt" TIMESTAMP NOT NULL DEFAULT now(),
        CONSTRAINT "PK_client_users" PRIMARY KEY ("id")
      )
    `);

    // Add foreign key constraint
    await queryRunner.query(`
      ALTER TABLE "client_users" 
      ADD CONSTRAINT "FK_client_users_clients" 
      FOREIGN KEY ("clientId") 
      REFERENCES "clients"("id") 
      ON DELETE CASCADE 
      ON UPDATE NO ACTION
    `);

    // Create indexes
    await queryRunner.query(`
      CREATE INDEX "IDX_users_email" ON "users" ("email")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_client_users_clientId" ON "client_users" ("clientId")
    `);

    await queryRunner.query(`
      CREATE INDEX "IDX_client_users_email" ON "client_users" ("email")
    `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // Drop foreign key constraint
    await queryRunner.query(`
      ALTER TABLE "client_users" DROP CONSTRAINT "FK_client_users_clients"
    `);

    // Drop indexes
    await queryRunner.query(`DROP INDEX "IDX_client_users_email"`);
    await queryRunner.query(`DROP INDEX "IDX_client_users_clientId"`);
    await queryRunner.query(`DROP INDEX "IDX_users_email"`);

    // Drop tables
    await queryRunner.query(`DROP TABLE "client_users"`);
    await queryRunner.query(`DROP TABLE "clients"`);
    await queryRunner.query(`DROP TABLE "users"`);
  }
}

================
File: src/migrations/1709575572000-SeedData.ts
================
import { MigrationInterface, QueryRunner } from 'typeorm';
import * as bcrypt from 'bcrypt';

export class SeedData1709575572000 implements MigrationInterface {
  name = 'SeedData1709575572000';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // Hash password for admin user
    const salt = await bcrypt.genSalt();
    const hashedPassword = await bcrypt.hash('Admin123!', salt);

    // Insert admin user
    await queryRunner.query(`
      INSERT INTO "users" (
        "email", 
        "password", 
        "firstName", 
        "lastName", 
        "role", 
        "isActive", 
        "createdAt", 
        "updatedAt", 
        "status", 
        "lastPasswordChange"
      ) VALUES (
        'admin@example.com', 
        '${hashedPassword}', 
        'Admin', 
        'User', 
        'admin', 
        true, 
        now(), 
        now(), 
        'active', 
        now()
      )
    `);

    // Insert sample client
    await queryRunner.query(`
      INSERT INTO "clients" (
        "name", 
        "industry", 
        "email", 
        "phone", 
        "primaryContact", 
        "createdAt", 
        "status", 
        "address", 
        "size", 
        "employeeCount", 
        "website"
      ) VALUES (
        'Acme Corporation', 
        'Technology', 
        'contact@acme.com', 
        '555-123-4567', 
        'John Smith', 
        now(), 
        'active', 
        '{"street": "123 Main St", "city": "San Francisco", "state": "CA", "zipCode": "94105", "country": "USA"}', 
        'Large', 
        1000, 
        'https://acme.example.com'
      )
    `);

    // Insert sample client user
    await queryRunner.query(`
      INSERT INTO "client_users" (
        "username", 
        "email", 
        "role", 
        "clientId", 
        "firstName", 
        "lastName", 
        "title", 
        "department", 
        "phone", 
        "isActive", 
        "permissions", 
        "createdAt", 
        "updatedAt"
      ) VALUES (
        'jsmith', 
        'john.smith@acme.com', 
        'manager', 
        1, 
        'John', 
        'Smith', 
        'IT Manager', 
        'Information Technology', 
        '555-987-6543', 
        true, 
        '["view", "edit", "approve"]', 
        now(), 
        now()
      )
    `);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    // Delete sample data
    await queryRunner.query(`DELETE FROM "client_users" WHERE "email" = 'john.smith@acme.com'`);
    await queryRunner.query(`DELETE FROM "clients" WHERE "name" = 'Acme Corporation'`);
    await queryRunner.query(`DELETE FROM "users" WHERE "email" = 'admin@example.com'`);
  }
}

================
File: src/scripts/create-database.ts
================
import { Client } from 'pg';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

async function createDatabase() {
  const dbName = process.env.DB_DATABASE || 'grc_db';
  const client = new Client({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432', 10),
    user: process.env.DB_USERNAME || 'postgres',
    password: process.env.POSTGRES_PASSWORD,
    database: 'postgres', // Connect to default postgres database
  });

  try {
    await client.connect();
    console.log('Connected to PostgreSQL server');

    // Check if database exists
    const checkResult = await client.query(
      "SELECT 1 FROM pg_database WHERE datname = $1",
      [dbName]
    );

    // Create database if it doesn't exist
    if (checkResult.rowCount === 0) {
      console.log(`Creating database: ${dbName}`);
      await client.query(`CREATE DATABASE ${dbName}`);
      console.log('Database created successfully');
    } else {
      console.log(`Database ${dbName} already exists`);
    }
  } catch (error) {
    console.error('Error creating database:', error);
    throw error;
  } finally {
    await client.end();
    console.log('Disconnected from PostgreSQL server');
  }
}

// Execute the function
createDatabase()
  .then(() => {
    console.log('Database setup completed');
    process.exit(0);
  })
  .catch((error) => {
    console.error('Database setup failed:', error);
    process.exit(1);
  });

================
File: src/users/dto/create-user.dto.ts
================
import {
  IsEmail,
  IsNotEmpty,
  IsOptional,
  IsString,
  MinLength,
} from 'class-validator';

export class CreateUserDto {
  @IsNotEmpty()
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @IsString()
  @MinLength(8)
  password: string;

  @IsNotEmpty()
  @IsString()
  firstName: string;

  @IsNotEmpty()
  @IsString()
  lastName: string;

  @IsNotEmpty()
  @IsString()
  role: string;

  @IsOptional()
  @IsString()
  phoneNumber?: string;

  @IsOptional()
  @IsString()
  department?: string;

  @IsOptional()
  @IsString()
  title?: string;
}

================
File: src/users/dto/update-user.dto.ts
================
import {
  IsEmail,
  IsOptional,
  IsString,
  MinLength,
  IsBoolean,
  IsNumber,
  Min,
  IsDate,
} from 'class-validator';
import { Type } from 'class-transformer';

export class UpdateUserDto {
  @IsOptional()
  @IsEmail()
  email?: string;

  @IsOptional()
  @IsString()
  @MinLength(8)
  password?: string;

  @IsOptional()
  @IsString()
  firstName?: string;

  @IsOptional()
  @IsString()
  lastName?: string;

  @IsOptional()
  @IsString()
  role?: string;

  @IsOptional()
  @IsBoolean()
  isActive?: boolean;

  @IsOptional()
  @IsString()
  profileImage?: string;

  @IsOptional()
  @IsString()
  phoneNumber?: string;

  @IsOptional()
  @IsString()
  department?: string;

  @IsOptional()
  @IsString()
  title?: string;

  @IsOptional()
  @IsString()
  status?: string;

  @IsOptional()
  @IsNumber()
  @Min(0)
  failedLoginAttempts?: number;

  @IsOptional()
  @Type(() => Date)
  @IsDate()
  lastLogin?: Date;

  @IsOptional()
  @Type(() => Date)
  @IsDate()
  lastPasswordChange?: Date;
}

================
File: src/users/entities/user.entity.ts
================
import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  UpdateDateColumn,
} from 'typeorm';

@Entity('users')
export class User {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ unique: true })
  email: string;

  @Column()
  password: string;

  @Column()
  firstName: string;

  @Column()
  lastName: string;

  @Column()
  role: string;

  @Column({ default: true })
  isActive: boolean;

  @Column({ nullable: true, type: 'timestamp' })
  lastLogin: Date;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @Column({ nullable: true })
  profileImage: string;

  @Column({ nullable: true })
  phoneNumber: string;

  @Column({ nullable: true })
  department: string;

  @Column({ nullable: true })
  title: string;

  @Column({ default: 'active' })
  status: string;

  @Column({ default: 0 })
  failedLoginAttempts: number;

  @Column({ nullable: true, type: 'timestamp' })
  lastPasswordChange: Date;

  @Column({ type: 'json', nullable: true })
  preferences: Record<string, unknown>;
}

================
File: src/users/users.controller.ts
================
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
} from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { PaginationDto } from '../common/dto/pagination.dto';
import { ApiResponse } from '../common/interfaces/api-response.interface';
import { User } from './entities/user.entity';
import { UtilityService } from '../common/services/utility.service';
import { Roles } from '../common/decorators/roles.decorator';

@Controller('users')
export class UsersController {
  constructor(
    private readonly usersService: UsersService,
    private readonly utilityService: UtilityService,
  ) {}

  @Post()
  @Roles('admin')
  async create(@Body() createUserDto: CreateUserDto): Promise<ApiResponse<User>> {
    const user = await this.usersService.create(createUserDto);
    return this.utilityService.createSuccessResponse(
      user,
      'User created successfully',
    );
  }

  @Get()
  @Roles('admin')
  async findAll(@Query() paginationDto: PaginationDto): Promise<ApiResponse<{ users: User[]; total: number }>> {
    const [users, total] = await this.usersService.findAll(paginationDto);
    return this.utilityService.createSuccessResponse(
      { users, total },
      'Users retrieved successfully',
      {
        page: paginationDto.page,
        limit: paginationDto.limit,
        totalPages: Math.ceil(total / paginationDto.limit),
      },
    );
  }

  @Get(':id')
  @Roles('admin')
  async findOne(@Param('id') id: string): Promise<ApiResponse<User>> {
    const user = await this.usersService.findOne(+id);
    return this.utilityService.createSuccessResponse(
      user,
      'User retrieved successfully',
    );
  }

  @Patch(':id')
  @Roles('admin')
  async update(
    @Param('id') id: string,
    @Body() updateUserDto: UpdateUserDto,
  ): Promise<ApiResponse<User>> {
    const user = await this.usersService.update(+id, updateUserDto);
    return this.utilityService.createSuccessResponse(
      user,
      'User updated successfully',
    );
  }

  @Delete(':id')
  @Roles('admin')
  async remove(@Param('id') id: string): Promise<ApiResponse<null>> {
    await this.usersService.remove(+id);
    return this.utilityService.createSuccessResponse(
      null,
      'User deleted successfully',
    );
  }
}

================
File: src/users/users.module.ts
================
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UsersService } from './users.service';
import { UsersController } from './users.controller';
import { User } from './entities/user.entity';
import { CommonModule } from '../common/common.module';

@Module({
  imports: [
    TypeOrmModule.forFeature([User]),
    CommonModule,
  ],
  controllers: [UsersController],
  providers: [UsersService],
  exports: [UsersService],
})
export class UsersModule {}

================
File: src/users/users.service.ts
================
import {
  Injectable,
  NotFoundException,
  ConflictException,
  InternalServerErrorException,
  Logger,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { User } from './entities/user.entity';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { PaginationDto } from '../common/dto/pagination.dto';

@Injectable()
export class UsersService {
  private readonly logger = new Logger(UsersService.name);

  constructor(
    @InjectRepository(User)
    private usersRepository: Repository<User>,
  ) {}

  async create(createUserDto: CreateUserDto): Promise<User> {
    try {
      // Check if user with email already exists
      const existingUser = await this.findByEmail(createUserDto.email);
      if (existingUser) {
        throw new ConflictException('Email already exists');
      }

      // Hash password
      const salt = await bcrypt.genSalt();
      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);

      // Create new user
      const user = this.usersRepository.create({
        ...createUserDto,
        password: hashedPassword,
        lastPasswordChange: new Date(),
      });

      return await this.usersRepository.save(user);
    } catch (error) {
      if (error instanceof ConflictException) {
        throw error;
      }
      this.logger.error(`Failed to create user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to create user');
    }
  }

  async findAll(paginationDto: PaginationDto): Promise<[User[], number]> {
    try {
      return await this.usersRepository.findAndCount({
        skip: paginationDto.skip,
        take: paginationDto.limit,
        order: {
          createdAt: 'DESC',
        },
      });
    } catch (error) {
      this.logger.error(`Failed to find users: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to find users');
    }
  }

  async findOne(id: number): Promise<User> {
    try {
      const user = await this.usersRepository.findOne({ where: { id } });
      if (!user) {
        throw new NotFoundException(`User with ID ${id} not found`);
      }
      return user;
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to find user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to find user');
    }
  }

  async findByEmail(email: string): Promise<User | null> {
    try {
      return await this.usersRepository.findOne({ where: { email } });
    } catch (error) {
      this.logger.error(`Failed to find user by email: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to find user by email');
    }
  }

  async update(id: number, updateUserDto: UpdateUserDto): Promise<User> {
    try {
      const user = await this.findOne(id);

      // If password is being updated, hash it
      if (updateUserDto.password) {
        const salt = await bcrypt.genSalt();
        updateUserDto.password = await bcrypt.hash(updateUserDto.password, salt);
        user.lastPasswordChange = new Date();
      }

      // Update user
      Object.assign(user, updateUserDto);
      return await this.usersRepository.save(user);
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to update user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to update user');
    }
  }

  async remove(id: number): Promise<void> {
    try {
      const result = await this.usersRepository.delete(id);
      if (result.affected === 0) {
        throw new NotFoundException(`User with ID ${id} not found`);
      }
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error(`Failed to remove user: ${(error as Error).message}`, (error as Error).stack);
      throw new InternalServerErrorException('Failed to remove user');
    }
  }
}

================
File: test/app.e2e-spec.ts
================
import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { App } from 'supertest/types';
import { AppModule } from './../src/app.module';

describe('AppController (e2e)', () => {
  let app: INestApplication<App>;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  it('/ (GET)', () => {
    return request(app.getHttpServer())
      .get('/')
      .expect(200)
      .expect('Hello World!');
  });
});

================
File: test/jest-e2e.json
================
{
  "moduleFileExtensions": ["js", "json", "ts"],
  "rootDir": ".",
  "testEnvironment": "node",
  "testRegex": ".e2e-spec.ts$",
  "transform": {
    "^.+\\.(t|j)s$": "ts-jest"
  }
}

================
File: tsconfig.build.json
================
{
  "extends": "./tsconfig.json",
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2023",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "forceConsistentCasingInFileNames": true,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "noFallthroughCasesInSwitch": false
  }
}



================================================================
End of Codebase
================================================================
